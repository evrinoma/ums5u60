
stm32sbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800dd40  0800dd40  0001dd40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e424  0800e424  00020c48  2**0
                  CONTENTS
  4 .ARM          00000000  0800e424  0800e424  00020c48  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e424  0800e424  00020c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e424  0800e424  0001e424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e428  0800e428  0001e428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c48  20000000  0800e42c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d0  20000c48  0800f074  00020c48  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f18  0800f074  00021f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020c48  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020831  00000000  00000000  00020c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004837  00000000  00000000  000414a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00045ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  00047200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c21  00000000  00000000  00048528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c68d  00000000  00000000  0006c149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1fc7  00000000  00000000  000887d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a79d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006874  00000000  00000000  0014a7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c48 	.word	0x20000c48
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd28 	.word	0x0800dd28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c4c 	.word	0x20000c4c
 80001cc:	0800dd28 	.word	0x0800dd28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <init_flash>:
#include "flash.h"

void init_flash(){
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	  FLASH->KEYR = 0x45670123;
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <init_flash+0x1c>)
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <init_flash+0x20>)
 8000bb0:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = 0xCDEF89AB;
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <init_flash+0x1c>)
 8000bb4:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <init_flash+0x24>)
 8000bb6:	605a      	str	r2, [r3, #4]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40022000 	.word	0x40022000
 8000bc8:	45670123 	.word	0x45670123
 8000bcc:	cdef89ab 	.word	0xcdef89ab

08000bd0 <read>:

void read(tcontrol *p, uint32_t address)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
   uint32_t *ptr = (uint32_t* ) p;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]
   memcpy(ptr, address, sizeof(tcontrol));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	220c      	movs	r2, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f00a f967 	bl	800aeb8 <memcpy>
   p = (tcontrol*)(ptr);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	607b      	str	r3, [r7, #4]
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <erase>:

void erase(unsigned int pageAddress) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	while (FLASH->SR & FLASH_SR_BSY);
 8000c00:	bf00      	nop
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <erase+0x74>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f9      	bne.n	8000c02 <erase+0xa>
	if (FLASH->SR & FLASH_SR_EOP) {
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <erase+0x74>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f003 0320 	and.w	r3, r3, #32
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <erase+0x28>
		FLASH->SR = FLASH_SR_EOP;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <erase+0x74>)
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	60da      	str	r2, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PER;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <erase+0x74>)
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <erase+0x74>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	6113      	str	r3, [r2, #16]
	FLASH->AR = pageAddress;
 8000c2c:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <erase+0x74>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <erase+0x74>)
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <erase+0x74>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3c:	6113      	str	r3, [r2, #16]
	while (!(FLASH->SR & FLASH_SR_EOP));
 8000c3e:	bf00      	nop
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <erase+0x74>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	f003 0320 	and.w	r3, r3, #32
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f9      	beq.n	8000c40 <erase+0x48>
	FLASH->SR = FLASH_SR_EOP;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <erase+0x74>)
 8000c4e:	2220      	movs	r2, #32
 8000c50:	60da      	str	r2, [r3, #12]
	FLASH->CR &= ~FLASH_CR_PER;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <erase+0x74>)
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <erase+0x74>)
 8000c58:	f023 0302 	bic.w	r3, r3, #2
 8000c5c:	6113      	str	r3, [r2, #16]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40022000 	.word	0x40022000

08000c70 <write>:

void write(tcontrol *p, uint32_t address)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
    uint32_t *pRecord = (uint32_t* )p;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	617b      	str	r3, [r7, #20]
    uint32_t flash_address = address;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	613b      	str	r3, [r7, #16]

    for(int i=0; i<sizeof(tcontrol); i+=4, pRecord++, flash_address+=4)
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e011      	b.n	8000cac <write+0x3c>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address,*pRecord);
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	6939      	ldr	r1, [r7, #16]
 8000c94:	2002      	movs	r0, #2
 8000c96:	f002 fd11 	bl	80036bc <HAL_FLASH_Program>
    for(int i=0; i<sizeof(tcontrol); i+=4, pRecord++, flash_address+=4)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b0b      	cmp	r3, #11
 8000cb0:	d9ea      	bls.n	8000c88 <write+0x18>
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cc8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d013      	beq.n	8000cfc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cd8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000cdc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00b      	beq.n	8000cfc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ce4:	e000      	b.n	8000ce8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ce6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ce8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f9      	beq.n	8000ce6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cf2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_write>:
uint8_t cmd[RX_LENGTH];
uint8_t tx[RX_LENGTH];
uint8_t state = INIT;
uint8_t rx_counter = 0;

int _write(int file, uint8_t *ptr, int len) {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e009      	b.n	8000d30 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffc9 	bl	8000cbc <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf1      	blt.n	8000d1c <_write+0x12>
	}
	return len;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f001 f893 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f80b 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f000 f919 	bl	8000f84 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000d52:	f009 fbb3 	bl	800a4bc <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8000d56:	f000 f865 	bl	8000e24 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000d5a:	f000 f8c3 	bl	8000ee4 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		fsm();
 8000d5e:	f000 f981 	bl	8001064 <fsm>
 8000d62:	e7fc      	b.n	8000d5e <main+0x1c>

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09e      	sub	sp, #120	; 0x78
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d6e:	2228      	movs	r2, #40	; 0x28
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00a f8ae 	bl	800aed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	223c      	movs	r2, #60	; 0x3c
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00a f8a0 	bl	800aed4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da2:	2301      	movs	r3, #1
 8000da4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000db0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000db4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f004 fa08 	bl	80051d0 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dc6:	f000 fa6b 	bl	80012a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000de4:	2102      	movs	r1, #2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f005 f8fa 	bl	8005fe0 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000df2:	f000 fa55 	bl	80012a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <SystemClock_Config+0xbc>)
 8000df8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4618      	mov	r0, r3
 8000e08:	f005 fad2 	bl	80063b0 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e12:	f000 fa45 	bl	80012a0 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3778      	adds	r7, #120	; 0x78
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	00020080 	.word	0x00020080

08000e24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
 8000e38:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e3c:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <MX_ADC2_Init+0xbc>)
 8000e3e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000e98:	f001 f888 	bl	8001fac <HAL_ADC_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000ea2:	f000 f9fd 	bl	80012a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_ADC2_Init+0xb8>)
 8000ec4:	f001 ff3e 	bl	8002d44 <HAL_ADC_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000ece:	f000 f9e7 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000e98 	.word	0x20000e98
 8000ee0:	50000100 	.word	0x50000100

08000ee4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_TIM3_Init+0x98>)
 8000f04:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <MX_TIM3_Init+0x9c>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_TIM3_Init+0x98>)
 8000f0a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000f0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_TIM3_Init+0x98>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_TIM3_Init+0x98>)
 8000f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_TIM3_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_TIM3_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f2a:	4814      	ldr	r0, [pc, #80]	; (8000f7c <MX_TIM3_Init+0x98>)
 8000f2c:	f005 fbf0 	bl	8006710 <HAL_TIM_Base_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000f36:	f000 f9b3 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_TIM3_Init+0x98>)
 8000f48:	f005 fc39 	bl	80067be <HAL_TIM_ConfigClockSource>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000f52:	f000 f9a5 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f56:	2320      	movs	r3, #32
 8000f58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_TIM3_Init+0x98>)
 8000f64:	f005 fe1c 	bl	8006ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000f6e:	f000 f997 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3720      	adds	r7, #32
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000ef8 	.word	0x20000ef8
 8000f80:	40000400 	.word	0x40000400

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b30      	ldr	r3, [pc, #192]	; (800105c <MX_GPIO_Init+0xd8>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a2f      	ldr	r2, [pc, #188]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a29      	ldr	r2, [pc, #164]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a23      	ldr	r2, [pc, #140]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <MX_GPIO_Init+0xd8>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_GPIO_Init+0xd8>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001000:	4817      	ldr	r0, [pc, #92]	; (8001060 <MX_GPIO_Init+0xdc>)
 8001002:	f002 fdd3 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f002 fdcc 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_GPIO_Init+0xdc>)
 800102e:	f002 fc43 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f002 fc33 	bl	80038b8 <HAL_GPIO_Init>

}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	48000800 	.word	0x48000800

08001064 <fsm>:

/* USER CODE BEGIN 4 */
void fsm() {
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 800106a:	af00      	add	r7, sp, #0
	tstatus terminal;
	switch (state) {
 800106c:	4b87      	ldr	r3, [pc, #540]	; (800128c <fsm+0x228>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	3b01      	subs	r3, #1
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f200 8100 	bhi.w	8001278 <fsm+0x214>
 8001078:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <fsm+0x1c>)
 800107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107e:	bf00      	nop
 8001080:	0800114d 	.word	0x0800114d
 8001084:	080010c1 	.word	0x080010c1
 8001088:	080010d9 	.word	0x080010d9
 800108c:	080010e7 	.word	0x080010e7
 8001090:	080010f5 	.word	0x080010f5
 8001094:	08001103 	.word	0x08001103
 8001098:	08001111 	.word	0x08001111
 800109c:	0800111f 	.word	0x0800111f
 80010a0:	0800112d 	.word	0x0800112d
 80010a4:	0800113b 	.word	0x0800113b
 80010a8:	08001165 	.word	0x08001165
 80010ac:	080011d9 	.word	0x080011d9
 80010b0:	08001203 	.word	0x08001203
 80010b4:	08001223 	.word	0x08001223
 80010b8:	08001271 	.word	0x08001271
 80010bc:	0800124b 	.word	0x0800124b
	case INIT:
		init_hw();
 80010c0:	f000 fe5a 	bl	8001d78 <init_hw>
		read_config(&control);
 80010c4:	4872      	ldr	r0, [pc, #456]	; (8001290 <fsm+0x22c>)
 80010c6:	f000 fe5f 	bl	8001d88 <read_config>
		blink(INIT);
 80010ca:	2002      	movs	r0, #2
 80010cc:	f000 fd30 	bl	8001b30 <blink>
		state = INIT_GPIO;
 80010d0:	4b6e      	ldr	r3, [pc, #440]	; (800128c <fsm+0x228>)
 80010d2:	2203      	movs	r2, #3
 80010d4:	701a      	strb	r2, [r3, #0]
		break;
 80010d6:	e0d4      	b.n	8001282 <fsm+0x21e>
	case INIT_GPIO:
		blink(INIT_GPIO);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 fd29 	bl	8001b30 <blink>
		state = ENABLE_3V3;
 80010de:	4b6b      	ldr	r3, [pc, #428]	; (800128c <fsm+0x228>)
 80010e0:	2204      	movs	r2, #4
 80010e2:	701a      	strb	r2, [r3, #0]
		break;
 80010e4:	e0cd      	b.n	8001282 <fsm+0x21e>
	case ENABLE_3V3:
		blink(ENABLE_3V3);
 80010e6:	2004      	movs	r0, #4
 80010e8:	f000 fd22 	bl	8001b30 <blink>
		state = ENABLE_VCORE_GTH;
 80010ec:	4b67      	ldr	r3, [pc, #412]	; (800128c <fsm+0x228>)
 80010ee:	2205      	movs	r2, #5
 80010f0:	701a      	strb	r2, [r3, #0]
		break;
 80010f2:	e0c6      	b.n	8001282 <fsm+0x21e>
	case ENABLE_VCORE_GTH:
		blink(ENABLE_VCORE_GTH);
 80010f4:	2005      	movs	r0, #5
 80010f6:	f000 fd1b 	bl	8001b30 <blink>
		state = ENABLE_1V8;
 80010fa:	4b64      	ldr	r3, [pc, #400]	; (800128c <fsm+0x228>)
 80010fc:	2206      	movs	r2, #6
 80010fe:	701a      	strb	r2, [r3, #0]
		break;
 8001100:	e0bf      	b.n	8001282 <fsm+0x21e>
	case ENABLE_1V8:
		blink(ENABLE_1V8);
 8001102:	2006      	movs	r0, #6
 8001104:	f000 fd14 	bl	8001b30 <blink>
		state = ENABLE_BR;
 8001108:	4b60      	ldr	r3, [pc, #384]	; (800128c <fsm+0x228>)
 800110a:	2207      	movs	r2, #7
 800110c:	701a      	strb	r2, [r3, #0]
		break;
 800110e:	e0b8      	b.n	8001282 <fsm+0x21e>
	case ENABLE_BR:
		blink(ENABLE_BR);
 8001110:	2007      	movs	r0, #7
 8001112:	f000 fd0d 	bl	8001b30 <blink>
		state = INIT_SI5341;
 8001116:	4b5d      	ldr	r3, [pc, #372]	; (800128c <fsm+0x228>)
 8001118:	2208      	movs	r2, #8
 800111a:	701a      	strb	r2, [r3, #0]
		break;
 800111c:	e0b1      	b.n	8001282 <fsm+0x21e>
	case INIT_SI5341:
		blink(INIT_SI5341);
 800111e:	2008      	movs	r0, #8
 8001120:	f000 fd06 	bl	8001b30 <blink>
		state = TPS_CFG;
 8001124:	4b59      	ldr	r3, [pc, #356]	; (800128c <fsm+0x228>)
 8001126:	2209      	movs	r2, #9
 8001128:	701a      	strb	r2, [r3, #0]
		break;
 800112a:	e0aa      	b.n	8001282 <fsm+0x21e>
	case TPS_CFG:
		blink(INIT_SI5341);
 800112c:	2008      	movs	r0, #8
 800112e:	f000 fcff 	bl	8001b30 <blink>
		state = INIT_USB;
 8001132:	4b56      	ldr	r3, [pc, #344]	; (800128c <fsm+0x228>)
 8001134:	220a      	movs	r2, #10
 8001136:	701a      	strb	r2, [r3, #0]
		break;
 8001138:	e0a3      	b.n	8001282 <fsm+0x21e>
	case INIT_USB:
		blink(INIT_USB);
 800113a:	200a      	movs	r0, #10
 800113c:	f000 fcf8 	bl	8001b30 <blink>
		USB_init();
 8001140:	f000 fcce 	bl	8001ae0 <USB_init>
		state = IDLE;
 8001144:	4b51      	ldr	r3, [pc, #324]	; (800128c <fsm+0x228>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
		break;
 800114a:	e09a      	b.n	8001282 <fsm+0x21e>
	case IDLE:
		blink(IDLE);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 fcef 	bl	8001b30 <blink>
		if (strlen(rx) != 0) {
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <fsm+0x230>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 8092 	beq.w	8001280 <fsm+0x21c>
			state = CMD;
 800115c:	4b4b      	ldr	r3, [pc, #300]	; (800128c <fsm+0x228>)
 800115e:	220b      	movs	r2, #11
 8001160:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001162:	e08d      	b.n	8001280 <fsm+0x21c>
	case CMD:
		if (strchr(rx, BS) != NULL) {
 8001164:	2108      	movs	r1, #8
 8001166:	484b      	ldr	r0, [pc, #300]	; (8001294 <fsm+0x230>)
 8001168:	f00a fb55 	bl	800b816 <strchr>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <fsm+0x116>
			state = CMD_BS;
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <fsm+0x228>)
 8001174:	220e      	movs	r2, #14
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e024      	b.n	80011c4 <fsm+0x160>
		} else {
			rx_counter += strlen(rx);
 800117a:	4846      	ldr	r0, [pc, #280]	; (8001294 <fsm+0x230>)
 800117c:	f7ff f828 	bl	80001d0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b44      	ldr	r3, [pc, #272]	; (8001298 <fsm+0x234>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4413      	add	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b42      	ldr	r3, [pc, #264]	; (8001298 <fsm+0x234>)
 800118e:	701a      	strb	r2, [r3, #0]
			if (rx_counter <= RX_LENGTH) {
 8001190:	4b41      	ldr	r3, [pc, #260]	; (8001298 <fsm+0x234>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d812      	bhi.n	80011be <fsm+0x15a>
				if (strchr(rx, CR) != NULL) {
 8001198:	210d      	movs	r1, #13
 800119a:	483e      	ldr	r0, [pc, #248]	; (8001294 <fsm+0x230>)
 800119c:	f00a fb3b 	bl	800b816 <strchr>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <fsm+0x14a>
					state = CMD_PARSE;
 80011a6:	4b39      	ldr	r3, [pc, #228]	; (800128c <fsm+0x228>)
 80011a8:	220c      	movs	r2, #12
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e002      	b.n	80011b4 <fsm+0x150>
				} else {
					state = IDLE;
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <fsm+0x228>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
				}
				strcat(cmd, rx);
 80011b4:	4937      	ldr	r1, [pc, #220]	; (8001294 <fsm+0x230>)
 80011b6:	4839      	ldr	r0, [pc, #228]	; (800129c <fsm+0x238>)
 80011b8:	f00a fb1e 	bl	800b7f8 <strcat>
 80011bc:	e002      	b.n	80011c4 <fsm+0x160>
			} else {
				state = CMD_ERASE;
 80011be:	4b33      	ldr	r3, [pc, #204]	; (800128c <fsm+0x228>)
 80011c0:	220d      	movs	r2, #13
 80011c2:	701a      	strb	r2, [r3, #0]
			}
		}
		memset(rx, 0, strlen(rx));
 80011c4:	4833      	ldr	r0, [pc, #204]	; (8001294 <fsm+0x230>)
 80011c6:	f7ff f803 	bl	80001d0 <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	2100      	movs	r1, #0
 80011d0:	4830      	ldr	r0, [pc, #192]	; (8001294 <fsm+0x230>)
 80011d2:	f009 fe7f 	bl	800aed4 <memset>
		break;
 80011d6:	e054      	b.n	8001282 <fsm+0x21e>
	case CMD_PARSE:
		terminal = command_parse(cmd);
 80011d8:	f507 7403 	add.w	r4, r7, #524	; 0x20c
 80011dc:	463b      	mov	r3, r7
 80011de:	492f      	ldr	r1, [pc, #188]	; (800129c <fsm+0x238>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fbe9 	bl	80019b8 <command_parse>
 80011e6:	463b      	mov	r3, r7
 80011e8:	4620      	mov	r0, r4
 80011ea:	4619      	mov	r1, r3
 80011ec:	f240 2301 	movw	r3, #513	; 0x201
 80011f0:	461a      	mov	r2, r3
 80011f2:	f009 fe61 	bl	800aeb8 <memcpy>
		state = terminal.state;
 80011f6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <fsm+0x228>)
 80011fe:	701a      	strb	r2, [r3, #0]
		break;
 8001200:	e03f      	b.n	8001282 <fsm+0x21e>
	case CMD_ERASE:
		rx_counter = 0;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <fsm+0x234>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
		memset(cmd, 0, strlen(cmd));
 8001208:	4824      	ldr	r0, [pc, #144]	; (800129c <fsm+0x238>)
 800120a:	f7fe ffe1 	bl	80001d0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	4821      	ldr	r0, [pc, #132]	; (800129c <fsm+0x238>)
 8001216:	f009 fe5d 	bl	800aed4 <memset>
		state = IDLE;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <fsm+0x228>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
		break;
 8001220:	e02f      	b.n	8001282 <fsm+0x21e>
	case CMD_BS:
		if (rx_counter > 0)
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <fsm+0x234>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <fsm+0x1d2>
			rx_counter--;
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <fsm+0x234>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	3b01      	subs	r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <fsm+0x234>)
 8001234:	701a      	strb	r2, [r3, #0]
		cmd[rx_counter] = '\0';
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <fsm+0x234>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <fsm+0x238>)
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]
		state = IDLE;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <fsm+0x228>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
		break;
 8001248:	e01b      	b.n	8001282 <fsm+0x21e>
	case FEEDBACK_CDC:
		CDC_Transmit_FS((uint8_t*) terminal.result, strlen(terminal.result));
 800124a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800124e:	3301      	adds	r3, #1
 8001250:	4618      	mov	r0, r3
 8001252:	f7fe ffbd 	bl	80001d0 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800125e:	3301      	adds	r3, #1
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f009 f9f2 	bl	800a64c <CDC_Transmit_FS>
		state = CMD_ERASE;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <fsm+0x228>)
 800126a:	220d      	movs	r2, #13
 800126c:	701a      	strb	r2, [r3, #0]
		break;
 800126e:	e008      	b.n	8001282 <fsm+0x21e>
	case FEEDBACK_DISABLED:
		state = CMD_ERASE;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <fsm+0x228>)
 8001272:	220d      	movs	r2, #13
 8001274:	701a      	strb	r2, [r3, #0]
		break;
 8001276:	e004      	b.n	8001282 <fsm+0x21e>
	default:
		state = INIT;
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <fsm+0x228>)
 800127a:	2202      	movs	r2, #2
 800127c:	701a      	strb	r2, [r3, #0]
		break;
 800127e:	e000      	b.n	8001282 <fsm+0x21e>
		break;
 8001280:	bf00      	nop
	}
}
 8001282:	bf00      	nop
 8001284:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	2000000c 	.word	0x2000000c
 8001290:	20000000 	.word	0x20000000
 8001294:	20000ee8 	.word	0x20000ee8
 8001298:	20000c64 	.word	0x20000c64
 800129c:	20000f54 	.word	0x20000f54

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x44>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x44>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_MspInit+0x44>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_MspInit+0x44>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_MspInit+0x44>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_ADC_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12c      	bne.n	8001370 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_ADC_MspInit+0x88>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_ADC_MspInit+0x88>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6153      	str	r3, [r2, #20]
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_ADC_MspInit+0x88>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <HAL_ADC_MspInit+0x88>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <HAL_ADC_MspInit+0x88>)
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	6153      	str	r3, [r2, #20]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_ADC_MspInit+0x88>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001346:	2310      	movs	r3, #16
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135c:	f002 faac 	bl	80038b8 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2012      	movs	r0, #18
 8001366:	f002 f972 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800136a:	2012      	movs	r0, #18
 800136c:	f002 f98b 	bl	8003686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	; 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	50000100 	.word	0x50000100
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_TIM_Base_MspInit+0x38>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10b      	bne.n	80013aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_TIM_Base_MspInit+0x3c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_TIM_Base_MspInit+0x3c>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_TIM_Base_MspInit+0x3c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40000400 	.word	0x40000400
 80013bc:	40021000 	.word	0x40021000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 fd76 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <ADC1_2_IRQHandler+0x10>)
 800141a:	f001 f8f5 	bl	8002608 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000e98 	.word	0x20000e98

08001428 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800142e:	f002 fcd9 	bl	8003de4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20001c1c 	.word	0x20001c1c

0800143c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	return 1;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_kill>:

int _kill(int pid, int sig)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001456:	f009 fd05 	bl	800ae64 <__errno>
 800145a:	4603      	mov	r3, r0
 800145c:	2216      	movs	r2, #22
 800145e:	601a      	str	r2, [r3, #0]
	return -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_exit>:

void _exit (int status)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ffe7 	bl	800144c <_kill>
	while (1) {}		/* Make sure we hang here */
 800147e:	e7fe      	b.n	800147e <_exit+0x12>

08001480 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e00a      	b.n	80014a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001492:	f3af 8000 	nop.w
 8001496:	4601      	mov	r1, r0
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf0      	blt.n	8001492 <_read+0x12>
	}

return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_close>:
}



int _close(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e2:	605a      	str	r2, [r3, #4]
	return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f009 fc86 	bl	800ae64 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20008000 	.word	0x20008000
 8001584:	00000400 	.word	0x00000400
 8001588:	20000c68 	.word	0x20000c68
 800158c:	20001f18 	.word	0x20001f18

08001590 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <action_help>:
#include "terminal.h"
#include "action.h"

void action_help(tstatus *terminal, taction *action) {
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	uint16_t amount_info_length = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	81fb      	strh	r3, [r7, #14]
	uint8_t i = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	737b      	strb	r3, [r7, #13]
	terminal->state = feedback();
 80015c6:	f000 fb8d 	bl	8001ce4 <feedback>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	701a      	strb	r2, [r3, #0]

   for (i = 0; i < count_actions; i++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	737b      	strb	r3, [r7, #13]
 80015d6:	e073      	b.n	80016c0 <action_help+0x10c>
	   if ((amount_info_length+actions[i].cmd_length)>=RESULT_MAX_LENGTH)
 80015d8:	89fb      	ldrh	r3, [r7, #14]
 80015da:	7b7a      	ldrb	r2, [r7, #13]
 80015dc:	4940      	ldr	r1, [pc, #256]	; (80016e0 <action_help+0x12c>)
 80015de:	2098      	movs	r0, #152	; 0x98
 80015e0:	fb00 f202 	mul.w	r2, r0, r2
 80015e4:	440a      	add	r2, r1
 80015e6:	3214      	adds	r2, #20
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f0:	da6c      	bge.n	80016cc <action_help+0x118>
			break;
		memcpy(terminal->result + amount_info_length, &actions[i].cmd, actions[i].cmd_length + 1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	18d0      	adds	r0, r2, r3
 80015fa:	7b7b      	ldrb	r3, [r7, #13]
 80015fc:	2298      	movs	r2, #152	; 0x98
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <action_help+0x12c>)
 8001604:	4413      	add	r3, r2
 8001606:	1d19      	adds	r1, r3, #4
 8001608:	7b7b      	ldrb	r3, [r7, #13]
 800160a:	4a35      	ldr	r2, [pc, #212]	; (80016e0 <action_help+0x12c>)
 800160c:	2498      	movs	r4, #152	; 0x98
 800160e:	fb04 f303 	mul.w	r3, r4, r3
 8001612:	4413      	add	r3, r2
 8001614:	3314      	adds	r3, #20
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	461a      	mov	r2, r3
 800161c:	f009 fc4c 	bl	800aeb8 <memcpy>
		amount_info_length+=actions[i].cmd_length;
 8001620:	7b7b      	ldrb	r3, [r7, #13]
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <action_help+0x12c>)
 8001624:	2198      	movs	r1, #152	; 0x98
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	3314      	adds	r3, #20
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b29a      	uxth	r2, r3
 8001632:	89fb      	ldrh	r3, [r7, #14]
 8001634:	4413      	add	r3, r2
 8001636:	81fb      	strh	r3, [r7, #14]
	   if ((amount_info_length+1)>=RESULT_MAX_LENGTH)
 8001638:	89fb      	ldrh	r3, [r7, #14]
 800163a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800163e:	d847      	bhi.n	80016d0 <action_help+0x11c>
			break;
		memcpy(terminal->result + amount_info_length, "-", 2);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	4413      	add	r3, r2
 8001648:	2202      	movs	r2, #2
 800164a:	4926      	ldr	r1, [pc, #152]	; (80016e4 <action_help+0x130>)
 800164c:	4618      	mov	r0, r3
 800164e:	f009 fc33 	bl	800aeb8 <memcpy>
		amount_info_length+=1;
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	3301      	adds	r3, #1
 8001656:	81fb      	strh	r3, [r7, #14]
		if ((amount_info_length+actions[i].info_length)>=RESULT_MAX_LENGTH)
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	7b7a      	ldrb	r2, [r7, #13]
 800165c:	4920      	ldr	r1, [pc, #128]	; (80016e0 <action_help+0x12c>)
 800165e:	2098      	movs	r0, #152	; 0x98
 8001660:	fb00 f202 	mul.w	r2, r0, r2
 8001664:	440a      	add	r2, r1
 8001666:	3295      	adds	r2, #149	; 0x95
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	4413      	add	r3, r2
 800166c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001670:	da30      	bge.n	80016d4 <action_help+0x120>
			break;
		memcpy(terminal->result + amount_info_length, &actions[i].info, actions[i].info_length + 1);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	18d0      	adds	r0, r2, r3
 800167a:	7b7b      	ldrb	r3, [r7, #13]
 800167c:	2298      	movs	r2, #152	; 0x98
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	3310      	adds	r3, #16
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <action_help+0x12c>)
 8001686:	4413      	add	r3, r2
 8001688:	1d59      	adds	r1, r3, #5
 800168a:	7b7b      	ldrb	r3, [r7, #13]
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <action_help+0x12c>)
 800168e:	2498      	movs	r4, #152	; 0x98
 8001690:	fb04 f303 	mul.w	r3, r4, r3
 8001694:	4413      	add	r3, r2
 8001696:	3395      	adds	r3, #149	; 0x95
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	461a      	mov	r2, r3
 800169e:	f009 fc0b 	bl	800aeb8 <memcpy>
		amount_info_length+=actions[i].info_length;
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <action_help+0x12c>)
 80016a6:	2198      	movs	r1, #152	; 0x98
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	3395      	adds	r3, #149	; 0x95
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	4413      	add	r3, r2
 80016b8:	81fb      	strh	r3, [r7, #14]
   for (i = 0; i < count_actions; i++) {
 80016ba:	7b7b      	ldrb	r3, [r7, #13]
 80016bc:	3301      	adds	r3, #1
 80016be:	737b      	strb	r3, [r7, #13]
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <action_help+0x134>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	7b7a      	ldrb	r2, [r7, #13]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d386      	bcc.n	80015d8 <action_help+0x24>

	}
}
 80016ca:	e004      	b.n	80016d6 <action_help+0x122>
			break;
 80016cc:	bf00      	nop
 80016ce:	e002      	b.n	80016d6 <action_help+0x122>
			break;
 80016d0:	bf00      	nop
 80016d2:	e000      	b.n	80016d6 <action_help+0x122>
			break;
 80016d4:	bf00      	nop
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000014 	.word	0x20000014
 80016e4:	0800dd40 	.word	0x0800dd40
 80016e8:	200008fc 	.word	0x200008fc

080016ec <action_on_pc13>:

void action_on_pc13(tstatus *terminal, taction *action) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	set_on_pc13();
 80016f6:	f000 fa95 	bl	8001c24 <set_on_pc13>
	terminal->state = feedback();
 80016fa:	f000 faf3 	bl	8001ce4 <feedback>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3315      	adds	r3, #21
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f00a f851 	bl	800b7b8 <siprintf>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <action_off_pc13>:

void action_off_pc13(tstatus *terminal, taction *action) {
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
	set_off_pc13();
 8001728:	f000 fa88 	bl	8001c3c <set_off_pc13>
	terminal->state = feedback();
 800172c:	f000 fada 	bl	8001ce4 <feedback>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	3315      	adds	r3, #21
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f00a f838 	bl	800b7b8 <siprintf>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <action_on_pc15>:

void action_on_pc15(tstatus *terminal, taction *action) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	set_on_pc15();
 800175a:	f000 fa7b 	bl	8001c54 <set_on_pc15>
	terminal->state = feedback();
 800175e:	f000 fac1 	bl	8001ce4 <feedback>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3315      	adds	r3, #21
 8001772:	4619      	mov	r1, r3
 8001774:	4610      	mov	r0, r2
 8001776:	f00a f81f 	bl	800b7b8 <siprintf>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <action_off_pc15>:

void action_off_pc15(tstatus *terminal, taction *action) {
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
	set_off_pc15();
 800178c:	f000 fa6e 	bl	8001c6c <set_off_pc15>
	terminal->state = feedback();
 8001790:	f000 faa8 	bl	8001ce4 <feedback>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	3315      	adds	r3, #21
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f00a f806 	bl	800b7b8 <siprintf>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <action_on_blink>:

void action_on_blink(tstatus *terminal, taction *action) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	set_on_blink();
 80017be:	f000 fa61 	bl	8001c84 <set_on_blink>
	terminal->state = feedback();
 80017c2:	f000 fa8f 	bl	8001ce4 <feedback>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	3315      	adds	r3, #21
 80017d6:	4619      	mov	r1, r3
 80017d8:	4610      	mov	r0, r2
 80017da:	f009 ffed 	bl	800b7b8 <siprintf>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <action_off_blink>:

void action_off_blink(tstatus *terminal, taction *action) {
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	set_off_blink();
 80017f0:	f000 fa54 	bl	8001c9c <set_off_blink>
	terminal->state = feedback();
 80017f4:	f000 fa76 	bl	8001ce4 <feedback>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	3315      	adds	r3, #21
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f009 ffd4 	bl	800b7b8 <siprintf>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <action_cdc_feedback>:

void action_cdc_feedback(tstatus *terminal, taction *action) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	set_cdc_feedback();
 8001822:	f000 fa47 	bl	8001cb4 <set_cdc_feedback>
	terminal->state = feedback();
 8001826:	f000 fa5d 	bl	8001ce4 <feedback>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	3315      	adds	r3, #21
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f009 ffbb 	bl	800b7b8 <siprintf>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <action_off_feedback>:

void action_off_feedback(tstatus *terminal, taction *action) {
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
	set_off_feedback();
 8001854:	f000 fa3a 	bl	8001ccc <set_off_feedback>
	terminal->state = feedback();
 8001858:	f000 fa44 	bl	8001ce4 <feedback>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	3315      	adds	r3, #21
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f009 ffa2 	bl	800b7b8 <siprintf>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <action_on_adc>:

void action_on_adc(tstatus *terminal, taction *action) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	set_on_adc();
 8001886:	f000 fa39 	bl	8001cfc <set_on_adc>
	terminal->state = feedback();
 800188a:	f000 fa2b 	bl	8001ce4 <feedback>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	3315      	adds	r3, #21
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f009 ff89 	bl	800b7b8 <siprintf>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <action_off_adc>:

void action_off_adc(tstatus *terminal, taction *action) {
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
	set_off_adc();
 80018b8:	f000 fa2c 	bl	8001d14 <set_off_adc>
	terminal->state = feedback();
 80018bc:	f000 fa12 	bl	8001ce4 <feedback>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	3315      	adds	r3, #21
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f009 ff70 	bl	800b7b8 <siprintf>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <action_adc>:

void action_adc(tstatus *terminal, taction *action) {
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	float value = 0;
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
	value = get_sense_12V_normalized();
 80018f0:	f000 fa1c 	bl	8001d2c <get_sense_12V_normalized>
 80018f4:	ed87 0a03 	vstr	s0, [r7, #12]
	terminal->state = feedback();
 80018f8:	f000 f9f4 	bl	8001ce4 <feedback>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, "%.2fv\r\n", value);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	1c5c      	adds	r4, r3, #1
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f7fe fe1d 	bl	8000548 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4904      	ldr	r1, [pc, #16]	; (8001924 <action_adc+0x44>)
 8001914:	4620      	mov	r0, r4
 8001916:	f009 ff4f 	bl	800b7b8 <siprintf>
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	bf00      	nop
 8001924:	0800dd44 	.word	0x0800dd44

08001928 <action_status>:

void action_status(tstatus *terminal, taction *action) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	terminal->state = feedback();
 8001932:	f000 f9d7 	bl	8001ce4 <feedback>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	3315      	adds	r3, #21
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f009 ff35 	bl	800b7b8 <siprintf>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <action_write>:

void action_write(tstatus *terminal, taction *action)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
	write_config();
 8001960:	f000 fa4c 	bl	8001dfc <write_config>
	terminal->state = feedback();
 8001964:	f000 f9be 	bl	8001ce4 <feedback>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3315      	adds	r3, #21
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f009 ff1c 	bl	800b7b8 <siprintf>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <action_read>:

void action_read(tstatus *terminal, taction *action)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	terminal->state = feedback();
 8001992:	f000 f9a7 	bl	8001ce4 <feedback>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	701a      	strb	r2, [r3, #0]
	sprintf(terminal->result, action->info);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	3315      	adds	r3, #21
 80019a6:	4619      	mov	r1, r3
 80019a8:	4610      	mov	r0, r2
 80019aa:	f009 ff05 	bl	800b7b8 <siprintf>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <command_parse>:

tstatus command_parse(uint8_t *buff) {
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80019be:	af00      	add	r7, sp, #0
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	6018      	str	r0, [r3, #0]
 80019c4:	463b      	mov	r3, r7
 80019c6:	6019      	str	r1, [r3, #0]
	tstatus terminal = { CMD_ERASE, { 0 } };
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <command_parse+0x118>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	4611      	mov	r1, r2
 80019d2:	f240 2301 	movw	r3, #513	; 0x201
 80019d6:	461a      	mov	r2, r3
 80019d8:	f009 fa6e 	bl	800aeb8 <memcpy>
	uint8_t *list_lexems[LEXEM_LENGTH] = { 0 };
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	461a      	mov	r2, r3
 80019e2:	2300      	movs	r3, #0
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	6053      	str	r3, [r2, #4]
 80019e8:	6093      	str	r3, [r2, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
 80019ec:	6113      	str	r3, [r2, #16]
	uint8_t i = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint8_t *lexem;

	for (lexem = strtok(buff, " \r"); lexem != NULL;
 80019f4:	463b      	mov	r3, r7
 80019f6:	4937      	ldr	r1, [pc, #220]	; (8001ad4 <command_parse+0x11c>)
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	f009 ff3f 	bl	800b87c <strtok>
 80019fe:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
 8001a02:	e012      	b.n	8001a2a <command_parse+0x72>
			lexem = strtok(NULL, " \r")) {
		list_lexems[i] = lexem;
 8001a04:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8001a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		i++;
 8001a14:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
			lexem = strtok(NULL, " \r")) {
 8001a1e:	492d      	ldr	r1, [pc, #180]	; (8001ad4 <command_parse+0x11c>)
 8001a20:	2000      	movs	r0, #0
 8001a22:	f009 ff2b 	bl	800b87c <strtok>
 8001a26:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	for (lexem = strtok(buff, " \r"); lexem != NULL;
 8001a2a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1e8      	bne.n	8001a04 <command_parse+0x4c>
	}

	for (i = 0; i < count_actions; i++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
 8001a38:	e032      	b.n	8001aa0 <command_parse+0xe8>
		if (!strncmp(list_lexems[0], actions[i].cmd, actions[i].cmd_length)) {
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001a44:	2298      	movs	r2, #152	; 0x98
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <command_parse+0x120>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	1d19      	adds	r1, r3, #4
 8001a50:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <command_parse+0x120>)
 8001a56:	2498      	movs	r4, #152	; 0x98
 8001a58:	fb04 f303 	mul.w	r3, r4, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3314      	adds	r3, #20
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	f009 fee4 	bl	800b830 <strncmp>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d113      	bne.n	8001a96 <command_parse+0xde>
			actions[i].operations(&terminal, &actions[i]);
 8001a6e:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <command_parse+0x120>)
 8001a74:	2198      	movs	r1, #152	; 0x98
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001a82:	2198      	movs	r1, #152	; 0x98
 8001a84:	fb01 f202 	mul.w	r2, r1, r2
 8001a88:	4913      	ldr	r1, [pc, #76]	; (8001ad8 <command_parse+0x120>)
 8001a8a:	4411      	add	r1, r2
 8001a8c:	f107 021c 	add.w	r2, r7, #28
 8001a90:	4610      	mov	r0, r2
 8001a92:	4798      	blx	r3
			break;
 8001a94:	e00a      	b.n	8001aac <command_parse+0xf4>
	for (i = 0; i < count_actions; i++) {
 8001a96:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <command_parse+0x124>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d3c6      	bcc.n	8001a3a <command_parse+0x82>
		}
	}

	return terminal;
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f240 2301 	movw	r3, #513	; 0x201
 8001abc:	461a      	mov	r2, r3
 8001abe:	f009 f9fb 	bl	800aeb8 <memcpy>
}
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd90      	pop	{r4, r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	0800dd50 	.word	0x0800dd50
 8001ad4:	0800dd4c 	.word	0x0800dd4c
 8001ad8:	20000014 	.word	0x20000014
 8001adc:	200008fc 	.word	0x200008fc

08001ae0 <USB_init>:
#include "usb.h"

void USB_init(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f002 f85d 	bl	8003bac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001af2:	2014      	movs	r0, #20
 8001af4:	f000 fa22 	bl	8001f3c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b02:	f002 f853 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_ADC_ConvCpltCallback>:

extern tcontrol control;
extern ADC_HandleTypeDef* hadc2;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	control.sense_12V_normalized = HAL_ADC_GetValue(hadc);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fd69 	bl	80025ec <HAL_ADC_GetValue>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_ADC_ConvCpltCallback+0x20>)
 8001b20:	811a      	strh	r2, [r3, #8]
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <blink>:

void blink(uint8_t count) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
	if (control.blink == 1) {
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <blink+0x58>)
 8001b40:	78db      	ldrb	r3, [r3, #3]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d11b      	bne.n	8001b7e <blink+0x4e>
		for (i; i < count; i++) {
 8001b46:	e00c      	b.n	8001b62 <blink+0x32>
			on_pc13();
 8001b48:	f000 f820 	bl	8001b8c <on_pc13>
			HAL_Delay(DELAY);
 8001b4c:	2014      	movs	r0, #20
 8001b4e:	f000 f9f5 	bl	8001f3c <HAL_Delay>
			off_pc13();
 8001b52:	f000 f82d 	bl	8001bb0 <off_pc13>
			HAL_Delay(DELAY);
 8001b56:	2014      	movs	r0, #20
 8001b58:	f000 f9f0 	bl	8001f3c <HAL_Delay>
		for (i; i < count; i++) {
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d3ee      	bcc.n	8001b48 <blink+0x18>
		}
		off_pc13();
 8001b6a:	f000 f821 	bl	8001bb0 <off_pc13>
		HAL_Delay(count * DELAY);
 8001b6e:	79fa      	ldrb	r2, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f9df 	bl	8001f3c <HAL_Delay>
	}
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000000 	.word	0x20000000

08001b8c <on_pc13>:

void on_pc13() {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	if (control.pc13)
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <on_pc13+0x1c>)
 8001b92:	785b      	ldrb	r3, [r3, #1]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <on_pc13+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9e:	4803      	ldr	r0, [pc, #12]	; (8001bac <on_pc13+0x20>)
 8001ba0:	f002 f804 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	48000800 	.word	0x48000800

08001bb0 <off_pc13>:

void off_pc13()
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bba:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <off_pc13+0x14>)
 8001bbc:	f001 fff6 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	48000800 	.word	0x48000800

08001bc8 <off_pc15>:
	if (control.pc15)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
}

void off_pc15()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd6:	f001 ffe9 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <set_adc_timer>:

void set_adc_timer()
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	TIM3->CR1 = ((control.adc) ? TIM_CR1_CEN : TIM_CR1_CEN_Pos) | TIM_CR1_ARPE;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <set_adc_timer+0x38>)
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <set_adc_timer+0x10>
 8001bec:	2381      	movs	r3, #129	; 0x81
 8001bee:	e000      	b.n	8001bf2 <set_adc_timer+0x12>
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <set_adc_timer+0x3c>)
 8001bf4:	6013      	str	r3, [r2, #0]

	if (control.adc) {
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <set_adc_timer+0x38>)
 8001bf8:	791b      	ldrb	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00a      	beq.n	8001c14 <set_adc_timer+0x34>
		while(HAL_ADCEx_Calibration_Start(& hadc2, ADC_SINGLE_ENDED) != HAL_OK);
 8001bfe:	bf00      	nop
 8001c00:	2100      	movs	r1, #0
 8001c02:	4807      	ldr	r0, [pc, #28]	; (8001c20 <set_adc_timer+0x40>)
 8001c04:	f001 f80c 	bl	8002c20 <HAL_ADCEx_Calibration_Start>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f8      	bne.n	8001c00 <set_adc_timer+0x20>
		HAL_ADC_Start_IT(& hadc2);
 8001c0e:	4804      	ldr	r0, [pc, #16]	; (8001c20 <set_adc_timer+0x40>)
 8001c10:	f000 fbac 	bl	800236c <HAL_ADC_Start_IT>
	}
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	20000e98 	.word	0x20000e98

08001c24 <set_on_pc13>:

void set_on_pc13() {
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	control.pc13 = 1;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <set_on_pc13+0x14>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	705a      	strb	r2, [r3, #1]
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	20000000 	.word	0x20000000

08001c3c <set_off_pc13>:

void set_off_pc13() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	off_pc13();
 8001c40:	f7ff ffb6 	bl	8001bb0 <off_pc13>
	control.pc13 = 0;
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <set_off_pc13+0x14>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000

08001c54 <set_on_pc15>:

void set_on_pc15() {
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
	control.pc15 = 1;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <set_on_pc15+0x14>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	709a      	strb	r2, [r3, #2]
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	20000000 	.word	0x20000000

08001c6c <set_off_pc15>:

void set_off_pc15() {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	off_pc15();
 8001c70:	f7ff ffaa 	bl	8001bc8 <off_pc15>
	control.pc15 = 0;
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <set_off_pc15+0x14>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	709a      	strb	r2, [r3, #2]
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000

08001c84 <set_on_blink>:

void set_on_blink() {
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
	control.blink = 1;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <set_on_blink+0x14>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	70da      	strb	r2, [r3, #3]
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000000 	.word	0x20000000

08001c9c <set_off_blink>:

void set_off_blink() {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	off_pc13();
 8001ca0:	f7ff ff86 	bl	8001bb0 <off_pc13>
	control.blink = 0;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <set_off_blink+0x14>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	70da      	strb	r2, [r3, #3]
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <set_cdc_feedback>:

void set_cdc_feedback() {
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	control.feedback = FEEDBACK_CDC;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <set_cdc_feedback+0x14>)
 8001cba:	2210      	movs	r2, #16
 8001cbc:	715a      	strb	r2, [r3, #5]
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	20000000 	.word	0x20000000

08001ccc <set_off_feedback>:

void set_off_feedback() {
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	control.feedback = FEEDBACK_DISABLED;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <set_off_feedback+0x14>)
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	715a      	strb	r2, [r3, #5]
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <feedback>:

uint8_t feedback() {
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	return control.feedback;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <feedback+0x14>)
 8001cea:	795b      	ldrb	r3, [r3, #5]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000

08001cfc <set_on_adc>:

void set_on_adc() {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	control.adc = 1;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <set_on_adc+0x14>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	711a      	strb	r2, [r3, #4]
	set_adc_timer();
 8001d06:	f7ff ff6b 	bl	8001be0 <set_adc_timer>
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <set_off_adc>:

void set_off_adc() {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	control.adc = 0;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <set_off_adc+0x14>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	711a      	strb	r2, [r3, #4]
	set_adc_timer();
 8001d1e:	f7ff ff5f 	bl	8001be0 <set_adc_timer>
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000

08001d2c <get_sense_12V_normalized>:

float get_sense_12V_normalized() {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	control.sense_12V_normalized = HAL_ADC_GetValue (& hadc2);
 8001d30:	480e      	ldr	r0, [pc, #56]	; (8001d6c <get_sense_12V_normalized+0x40>)
 8001d32:	f000 fc5b 	bl	80025ec <HAL_ADC_GetValue>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <get_sense_12V_normalized+0x44>)
 8001d3c:	811a      	strh	r2, [r3, #8]
	return (((float)control.sense_12V_normalized)*control.sense_12V_base)/4096;
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <get_sense_12V_normalized+0x44>)
 8001d40:	891b      	ldrh	r3, [r3, #8]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <get_sense_12V_normalized+0x44>)
 8001d4c:	799b      	ldrb	r3, [r3, #6]
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001d74 <get_sense_12V_normalized+0x48>
 8001d5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d62:	eef0 7a66 	vmov.f32	s15, s13
}
 8001d66:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000e98 	.word	0x20000e98
 8001d70:	20000000 	.word	0x20000000
 8001d74:	45800000 	.word	0x45800000

08001d78 <init_hw>:

void init_hw()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	set_adc_timer();
 8001d7c:	f7ff ff30 	bl	8001be0 <set_adc_timer>
	init_flash();
 8001d80:	f7fe ff12 	bl	8000ba8 <init_flash>
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <read_config>:

void read_config(tcontrol *p)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	tcontrol config = DEFAULT_CONFIG;
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <read_config+0x40>)
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	read(p, LAST_PAGE_ADDRESS);
 8001d9c:	490b      	ldr	r1, [pc, #44]	; (8001dcc <read_config+0x44>)
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe ff16 	bl	8000bd0 <read>
	if (!validate_config(p)){
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f813 	bl	8001dd0 <validate_config>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d106      	bne.n	8001dbe <read_config+0x36>
		memcpy(p, &config, sizeof(tcontrol));
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	220c      	movs	r2, #12
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f009 f87d 	bl	800aeb8 <memcpy>
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	0800df54 	.word	0x0800df54
 8001dcc:	0801fc00 	.word	0x0801fc00

08001dd0 <validate_config>:

uint8_t validate_config(tcontrol *p)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	return ((p->config_begin == CONFIG_BEGIN)&&(p->config_end == CONFIG_END));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b55      	cmp	r3, #85	; 0x55
 8001dde:	d105      	bne.n	8001dec <validate_config+0x1c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7a9b      	ldrb	r3, [r3, #10]
 8001de4:	2baa      	cmp	r3, #170	; 0xaa
 8001de6:	d101      	bne.n	8001dec <validate_config+0x1c>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <validate_config+0x1e>
 8001dec:	2300      	movs	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <write_config>:

void write_config()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	erase(LAST_PAGE_ADDRESS);
 8001e00:	4804      	ldr	r0, [pc, #16]	; (8001e14 <write_config+0x18>)
 8001e02:	f7fe fef9 	bl	8000bf8 <erase>
	write(&control, LAST_PAGE_ADDRESS);
 8001e06:	4903      	ldr	r1, [pc, #12]	; (8001e14 <write_config+0x18>)
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <write_config+0x1c>)
 8001e0a:	f7fe ff31 	bl	8000c70 <write>
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	0801fc00 	.word	0x0801fc00
 8001e18:	20000000 	.word	0x20000000

08001e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <LoopForever+0xe>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e38:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <LoopForever+0x16>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e46:	f7ff fba3 	bl	8001590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f009 f811 	bl	800ae70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4e:	f7fe ff78 	bl	8000d42 <main>

08001e52 <LoopForever>:

LoopForever:
    b LoopForever
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e54:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	20000c48 	.word	0x20000c48
  ldr r2, =_sidata
 8001e60:	0800e42c 	.word	0x0800e42c
  ldr r2, =_sbss
 8001e64:	20000c48 	.word	0x20000c48
  ldr r4, =_ebss
 8001e68:	20001f18 	.word	0x20001f18

08001e6c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC3_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_Init+0x28>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_Init+0x28>)
 8001e7a:	f043 0310 	orr.w	r3, r3, #16
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f001 fbd9 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f808 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7ff fa0e 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 fbf1 	bl	80036a2 <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f001 fbb9 	bl	800364e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000010 	.word	0x20000010
 8001ef4:	20000904 	.word	0x20000904
 8001ef8:	20000900 	.word	0x20000900

08001efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000904 	.word	0x20000904
 8001f20:	20000f64 	.word	0x20000f64

08001f24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000f64 	.word	0x20000f64

08001f3c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000904 	.word	0x20000904

08001f84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b09a      	sub	sp, #104	; 0x68
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e1c9      	b.n	8002360 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d176      	bne.n	80020cc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d152      	bne.n	800208c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff f977 	bl	80012f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d13b      	bne.n	800208c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f001 f9df 	bl	80033d8 <ADC_Disable>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d12f      	bne.n	800208c <HAL_ADC_Init+0xe0>
 800202c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002030:	2b00      	cmp	r3, #0
 8002032:	d12b      	bne.n	800208c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800203c:	f023 0302 	bic.w	r3, r3, #2
 8002040:	f043 0202 	orr.w	r2, r3, #2
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002056:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002066:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002068:	4b86      	ldr	r3, [pc, #536]	; (8002284 <HAL_ADC_Init+0x2d8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a86      	ldr	r2, [pc, #536]	; (8002288 <HAL_ADC_Init+0x2dc>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0c9a      	lsrs	r2, r3, #18
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800207e:	e002      	b.n	8002086 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	3b01      	subs	r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f9      	bne.n	8002080 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020a8:	d110      	bne.n	80020cc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f023 0312 	bic.w	r3, r3, #18
 80020b2:	f043 0210 	orr.w	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f043 0201 	orr.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 8136 	bne.w	8002346 <HAL_ADC_Init+0x39a>
 80020da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 8131 	bne.w	8002346 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8129 	bne.w	8002346 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020fc:	f043 0202 	orr.w	r2, r3, #2
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800210c:	d004      	beq.n	8002118 <HAL_ADC_Init+0x16c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a5e      	ldr	r2, [pc, #376]	; (800228c <HAL_ADC_Init+0x2e0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_ADC_Init+0x170>
 8002118:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <HAL_ADC_Init+0x2e4>)
 800211a:	e000      	b.n	800211e <HAL_ADC_Init+0x172>
 800211c:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_ADC_Init+0x2e8>)
 800211e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002128:	d102      	bne.n	8002130 <HAL_ADC_Init+0x184>
 800212a:	4b58      	ldr	r3, [pc, #352]	; (800228c <HAL_ADC_Init+0x2e0>)
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e01a      	b.n	8002166 <HAL_ADC_Init+0x1ba>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a55      	ldr	r2, [pc, #340]	; (800228c <HAL_ADC_Init+0x2e0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d103      	bne.n	8002142 <HAL_ADC_Init+0x196>
 800213a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e011      	b.n	8002166 <HAL_ADC_Init+0x1ba>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a54      	ldr	r2, [pc, #336]	; (8002298 <HAL_ADC_Init+0x2ec>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d102      	bne.n	8002152 <HAL_ADC_Init+0x1a6>
 800214c:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_ADC_Init+0x2f0>)
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e009      	b.n	8002166 <HAL_ADC_Init+0x1ba>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a51      	ldr	r2, [pc, #324]	; (800229c <HAL_ADC_Init+0x2f0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d102      	bne.n	8002162 <HAL_ADC_Init+0x1b6>
 800215c:	4b4e      	ldr	r3, [pc, #312]	; (8002298 <HAL_ADC_Init+0x2ec>)
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e001      	b.n	8002166 <HAL_ADC_Init+0x1ba>
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d108      	bne.n	8002186 <HAL_ADC_Init+0x1da>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_ADC_Init+0x1da>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_ADC_Init+0x1dc>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11c      	bne.n	80021c6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800218c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d010      	beq.n	80021b4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_ADC_Init+0x202>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_Init+0x202>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_ADC_Init+0x204>
 80021ae:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80021b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7e5b      	ldrb	r3, [r3, #25]
 80021ca:	035b      	lsls	r3, r3, #13
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021d0:	2a01      	cmp	r2, #1
 80021d2:	d002      	beq.n	80021da <HAL_ADC_Init+0x22e>
 80021d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d8:	e000      	b.n	80021dc <HAL_ADC_Init+0x230>
 80021da:	2200      	movs	r2, #0
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021ec:	4313      	orrs	r3, r2
 80021ee:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d11b      	bne.n	8002232 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7e5b      	ldrb	r3, [r3, #25]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	3b01      	subs	r3, #1
 8002208:	045a      	lsls	r2, r3, #17
 800220a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800220c:	4313      	orrs	r3, r2
 800220e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002212:	663b      	str	r3, [r7, #96]	; 0x60
 8002214:	e00d      	b.n	8002232 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800221e:	f043 0220 	orr.w	r2, r3, #32
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	2b01      	cmp	r3, #1
 8002238:	d03a      	beq.n	80022b0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a16      	ldr	r2, [pc, #88]	; (8002298 <HAL_ADC_Init+0x2ec>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_ADC_Init+0x2a2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_ADC_Init+0x2f0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d128      	bne.n	80022a0 <HAL_ADC_Init+0x2f4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002256:	d012      	beq.n	800227e <HAL_ADC_Init+0x2d2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002260:	d00a      	beq.n	8002278 <HAL_ADC_Init+0x2cc>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800226a:	d002      	beq.n	8002272 <HAL_ADC_Init+0x2c6>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	e018      	b.n	80022a4 <HAL_ADC_Init+0x2f8>
 8002272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002276:	e015      	b.n	80022a4 <HAL_ADC_Init+0x2f8>
 8002278:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800227c:	e012      	b.n	80022a4 <HAL_ADC_Init+0x2f8>
 800227e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002282:	e00f      	b.n	80022a4 <HAL_ADC_Init+0x2f8>
 8002284:	20000010 	.word	0x20000010
 8002288:	431bde83 	.word	0x431bde83
 800228c:	50000100 	.word	0x50000100
 8002290:	50000300 	.word	0x50000300
 8002294:	50000700 	.word	0x50000700
 8002298:	50000400 	.word	0x50000400
 800229c:	50000500 	.word	0x50000500
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022a8:	4313      	orrs	r3, r2
 80022aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022ac:	4313      	orrs	r3, r2
 80022ae:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d114      	bne.n	80022e8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022cc:	f023 0302 	bic.w	r3, r3, #2
 80022d0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7e1b      	ldrb	r3, [r3, #24]
 80022d6:	039a      	lsls	r2, r3, #14
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4313      	orrs	r3, r2
 80022e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022e4:	4313      	orrs	r3, r2
 80022e6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_ADC_Init+0x3bc>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022f8:	430b      	orrs	r3, r1
 80022fa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10c      	bne.n	800231e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f023 010f 	bic.w	r1, r3, #15
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
 800231c:	e007      	b.n	800232e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 020f 	bic.w	r2, r2, #15
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f023 0303 	bic.w	r3, r3, #3
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
 8002344:	e00a      	b.n	800235c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f023 0312 	bic.w	r3, r3, #18
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002356:	2301      	movs	r3, #1
 8002358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800235c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002360:	4618      	mov	r0, r3
 8002362:	3768      	adds	r7, #104	; 0x68
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	fff0c007 	.word	0xfff0c007

0800236c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8123 	bne.w	80025ce <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADC_Start_IT+0x2a>
 8002392:	2302      	movs	r3, #2
 8002394:	e11e      	b.n	80025d4 <HAL_ADC_Start_IT+0x268>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 ffbc 	bl	800331c <ADC_Enable>
 80023a4:	4603      	mov	r3, r0
 80023a6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 810a 	bne.w	80025c4 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023cc:	d004      	beq.n	80023d8 <HAL_ADC_Start_IT+0x6c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a82      	ldr	r2, [pc, #520]	; (80025dc <HAL_ADC_Start_IT+0x270>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d106      	bne.n	80023e6 <HAL_ADC_Start_IT+0x7a>
 80023d8:	4b81      	ldr	r3, [pc, #516]	; (80025e0 <HAL_ADC_Start_IT+0x274>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d010      	beq.n	8002406 <HAL_ADC_Start_IT+0x9a>
 80023e4:	e005      	b.n	80023f2 <HAL_ADC_Start_IT+0x86>
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <HAL_ADC_Start_IT+0x278>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_ADC_Start_IT+0x9a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023fa:	d004      	beq.n	8002406 <HAL_ADC_Start_IT+0x9a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a79      	ldr	r2, [pc, #484]	; (80025e8 <HAL_ADC_Start_IT+0x27c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d115      	bne.n	8002432 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d036      	beq.n	800248e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002428:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002430:	e02d      	b.n	800248e <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002446:	d004      	beq.n	8002452 <HAL_ADC_Start_IT+0xe6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a63      	ldr	r2, [pc, #396]	; (80025dc <HAL_ADC_Start_IT+0x270>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10a      	bne.n	8002468 <HAL_ADC_Start_IT+0xfc>
 8002452:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e008      	b.n	800247a <HAL_ADC_Start_IT+0x10e>
 8002468:	4b5f      	ldr	r3, [pc, #380]	; (80025e8 <HAL_ADC_Start_IT+0x27c>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002486:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	d106      	bne.n	80024aa <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f023 0206 	bic.w	r2, r3, #6
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
 80024a8:	e002      	b.n	80024b0 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	221c      	movs	r2, #28
 80024be:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d110      	bne.n	80024ea <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0208 	orr.w	r2, r2, #8
 80024e6:	605a      	str	r2, [r3, #4]
          break;
 80024e8:	e008      	b.n	80024fc <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 020c 	orr.w	r2, r2, #12
 80024f8:	605a      	str	r2, [r3, #4]
          break;
 80024fa:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002500:	2b01      	cmp	r3, #1
 8002502:	d107      	bne.n	8002514 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0210 	bic.w	r2, r2, #16
 8002512:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800251c:	d004      	beq.n	8002528 <HAL_ADC_Start_IT+0x1bc>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a2e      	ldr	r2, [pc, #184]	; (80025dc <HAL_ADC_Start_IT+0x270>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d106      	bne.n	8002536 <HAL_ADC_Start_IT+0x1ca>
 8002528:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <HAL_ADC_Start_IT+0x274>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2b00      	cmp	r3, #0
 8002532:	d03e      	beq.n	80025b2 <HAL_ADC_Start_IT+0x246>
 8002534:	e005      	b.n	8002542 <HAL_ADC_Start_IT+0x1d6>
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_ADC_Start_IT+0x278>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2b00      	cmp	r3, #0
 8002540:	d037      	beq.n	80025b2 <HAL_ADC_Start_IT+0x246>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800254a:	d004      	beq.n	8002556 <HAL_ADC_Start_IT+0x1ea>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_ADC_Start_IT+0x270>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d106      	bne.n	8002564 <HAL_ADC_Start_IT+0x1f8>
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_ADC_Start_IT+0x274>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	2b05      	cmp	r3, #5
 8002560:	d027      	beq.n	80025b2 <HAL_ADC_Start_IT+0x246>
 8002562:	e005      	b.n	8002570 <HAL_ADC_Start_IT+0x204>
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_ADC_Start_IT+0x278>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2b05      	cmp	r3, #5
 800256e:	d020      	beq.n	80025b2 <HAL_ADC_Start_IT+0x246>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002578:	d004      	beq.n	8002584 <HAL_ADC_Start_IT+0x218>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_ADC_Start_IT+0x270>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d106      	bne.n	8002592 <HAL_ADC_Start_IT+0x226>
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_ADC_Start_IT+0x274>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2b09      	cmp	r3, #9
 800258e:	d010      	beq.n	80025b2 <HAL_ADC_Start_IT+0x246>
 8002590:	e005      	b.n	800259e <HAL_ADC_Start_IT+0x232>
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_ADC_Start_IT+0x278>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2b09      	cmp	r3, #9
 800259c:	d009      	beq.n	80025b2 <HAL_ADC_Start_IT+0x246>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a6:	d004      	beq.n	80025b2 <HAL_ADC_Start_IT+0x246>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_ADC_Start_IT+0x27c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d10f      	bne.n	80025d2 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0204 	orr.w	r2, r2, #4
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	e006      	b.n	80025d2 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025cc:	e001      	b.n	80025d2 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	50000100 	.word	0x50000100
 80025e0:	50000300 	.word	0x50000300
 80025e4:	50000700 	.word	0x50000700
 80025e8:	50000400 	.word	0x50000400

080025ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b04      	cmp	r3, #4
 8002628:	d106      	bne.n	8002638 <HAL_ADC_IRQHandler+0x30>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b04      	cmp	r3, #4
 8002636:	d00f      	beq.n	8002658 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002642:	2b08      	cmp	r3, #8
 8002644:	f040 80c0 	bne.w	80027c8 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b08      	cmp	r3, #8
 8002654:	f040 80b8 	bne.w	80027c8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002678:	d004      	beq.n	8002684 <HAL_ADC_IRQHandler+0x7c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a95      	ldr	r2, [pc, #596]	; (80028d4 <HAL_ADC_IRQHandler+0x2cc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d106      	bne.n	8002692 <HAL_ADC_IRQHandler+0x8a>
 8002684:	4b94      	ldr	r3, [pc, #592]	; (80028d8 <HAL_ADC_IRQHandler+0x2d0>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03e      	beq.n	800270e <HAL_ADC_IRQHandler+0x106>
 8002690:	e005      	b.n	800269e <HAL_ADC_IRQHandler+0x96>
 8002692:	4b92      	ldr	r3, [pc, #584]	; (80028dc <HAL_ADC_IRQHandler+0x2d4>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2b00      	cmp	r3, #0
 800269c:	d037      	beq.n	800270e <HAL_ADC_IRQHandler+0x106>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a6:	d004      	beq.n	80026b2 <HAL_ADC_IRQHandler+0xaa>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a89      	ldr	r2, [pc, #548]	; (80028d4 <HAL_ADC_IRQHandler+0x2cc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d106      	bne.n	80026c0 <HAL_ADC_IRQHandler+0xb8>
 80026b2:	4b89      	ldr	r3, [pc, #548]	; (80028d8 <HAL_ADC_IRQHandler+0x2d0>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d027      	beq.n	800270e <HAL_ADC_IRQHandler+0x106>
 80026be:	e005      	b.n	80026cc <HAL_ADC_IRQHandler+0xc4>
 80026c0:	4b86      	ldr	r3, [pc, #536]	; (80028dc <HAL_ADC_IRQHandler+0x2d4>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d020      	beq.n	800270e <HAL_ADC_IRQHandler+0x106>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d4:	d004      	beq.n	80026e0 <HAL_ADC_IRQHandler+0xd8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7e      	ldr	r2, [pc, #504]	; (80028d4 <HAL_ADC_IRQHandler+0x2cc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d106      	bne.n	80026ee <HAL_ADC_IRQHandler+0xe6>
 80026e0:	4b7d      	ldr	r3, [pc, #500]	; (80028d8 <HAL_ADC_IRQHandler+0x2d0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	d010      	beq.n	800270e <HAL_ADC_IRQHandler+0x106>
 80026ec:	e005      	b.n	80026fa <HAL_ADC_IRQHandler+0xf2>
 80026ee:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <HAL_ADC_IRQHandler+0x2d4>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	d009      	beq.n	800270e <HAL_ADC_IRQHandler+0x106>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002702:	d004      	beq.n	800270e <HAL_ADC_IRQHandler+0x106>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a75      	ldr	r2, [pc, #468]	; (80028e0 <HAL_ADC_IRQHandler+0x2d8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d104      	bne.n	8002718 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	e00f      	b.n	8002738 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002720:	d004      	beq.n	800272c <HAL_ADC_IRQHandler+0x124>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a6b      	ldr	r2, [pc, #428]	; (80028d4 <HAL_ADC_IRQHandler+0x2cc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d102      	bne.n	8002732 <HAL_ADC_IRQHandler+0x12a>
 800272c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002730:	e000      	b.n	8002734 <HAL_ADC_IRQHandler+0x12c>
 8002732:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <HAL_ADC_IRQHandler+0x2d8>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002742:	2b00      	cmp	r3, #0
 8002744:	d139      	bne.n	80027ba <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800274c:	2b00      	cmp	r3, #0
 800274e:	d134      	bne.n	80027ba <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b08      	cmp	r3, #8
 800275c:	d12d      	bne.n	80027ba <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11a      	bne.n	80027a2 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 020c 	bic.w	r2, r2, #12
 800277a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d112      	bne.n	80027ba <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
 80027a0:	e00b      	b.n	80027ba <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff f9a6 	bl	8001b0c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	220c      	movs	r2, #12
 80027c6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d106      	bne.n	80027e4 <HAL_ADC_IRQHandler+0x1dc>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d00f      	beq.n	8002804 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80027ee:	2b40      	cmp	r3, #64	; 0x40
 80027f0:	f040 813c 	bne.w	8002a6c <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	f040 8134 	bne.w	8002a6c <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002818:	d004      	beq.n	8002824 <HAL_ADC_IRQHandler+0x21c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <HAL_ADC_IRQHandler+0x2cc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d106      	bne.n	8002832 <HAL_ADC_IRQHandler+0x22a>
 8002824:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_ADC_IRQHandler+0x2d0>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03e      	beq.n	80028ae <HAL_ADC_IRQHandler+0x2a6>
 8002830:	e005      	b.n	800283e <HAL_ADC_IRQHandler+0x236>
 8002832:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <HAL_ADC_IRQHandler+0x2d4>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	2b00      	cmp	r3, #0
 800283c:	d037      	beq.n	80028ae <HAL_ADC_IRQHandler+0x2a6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002846:	d004      	beq.n	8002852 <HAL_ADC_IRQHandler+0x24a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a21      	ldr	r2, [pc, #132]	; (80028d4 <HAL_ADC_IRQHandler+0x2cc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d106      	bne.n	8002860 <HAL_ADC_IRQHandler+0x258>
 8002852:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <HAL_ADC_IRQHandler+0x2d0>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2b05      	cmp	r3, #5
 800285c:	d027      	beq.n	80028ae <HAL_ADC_IRQHandler+0x2a6>
 800285e:	e005      	b.n	800286c <HAL_ADC_IRQHandler+0x264>
 8002860:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <HAL_ADC_IRQHandler+0x2d4>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2b05      	cmp	r3, #5
 800286a:	d020      	beq.n	80028ae <HAL_ADC_IRQHandler+0x2a6>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002874:	d004      	beq.n	8002880 <HAL_ADC_IRQHandler+0x278>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_ADC_IRQHandler+0x2cc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d106      	bne.n	800288e <HAL_ADC_IRQHandler+0x286>
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_ADC_IRQHandler+0x2d0>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2b09      	cmp	r3, #9
 800288a:	d010      	beq.n	80028ae <HAL_ADC_IRQHandler+0x2a6>
 800288c:	e005      	b.n	800289a <HAL_ADC_IRQHandler+0x292>
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <HAL_ADC_IRQHandler+0x2d4>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2b09      	cmp	r3, #9
 8002898:	d009      	beq.n	80028ae <HAL_ADC_IRQHandler+0x2a6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028a2:	d004      	beq.n	80028ae <HAL_ADC_IRQHandler+0x2a6>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_ADC_IRQHandler+0x2d8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d104      	bne.n	80028b8 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e018      	b.n	80028ea <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c0:	d004      	beq.n	80028cc <HAL_ADC_IRQHandler+0x2c4>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <HAL_ADC_IRQHandler+0x2cc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d10b      	bne.n	80028e4 <HAL_ADC_IRQHandler+0x2dc>
 80028cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028d0:	e009      	b.n	80028e6 <HAL_ADC_IRQHandler+0x2de>
 80028d2:	bf00      	nop
 80028d4:	50000100 	.word	0x50000100
 80028d8:	50000300 	.word	0x50000300
 80028dc:	50000700 	.word	0x50000700
 80028e0:	50000400 	.word	0x50000400
 80028e4:	4b9d      	ldr	r3, [pc, #628]	; (8002b5c <HAL_ADC_IRQHandler+0x554>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f040 80b2 	bne.w	8002a5e <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 80a5 	bne.w	8002a5e <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 809f 	bne.w	8002a5e <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	f040 8097 	bne.w	8002a5e <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002938:	d004      	beq.n	8002944 <HAL_ADC_IRQHandler+0x33c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a88      	ldr	r2, [pc, #544]	; (8002b60 <HAL_ADC_IRQHandler+0x558>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d106      	bne.n	8002952 <HAL_ADC_IRQHandler+0x34a>
 8002944:	4b87      	ldr	r3, [pc, #540]	; (8002b64 <HAL_ADC_IRQHandler+0x55c>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2b00      	cmp	r3, #0
 800294e:	d03e      	beq.n	80029ce <HAL_ADC_IRQHandler+0x3c6>
 8002950:	e005      	b.n	800295e <HAL_ADC_IRQHandler+0x356>
 8002952:	4b85      	ldr	r3, [pc, #532]	; (8002b68 <HAL_ADC_IRQHandler+0x560>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2b00      	cmp	r3, #0
 800295c:	d037      	beq.n	80029ce <HAL_ADC_IRQHandler+0x3c6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002966:	d004      	beq.n	8002972 <HAL_ADC_IRQHandler+0x36a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a7c      	ldr	r2, [pc, #496]	; (8002b60 <HAL_ADC_IRQHandler+0x558>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d106      	bne.n	8002980 <HAL_ADC_IRQHandler+0x378>
 8002972:	4b7c      	ldr	r3, [pc, #496]	; (8002b64 <HAL_ADC_IRQHandler+0x55c>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2b06      	cmp	r3, #6
 800297c:	d027      	beq.n	80029ce <HAL_ADC_IRQHandler+0x3c6>
 800297e:	e005      	b.n	800298c <HAL_ADC_IRQHandler+0x384>
 8002980:	4b79      	ldr	r3, [pc, #484]	; (8002b68 <HAL_ADC_IRQHandler+0x560>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2b06      	cmp	r3, #6
 800298a:	d020      	beq.n	80029ce <HAL_ADC_IRQHandler+0x3c6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002994:	d004      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x398>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a71      	ldr	r2, [pc, #452]	; (8002b60 <HAL_ADC_IRQHandler+0x558>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d106      	bne.n	80029ae <HAL_ADC_IRQHandler+0x3a6>
 80029a0:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_ADC_IRQHandler+0x55c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2b07      	cmp	r3, #7
 80029aa:	d010      	beq.n	80029ce <HAL_ADC_IRQHandler+0x3c6>
 80029ac:	e005      	b.n	80029ba <HAL_ADC_IRQHandler+0x3b2>
 80029ae:	4b6e      	ldr	r3, [pc, #440]	; (8002b68 <HAL_ADC_IRQHandler+0x560>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	d009      	beq.n	80029ce <HAL_ADC_IRQHandler+0x3c6>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c2:	d004      	beq.n	80029ce <HAL_ADC_IRQHandler+0x3c6>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a64      	ldr	r2, [pc, #400]	; (8002b5c <HAL_ADC_IRQHandler+0x554>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d104      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e00f      	b.n	80029f8 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e0:	d004      	beq.n	80029ec <HAL_ADC_IRQHandler+0x3e4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5e      	ldr	r2, [pc, #376]	; (8002b60 <HAL_ADC_IRQHandler+0x558>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d102      	bne.n	80029f2 <HAL_ADC_IRQHandler+0x3ea>
 80029ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029f0:	e000      	b.n	80029f4 <HAL_ADC_IRQHandler+0x3ec>
 80029f2:	4b5a      	ldr	r3, [pc, #360]	; (8002b5c <HAL_ADC_IRQHandler+0x554>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d12d      	bne.n	8002a5e <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d11a      	bne.n	8002a46 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a1e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d112      	bne.n	8002a5e <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
 8002a44:	e00b      	b.n	8002a5e <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f948 	bl	8002cf4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2260      	movs	r2, #96	; 0x60
 8002a6a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	2b80      	cmp	r3, #128	; 0x80
 8002a78:	d113      	bne.n	8002aa2 <HAL_ADC_IRQHandler+0x49a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a84:	2b80      	cmp	r3, #128	; 0x80
 8002a86:	d10c      	bne.n	8002aa2 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fa75 	bl	8001f84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab0:	d115      	bne.n	8002ade <HAL_ADC_IRQHandler+0x4d6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac0:	d10d      	bne.n	8002ade <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f924 	bl	8002d1c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002adc:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aec:	d115      	bne.n	8002b1a <HAL_ADC_IRQHandler+0x512>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002afc:	d10d      	bne.n	8002b1a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f910 	bl	8002d30 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b18:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d151      	bne.n	8002bcc <HAL_ADC_IRQHandler+0x5c4>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d14a      	bne.n	8002bcc <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e02d      	b.n	8002ba0 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b4c:	d004      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x550>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a03      	ldr	r2, [pc, #12]	; (8002b60 <HAL_ADC_IRQHandler+0x558>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d109      	bne.n	8002b6c <HAL_ADC_IRQHandler+0x564>
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_ADC_IRQHandler+0x55c>)
 8002b5a:	e008      	b.n	8002b6e <HAL_ADC_IRQHandler+0x566>
 8002b5c:	50000400 	.word	0x50000400
 8002b60:	50000100 	.word	0x50000100
 8002b64:	50000300 	.word	0x50000300
 8002b68:	50000700 	.word	0x50000700
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_ADC_IRQHandler+0x614>)
 8002b6e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d10a      	bne.n	8002ba0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	e007      	b.n	8002ba0 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f043 0202 	orr.w	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff f9ea 	bl	8001f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d11b      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x60c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bea:	d113      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	f043 0208 	orr.w	r2, r3, #8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f87a 	bl	8002d08 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	50000700 	.word	0x50000700

08002c20 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_ADCEx_Calibration_Start+0x1c>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e057      	b.n	8002cec <HAL_ADCEx_Calibration_Start+0xcc>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fbc7 	bl	80033d8 <ADC_Disable>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d146      	bne.n	8002ce2 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002c68:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c7e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c8e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002c90:	f7ff f948 	bl	8001f24 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002c96:	e014      	b.n	8002cc2 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c98:	f7ff f944 	bl	8001f24 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b0a      	cmp	r3, #10
 8002ca4:	d90d      	bls.n	8002cc2 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f023 0312 	bic.w	r3, r3, #18
 8002cae:	f043 0210 	orr.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e014      	b.n	8002cec <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd0:	d0e2      	beq.n	8002c98 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b09b      	sub	sp, #108	; 0x6c
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x22>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e2cb      	b.n	80032fe <HAL_ADC_ConfigChannel+0x5ba>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 82af 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d81c      	bhi.n	8002dc0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	461a      	mov	r2, r3
 8002d9a:	231f      	movs	r3, #31
 8002d9c:	4093      	lsls	r3, r2
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	4019      	ands	r1, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa00 f203 	lsl.w	r2, r0, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002dbe:	e063      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b09      	cmp	r3, #9
 8002dc6:	d81e      	bhi.n	8002e06 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	3b1e      	subs	r3, #30
 8002ddc:	221f      	movs	r2, #31
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	4019      	ands	r1, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	3b1e      	subs	r3, #30
 8002df8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	635a      	str	r2, [r3, #52]	; 0x34
 8002e04:	e040      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b0e      	cmp	r3, #14
 8002e0c:	d81e      	bhi.n	8002e4c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	3b3c      	subs	r3, #60	; 0x3c
 8002e22:	221f      	movs	r2, #31
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	4019      	ands	r1, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	3b3c      	subs	r3, #60	; 0x3c
 8002e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
 8002e4a:	e01d      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	3b5a      	subs	r3, #90	; 0x5a
 8002e60:	221f      	movs	r2, #31
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	4019      	ands	r1, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	3b5a      	subs	r3, #90	; 0x5a
 8002e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 80e5 	bne.w	8003062 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	d91c      	bls.n	8002eda <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6999      	ldr	r1, [r3, #24]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b1e      	subs	r3, #30
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4019      	ands	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6898      	ldr	r0, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b1e      	subs	r3, #30
 8002ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	619a      	str	r2, [r3, #24]
 8002ed8:	e019      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6959      	ldr	r1, [r3, #20]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	2207      	movs	r2, #7
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	4019      	ands	r1, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6898      	ldr	r0, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	fa00 f203 	lsl.w	r2, r0, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d84f      	bhi.n	8002fd0 <HAL_ADC_ConfigChannel+0x28c>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_ADC_ConfigChannel+0x1f4>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08002f6b 	.word	0x08002f6b
 8002f40:	08002f8d 	.word	0x08002f8d
 8002f44:	08002faf 	.word	0x08002faf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f4e:	4b9f      	ldr	r3, [pc, #636]	; (80031cc <HAL_ADC_ConfigChannel+0x488>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	0691      	lsls	r1, r2, #26
 8002f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f66:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f68:	e07e      	b.n	8003068 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f70:	4b96      	ldr	r3, [pc, #600]	; (80031cc <HAL_ADC_ConfigChannel+0x488>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	0691      	lsls	r1, r2, #26
 8002f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f88:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f8a:	e06d      	b.n	8003068 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f92:	4b8e      	ldr	r3, [pc, #568]	; (80031cc <HAL_ADC_ConfigChannel+0x488>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	0691      	lsls	r1, r2, #26
 8002f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002faa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002fac:	e05c      	b.n	8003068 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fb4:	4b85      	ldr	r3, [pc, #532]	; (80031cc <HAL_ADC_ConfigChannel+0x488>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	0691      	lsls	r1, r2, #26
 8002fbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fcc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002fce:	e04b      	b.n	8003068 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	069b      	lsls	r3, r3, #26
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ff2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	069b      	lsls	r3, r3, #26
 8003004:	429a      	cmp	r2, r3
 8003006:	d107      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003016:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800301e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	069b      	lsls	r3, r3, #26
 8003028:	429a      	cmp	r2, r3
 800302a:	d107      	bne.n	800303c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800303a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	069b      	lsls	r3, r3, #26
 800304c:	429a      	cmp	r2, r3
 800304e:	d10a      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800305e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003060:	e001      	b.n	8003066 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003062:	bf00      	nop
 8003064:	e000      	b.n	8003068 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003066:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d108      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x344>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x344>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_ADC_ConfigChannel+0x346>
 8003088:	2300      	movs	r3, #0
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 8131 	bne.w	80032f2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d00f      	beq.n	80030b8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2201      	movs	r2, #1
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	400a      	ands	r2, r1
 80030b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80030b6:	e049      	b.n	800314c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2201      	movs	r2, #1
 80030c6:	409a      	lsls	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b09      	cmp	r3, #9
 80030d8:	d91c      	bls.n	8003114 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6999      	ldr	r1, [r3, #24]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	3b1b      	subs	r3, #27
 80030ec:	2207      	movs	r2, #7
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	4019      	ands	r1, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6898      	ldr	r0, [r3, #8]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	3b1b      	subs	r3, #27
 8003106:	fa00 f203 	lsl.w	r2, r0, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	619a      	str	r2, [r3, #24]
 8003112:	e01b      	b.n	800314c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6959      	ldr	r1, [r3, #20]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	2207      	movs	r2, #7
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	4019      	ands	r1, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6898      	ldr	r0, [r3, #8]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	fa00 f203 	lsl.w	r2, r0, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003154:	d004      	beq.n	8003160 <HAL_ADC_ConfigChannel+0x41c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <HAL_ADC_ConfigChannel+0x48c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x420>
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <HAL_ADC_ConfigChannel+0x490>)
 8003162:	e000      	b.n	8003166 <HAL_ADC_ConfigChannel+0x422>
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_ADC_ConfigChannel+0x494>)
 8003166:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b10      	cmp	r3, #16
 800316e:	d105      	bne.n	800317c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003180:	2b11      	cmp	r3, #17
 8003182:	d105      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003194:	2b12      	cmp	r3, #18
 8003196:	f040 80ac 	bne.w	80032f2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800319a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 80a5 	bne.w	80032f2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b0:	d102      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x474>
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_ADC_ConfigChannel+0x48c>)
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e023      	b.n	8003200 <HAL_ADC_ConfigChannel+0x4bc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <HAL_ADC_ConfigChannel+0x48c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10c      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x498>
 80031c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e01a      	b.n	8003200 <HAL_ADC_ConfigChannel+0x4bc>
 80031ca:	bf00      	nop
 80031cc:	83fff000 	.word	0x83fff000
 80031d0:	50000100 	.word	0x50000100
 80031d4:	50000300 	.word	0x50000300
 80031d8:	50000700 	.word	0x50000700
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4a      	ldr	r2, [pc, #296]	; (800330c <HAL_ADC_ConfigChannel+0x5c8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d102      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x4a8>
 80031e6:	4b4a      	ldr	r3, [pc, #296]	; (8003310 <HAL_ADC_ConfigChannel+0x5cc>)
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	e009      	b.n	8003200 <HAL_ADC_ConfigChannel+0x4bc>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a47      	ldr	r2, [pc, #284]	; (8003310 <HAL_ADC_ConfigChannel+0x5cc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d102      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x4b8>
 80031f6:	4b45      	ldr	r3, [pc, #276]	; (800330c <HAL_ADC_ConfigChannel+0x5c8>)
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e001      	b.n	8003200 <HAL_ADC_ConfigChannel+0x4bc>
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d108      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x4dc>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x4dc>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_ADC_ConfigChannel+0x4de>
 8003220:	2300      	movs	r3, #0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d150      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003226:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003228:	2b00      	cmp	r3, #0
 800322a:	d010      	beq.n	800324e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d107      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x504>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x504>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_ADC_ConfigChannel+0x506>
 8003248:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	d13c      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b10      	cmp	r3, #16
 8003254:	d11d      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x54e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800325e:	d118      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800326a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <HAL_ADC_ConfigChannel+0x5d0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_ADC_ConfigChannel+0x5d4>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0c9a      	lsrs	r2, r3, #18
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003282:	e002      	b.n	800328a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	3b01      	subs	r3, #1
 8003288:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003290:	e02e      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b11      	cmp	r3, #17
 8003298:	d10b      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x56e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a2:	d106      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80032a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80032ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032b0:	e01e      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b12      	cmp	r3, #18
 80032b8:	d11a      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80032ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032c6:	e013      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80032da:	e00a      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80032ee:	e000      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032f0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80032fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80032fe:	4618      	mov	r0, r3
 8003300:	376c      	adds	r7, #108	; 0x6c
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	50000400 	.word	0x50000400
 8003310:	50000500 	.word	0x50000500
 8003314:	20000010 	.word	0x20000010
 8003318:	431bde83 	.word	0x431bde83

0800331c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d108      	bne.n	8003348 <ADC_Enable+0x2c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <ADC_Enable+0x2c>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <ADC_Enable+0x2e>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d13c      	bne.n	80033c8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <ADC_Enable+0xb8>)
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0210 	orr.w	r2, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e028      	b.n	80033ca <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003388:	f7fe fdcc 	bl	8001f24 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800338e:	e014      	b.n	80033ba <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003390:	f7fe fdc8 	bl	8001f24 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d90d      	bls.n	80033ba <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f043 0210 	orr.w	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e007      	b.n	80033ca <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d1e3      	bne.n	8003390 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	8000003f 	.word	0x8000003f

080033d8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d108      	bne.n	8003404 <ADC_Disable+0x2c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <ADC_Disable+0x2c>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <ADC_Disable+0x2e>
 8003404:	2300      	movs	r3, #0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d040      	beq.n	800348c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030d 	and.w	r3, r3, #13
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10f      	bne.n	8003438 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0202 	orr.w	r2, r2, #2
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2203      	movs	r2, #3
 800342e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003430:	f7fe fd78 	bl	8001f24 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003436:	e022      	b.n	800347e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0210 	orr.w	r2, r3, #16
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e01c      	b.n	800348e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003454:	f7fe fd66 	bl	8001f24 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d90d      	bls.n	800347e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e007      	b.n	800348e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d0e3      	beq.n	8003454 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <__NVIC_SetPriorityGrouping>:
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ca:	4a04      	ldr	r2, [pc, #16]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60d3      	str	r3, [r2, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_GetPriorityGrouping>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <__NVIC_GetPriorityGrouping+0x18>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 0307 	and.w	r3, r3, #7
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_EnableIRQ>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	2b00      	cmp	r3, #0
 800350c:	db0b      	blt.n	8003526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4907      	ldr	r1, [pc, #28]	; (8003534 <__NVIC_EnableIRQ+0x38>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2001      	movs	r0, #1
 800351e:	fa00 f202 	lsl.w	r2, r0, r2
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000e100 	.word	0xe000e100

08003538 <__NVIC_SetPriority>:
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	; (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	; (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <NVIC_EncodePriority>:
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf28      	it	cs
 80035aa:	2304      	movcs	r3, #4
 80035ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d902      	bls.n	80035bc <NVIC_EncodePriority+0x30>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3b03      	subs	r3, #3
 80035ba:	e000      	b.n	80035be <NVIC_EncodePriority+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43d9      	mvns	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	4313      	orrs	r3, r2
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <SysTick_Config>:
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d301      	bcc.n	800360a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003606:	2301      	movs	r3, #1
 8003608:	e00f      	b.n	800362a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <SysTick_Config+0x40>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003612:	210f      	movs	r1, #15
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	f7ff ff8e 	bl	8003538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <SysTick_Config+0x40>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <SysTick_Config+0x40>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000e010 	.word	0xe000e010

08003638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff29 	bl	8003498 <__NVIC_SetPriorityGrouping>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003660:	f7ff ff3e 	bl	80034e0 <__NVIC_GetPriorityGrouping>
 8003664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f7ff ff8e 	bl	800358c <NVIC_EncodePriority>
 8003670:	4602      	mov	r2, r0
 8003672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff5d 	bl	8003538 <__NVIC_SetPriority>
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff31 	bl	80034fc <__NVIC_EnableIRQ>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ffa2 	bl	80035f4 <SysTick_Config>
 80036b0:	4603      	mov	r3, r0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_FLASH_Program+0xd8>)
 80036d8:	7e1b      	ldrb	r3, [r3, #24]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_FLASH_Program+0x26>
 80036de:	2302      	movs	r3, #2
 80036e0:	e054      	b.n	800378c <HAL_FLASH_Program+0xd0>
 80036e2:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_FLASH_Program+0xd8>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036ec:	f000 f872 	bl	80037d4 <FLASH_WaitForLastOperation>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d144      	bne.n	8003784 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d102      	bne.n	8003706 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003700:	2301      	movs	r3, #1
 8003702:	757b      	strb	r3, [r7, #21]
 8003704:	e007      	b.n	8003716 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d102      	bne.n	8003712 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800370c:	2302      	movs	r3, #2
 800370e:	757b      	strb	r3, [r7, #21]
 8003710:	e001      	b.n	8003716 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003712:	2304      	movs	r3, #4
 8003714:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003716:	2300      	movs	r3, #0
 8003718:	75bb      	strb	r3, [r7, #22]
 800371a:	e02d      	b.n	8003778 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800371c:	7dbb      	ldrb	r3, [r7, #22]
 800371e:	005a      	lsls	r2, r3, #1
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	eb02 0c03 	add.w	ip, r2, r3
 8003726:	7dbb      	ldrb	r3, [r7, #22]
 8003728:	0119      	lsls	r1, r3, #4
 800372a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800372e:	f1c1 0620 	rsb	r6, r1, #32
 8003732:	f1a1 0020 	sub.w	r0, r1, #32
 8003736:	fa22 f401 	lsr.w	r4, r2, r1
 800373a:	fa03 f606 	lsl.w	r6, r3, r6
 800373e:	4334      	orrs	r4, r6
 8003740:	fa23 f000 	lsr.w	r0, r3, r0
 8003744:	4304      	orrs	r4, r0
 8003746:	fa23 f501 	lsr.w	r5, r3, r1
 800374a:	b2a3      	uxth	r3, r4
 800374c:	4619      	mov	r1, r3
 800374e:	4660      	mov	r0, ip
 8003750:	f000 f824 	bl	800379c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003754:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003758:	f000 f83c 	bl	80037d4 <FLASH_WaitForLastOperation>
 800375c:	4603      	mov	r3, r0
 800375e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_FLASH_Program+0xdc>)
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_FLASH_Program+0xdc>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003772:	7dbb      	ldrb	r3, [r7, #22]
 8003774:	3301      	adds	r3, #1
 8003776:	75bb      	strb	r3, [r7, #22]
 8003778:	7dba      	ldrb	r2, [r7, #22]
 800377a:	7d7b      	ldrb	r3, [r7, #21]
 800377c:	429a      	cmp	r2, r3
 800377e:	d3cd      	bcc.n	800371c <HAL_FLASH_Program+0x60>
 8003780:	e000      	b.n	8003784 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003782:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_FLASH_Program+0xd8>)
 8003786:	2200      	movs	r2, #0
 8003788:	761a      	strb	r2, [r3, #24]

  return status;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003794:	20000f68 	.word	0x20000f68
 8003798:	40022000 	.word	0x40022000

0800379c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <FLASH_Program_HalfWord+0x30>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <FLASH_Program_HalfWord+0x34>)
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <FLASH_Program_HalfWord+0x34>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	887a      	ldrh	r2, [r7, #2]
 80037be:	801a      	strh	r2, [r3, #0]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20000f68 	.word	0x20000f68
 80037d0:	40022000 	.word	0x40022000

080037d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7fe fba2 	bl	8001f24 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80037e2:	e010      	b.n	8003806 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d00c      	beq.n	8003806 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <FLASH_WaitForLastOperation+0x2e>
 80037f2:	f7fe fb97 	bl	8001f24 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d201      	bcs.n	8003806 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e01f      	b.n	8003846 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <FLASH_WaitForLastOperation+0x7c>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d0e8      	beq.n	80037e4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <FLASH_WaitForLastOperation+0x7c>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b20      	cmp	r3, #32
 800381c:	d102      	bne.n	8003824 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <FLASH_WaitForLastOperation+0x7c>)
 8003820:	2220      	movs	r2, #32
 8003822:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <FLASH_WaitForLastOperation+0x7c>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b10      	cmp	r3, #16
 800382e:	d005      	beq.n	800383c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <FLASH_WaitForLastOperation+0x7c>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003838:	2b04      	cmp	r3, #4
 800383a:	d103      	bne.n	8003844 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800383c:	f000 f80a 	bl	8003854 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40022000 	.word	0x40022000

08003854 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <FLASH_SetErrorCode+0x5c>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b10      	cmp	r3, #16
 8003868:	d109      	bne.n	800387e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <FLASH_SetErrorCode+0x60>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f043 0302 	orr.w	r3, r3, #2
 8003872:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <FLASH_SetErrorCode+0x60>)
 8003874:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f043 0310 	orr.w	r3, r3, #16
 800387c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <FLASH_SetErrorCode+0x5c>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d109      	bne.n	800389e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <FLASH_SetErrorCode+0x60>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <FLASH_SetErrorCode+0x60>)
 8003894:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800389e:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <FLASH_SetErrorCode+0x5c>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60d3      	str	r3, [r2, #12]
}  
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40022000 	.word	0x40022000
 80038b4:	20000f68 	.word	0x20000f68

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c6:	e154      	b.n	8003b72 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8146 	beq.w	8003b6c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d00b      	beq.n	8003900 <HAL_GPIO_Init+0x48>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d007      	beq.n	8003900 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038f4:	2b11      	cmp	r3, #17
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b12      	cmp	r3, #18
 80038fe:	d130      	bne.n	8003962 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003936:	2201      	movs	r2, #1
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 0201 	and.w	r2, r3, #1
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	2203      	movs	r2, #3
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0xea>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b12      	cmp	r3, #18
 80039a0:	d123      	bne.n	80039ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	6939      	ldr	r1, [r7, #16]
 80039e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0203 	and.w	r2, r3, #3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80a0 	beq.w	8003b6c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2c:	4b58      	ldr	r3, [pc, #352]	; (8003b90 <HAL_GPIO_Init+0x2d8>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	4a57      	ldr	r2, [pc, #348]	; (8003b90 <HAL_GPIO_Init+0x2d8>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6193      	str	r3, [r2, #24]
 8003a38:	4b55      	ldr	r3, [pc, #340]	; (8003b90 <HAL_GPIO_Init+0x2d8>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a44:	4a53      	ldr	r2, [pc, #332]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a6e:	d019      	beq.n	8003aa4 <HAL_GPIO_Init+0x1ec>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a49      	ldr	r2, [pc, #292]	; (8003b98 <HAL_GPIO_Init+0x2e0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_GPIO_Init+0x1e8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a48      	ldr	r2, [pc, #288]	; (8003b9c <HAL_GPIO_Init+0x2e4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00d      	beq.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a47      	ldr	r2, [pc, #284]	; (8003ba0 <HAL_GPIO_Init+0x2e8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d007      	beq.n	8003a98 <HAL_GPIO_Init+0x1e0>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a46      	ldr	r2, [pc, #280]	; (8003ba4 <HAL_GPIO_Init+0x2ec>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_GPIO_Init+0x1dc>
 8003a90:	2304      	movs	r3, #4
 8003a92:	e008      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a94:	2305      	movs	r3, #5
 8003a96:	e006      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e004      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e002      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_GPIO_Init+0x1ee>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	f002 0203 	and.w	r2, r2, #3
 8003aac:	0092      	lsls	r2, r2, #2
 8003aae:	4093      	lsls	r3, r2
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ab6:	4937      	ldr	r1, [pc, #220]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	3302      	adds	r3, #2
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ae8:	4a2f      	ldr	r2, [pc, #188]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003aee:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b12:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b42:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f47f aea3 	bne.w	80038c8 <HAL_GPIO_Init+0x10>
  }
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40010000 	.word	0x40010000
 8003b98:	48000400 	.word	0x48000400
 8003b9c:	48000800 	.word	0x48000800
 8003ba0:	48000c00 	.word	0x48000c00
 8003ba4:	48001000 	.word	0x48001000
 8003ba8:	40010400 	.word	0x40010400

08003bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bbc:	787b      	ldrb	r3, [r7, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bc8:	e002      	b.n	8003bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bde:	b08b      	sub	sp, #44	; 0x2c
 8003be0:	af06      	add	r7, sp, #24
 8003be2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0d0      	b.n	8003d90 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f006 fe58 	bl	800a8b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f003 f85a 	bl	8006cce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e04c      	b.n	8003cba <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	3301      	adds	r3, #1
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	440b      	add	r3, r1
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	b298      	uxth	r0, r3
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3336      	adds	r3, #54	; 0x36
 8003c5e:	4602      	mov	r2, r0
 8003c60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	3303      	adds	r3, #3
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	440b      	add	r3, r1
 8003c86:	3338      	adds	r3, #56	; 0x38
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	333c      	adds	r3, #60	; 0x3c
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	3340      	adds	r3, #64	; 0x40
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d3ad      	bcc.n	8003c20 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e044      	b.n	8003d54 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cf2:	7bfa      	ldrb	r2, [r7, #15]
 8003cf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	440b      	add	r3, r1
 8003d04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	440b      	add	r3, r1
 8003d1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	440b      	add	r3, r1
 8003d30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	3301      	adds	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d3b5      	bcc.n	8003cca <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	687e      	ldr	r6, [r7, #4]
 8003d66:	466d      	mov	r5, sp
 8003d68:	f106 0410 	add.w	r4, r6, #16
 8003d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	602b      	str	r3, [r5, #0]
 8003d74:	1d33      	adds	r3, r6, #4
 8003d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d78:	6838      	ldr	r0, [r7, #0]
 8003d7a:	f002 ffc3 	bl	8006d04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_PCD_Start+0x16>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e016      	b.n	8003ddc <HAL_PCD_Start+0x44>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 ff70 	bl	8006ca0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f007 f816 	bl	800adf4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f004 ff49 	bl	8008c64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f004 ff42 	bl	8008c7a <USB_ReadInterrupts>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e00:	d102      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 faf6 	bl	80043f4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 ff34 	bl	8008c7a <USB_ReadInterrupts>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1c:	d112      	bne.n	8003e44 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e30:	b292      	uxth	r2, r2
 8003e32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f006 fddf 	bl	800a9fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8c7 	bl	8003fd2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f004 ff16 	bl	8008c7a <USB_ReadInterrupts>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e58:	d10b      	bne.n	8003e72 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e6c:	b292      	uxth	r2, r2
 8003e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f004 feff 	bl	8008c7a <USB_ReadInterrupts>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e86:	d10b      	bne.n	8003ea0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e9a:	b292      	uxth	r2, r2
 8003e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f004 fee8 	bl	8008c7a <USB_ReadInterrupts>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d126      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0204 	bic.w	r2, r2, #4
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0208 	bic.w	r2, r2, #8
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f006 fdc0 	bl	800aa6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003efe:	b292      	uxth	r2, r2
 8003f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 feb6 	bl	8008c7a <USB_ReadInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f18:	d126      	bne.n	8003f68 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0208 	orr.w	r2, r2, #8
 8003f2c:	b292      	uxth	r2, r2
 8003f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f44:	b292      	uxth	r2, r2
 8003f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0204 	orr.w	r2, r2, #4
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f006 fd68 	bl	800aa38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f004 fe84 	bl	8008c7a <USB_ReadInterrupts>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7c:	d10e      	bne.n	8003f9c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f90:	b292      	uxth	r2, r2
 8003f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f006 fd21 	bl	800a9de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f004 fe6a 	bl	8008c7a <USB_ReadInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb0:	d10b      	bne.n	8003fca <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc4:	b292      	uxth	r2, r2
 8003fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_PCD_SetAddress+0x1a>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e013      	b.n	8004014 <HAL_PCD_SetAddress+0x42>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f004 fe19 	bl	8008c3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	4608      	mov	r0, r1
 8004026:	4611      	mov	r1, r2
 8004028:	461a      	mov	r2, r3
 800402a:	4603      	mov	r3, r0
 800402c:	70fb      	strb	r3, [r7, #3]
 800402e:	460b      	mov	r3, r1
 8004030:	803b      	strh	r3, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800403a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800403e:	2b00      	cmp	r3, #0
 8004040:	da0e      	bge.n	8004060 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	705a      	strb	r2, [r3, #1]
 800405e:	e00e      	b.n	800407e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	f003 0207 	and.w	r2, r3, #7
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	b2da      	uxtb	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800408a:	883a      	ldrh	r2, [r7, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	78ba      	ldrb	r2, [r7, #2]
 8004094:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040a8:	78bb      	ldrb	r3, [r7, #2]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d102      	bne.n	80040b4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_PCD_EP_Open+0xa6>
 80040be:	2302      	movs	r3, #2
 80040c0:	e00e      	b.n	80040e0 <HAL_PCD_EP_Open+0xc4>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f002 fe39 	bl	8006d48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80040de:	7afb      	ldrb	r3, [r7, #11]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da0e      	bge.n	800411a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	705a      	strb	r2, [r3, #1]
 8004118:	e00e      	b.n	8004138 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 0207 	and.w	r2, r3, #7
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_PCD_EP_Close+0x6a>
 800414e:	2302      	movs	r3, #2
 8004150:	e00e      	b.n	8004170 <HAL_PCD_EP_Close+0x88>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	f003 f95f 	bl	8007424 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	460b      	mov	r3, r1
 8004186:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	f003 0207 	and.w	r2, r3, #7
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041b8:	7afb      	ldrb	r3, [r7, #11]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041c4:	7afb      	ldrb	r3, [r7, #11]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6979      	ldr	r1, [r7, #20]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f003 fb12 	bl	80077fe <USB_EPStartXfer>
 80041da:	e005      	b.n	80041e8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6979      	ldr	r1, [r7, #20]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f003 fb0b 	bl	80077fe <USB_EPStartXfer>
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	460b      	mov	r3, r1
 80041fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 0207 	and.w	r2, r3, #7
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	440b      	add	r3, r1
 8004210:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004214:	681b      	ldr	r3, [r3, #0]
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	460b      	mov	r3, r1
 8004230:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004232:	7afb      	ldrb	r3, [r7, #11]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2201      	movs	r2, #1
 800426c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800426e:	7afb      	ldrb	r3, [r7, #11]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	b2da      	uxtb	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800427a:	7afb      	ldrb	r3, [r7, #11]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6979      	ldr	r1, [r7, #20]
 800428a:	4618      	mov	r0, r3
 800428c:	f003 fab7 	bl	80077fe <USB_EPStartXfer>
 8004290:	e005      	b.n	800429e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	4618      	mov	r0, r3
 800429a:	f003 fab0 	bl	80077fe <USB_EPStartXfer>
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 0207 	and.w	r2, r3, #7
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d901      	bls.n	80042c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e03e      	b.n	8004344 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	da0e      	bge.n	80042ec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	705a      	strb	r2, [r3, #1]
 80042ea:	e00c      	b.n	8004306 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	b2da      	uxtb	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_PCD_EP_SetStall+0x7e>
 8004322:	2302      	movs	r3, #2
 8004324:	e00e      	b.n	8004344 <HAL_PCD_EP_SetStall+0x9c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	4618      	mov	r0, r3
 8004336:	f004 fb82 	bl	8008a3e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	f003 020f 	and.w	r2, r3, #15
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d901      	bls.n	800436a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e040      	b.n	80043ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800436a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da0e      	bge.n	8004390 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	705a      	strb	r2, [r3, #1]
 800438e:	e00e      	b.n	80043ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	f003 0207 	and.w	r2, r3, #7
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	4413      	add	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_PCD_EP_ClrStall+0x82>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e00e      	b.n	80043ec <HAL_PCD_EP_ClrStall+0xa0>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	4618      	mov	r0, r3
 80043de:	f004 fb7f 	bl	8008ae0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08e      	sub	sp, #56	; 0x38
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80043fc:	e2df      	b.n	80049be <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004406:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004408:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004414:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 8158 	bne.w	80046ce <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800441e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d152      	bne.n	80044ce <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004438:	81fb      	strh	r3, [r7, #14]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	89fb      	ldrh	r3, [r7, #14]
 8004440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004448:	b29b      	uxth	r3, r3
 800444a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3328      	adds	r3, #40	; 0x28
 8004450:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	3302      	adds	r3, #2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6812      	ldr	r2, [r2, #0]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	441a      	add	r2, r3
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800448c:	2100      	movs	r1, #0
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f006 fa8b 	bl	800a9aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 828e 	beq.w	80049be <PCD_EP_ISR_Handler+0x5ca>
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f040 8289 	bne.w	80049be <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	b292      	uxth	r2, r2
 80044c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044cc:	e277      	b.n	80049be <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80044de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d034      	beq.n	8004552 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	3306      	adds	r3, #6
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004526:	b29b      	uxth	r3, r3
 8004528:	f004 fbfd 	bl	8008d26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29a      	uxth	r2, r3
 8004534:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004538:	4013      	ands	r3, r2
 800453a:	823b      	strh	r3, [r7, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	8a3a      	ldrh	r2, [r7, #16]
 8004542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004546:	b292      	uxth	r2, r2
 8004548:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f006 fa00 	bl	800a950 <HAL_PCD_SetupStageCallback>
 8004550:	e235      	b.n	80049be <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004552:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004556:	2b00      	cmp	r3, #0
 8004558:	f280 8231 	bge.w	80049be <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29a      	uxth	r2, r3
 8004564:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004568:	4013      	ands	r3, r2
 800456a:	83bb      	strh	r3, [r7, #28]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	8bba      	ldrh	r2, [r7, #28]
 8004572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004576:	b292      	uxth	r2, r2
 8004578:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004582:	b29b      	uxth	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	3306      	adds	r3, #6
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d019      	beq.n	80045e2 <PCD_EP_ISR_Handler+0x1ee>
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d015      	beq.n	80045e2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	6959      	ldr	r1, [r3, #20]
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f004 fbad 	bl	8008d26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	441a      	add	r2, r3
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80045da:	2100      	movs	r1, #0
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f006 f9c9 	bl	800a974 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	4413      	add	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d112      	bne.n	8004630 <PCD_EP_ISR_Handler+0x23c>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004614:	b29a      	uxth	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004628:	b29a      	uxth	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	e02f      	b.n	8004690 <PCD_EP_ISR_Handler+0x29c>
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b3e      	cmp	r3, #62	; 0x3e
 8004636:	d813      	bhi.n	8004660 <PCD_EP_ISR_Handler+0x26c>
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	633b      	str	r3, [r7, #48]	; 0x30
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <PCD_EP_ISR_Handler+0x25e>
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	3301      	adds	r3, #1
 8004650:	633b      	str	r3, [r7, #48]	; 0x30
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	b29b      	uxth	r3, r3
 8004656:	029b      	lsls	r3, r3, #10
 8004658:	b29a      	uxth	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	801a      	strh	r2, [r3, #0]
 800465e:	e017      	b.n	8004690 <PCD_EP_ISR_Handler+0x29c>
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	633b      	str	r3, [r7, #48]	; 0x30
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <PCD_EP_ISR_Handler+0x286>
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	3b01      	subs	r3, #1
 8004678:	633b      	str	r3, [r7, #48]	; 0x30
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	b29b      	uxth	r3, r3
 800467e:	029b      	lsls	r3, r3, #10
 8004680:	b29b      	uxth	r3, r3
 8004682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800468a:	b29a      	uxth	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a0:	827b      	strh	r3, [r7, #18]
 80046a2:	8a7b      	ldrh	r3, [r7, #18]
 80046a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046a8:	827b      	strh	r3, [r7, #18]
 80046aa:	8a7b      	ldrh	r3, [r7, #18]
 80046ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046b0:	827b      	strh	r3, [r7, #18]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	8a7b      	ldrh	r3, [r7, #18]
 80046b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]
 80046cc:	e177      	b.n	80049be <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f280 80ea 	bge.w	80048be <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004700:	4013      	ands	r3, r2
 8004702:	853b      	strh	r3, [r7, #40]	; 0x28
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004718:	b292      	uxth	r2, r2
 800471a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800471c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	7b1b      	ldrb	r3, [r3, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d122      	bne.n	8004780 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004742:	b29b      	uxth	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	3306      	adds	r3, #6
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004762:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004764:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8087 	beq.w	800487a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	6959      	ldr	r1, [r3, #20]
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	88da      	ldrh	r2, [r3, #6]
 8004778:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800477a:	f004 fad4 	bl	8008d26 <USB_ReadPMA>
 800477e:	e07c      	b.n	800487a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	78db      	ldrb	r3, [r3, #3]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d108      	bne.n	800479a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004788:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800478a:	461a      	mov	r2, r3
 800478c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f923 	bl	80049da <HAL_PCD_EP_DB_Receive>
 8004794:	4603      	mov	r3, r0
 8004796:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004798:	e06f      	b.n	800487a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b4:	847b      	strh	r3, [r7, #34]	; 0x22
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	441a      	add	r2, r3
 80047c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d021      	beq.n	8004838 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	3302      	adds	r3, #2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800481c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800481e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02a      	beq.n	800487a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	6959      	ldr	r1, [r3, #20]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	891a      	ldrh	r2, [r3, #8]
 8004830:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004832:	f004 fa78 	bl	8008d26 <USB_ReadPMA>
 8004836:	e020      	b.n	800487a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004840:	b29b      	uxth	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	3306      	adds	r3, #6
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004860:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	6959      	ldr	r1, [r3, #20]
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	895a      	ldrh	r2, [r3, #10]
 8004874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004876:	f004 fa56 	bl	8008d26 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004880:	441a      	add	r2, r3
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	695a      	ldr	r2, [r3, #20]
 800488a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800488c:	441a      	add	r2, r3
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d004      	beq.n	80048a4 <PCD_EP_ISR_Handler+0x4b0>
 800489a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d206      	bcs.n	80048b2 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f006 f862 	bl	800a974 <HAL_PCD_DataOutStageCallback>
 80048b0:	e005      	b.n	80048be <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048b8:	4618      	mov	r0, r3
 80048ba:	f002 ffa0 	bl	80077fe <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80048be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d07a      	beq.n	80049be <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80048c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4413      	add	r3, r2
 80048da:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	843b      	strh	r3, [r7, #32]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	8c3b      	ldrh	r3, [r7, #32]
 8004908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004910:	b29b      	uxth	r3, r3
 8004912:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	78db      	ldrb	r3, [r3, #3]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d108      	bne.n	800492e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004920:	2b02      	cmp	r3, #2
 8004922:	d146      	bne.n	80049b2 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004924:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d141      	bne.n	80049b2 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004936:	b29b      	uxth	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	3302      	adds	r3, #2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004956:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	699a      	ldr	r2, [r3, #24]
 800495c:	8bfb      	ldrh	r3, [r7, #30]
 800495e:	429a      	cmp	r2, r3
 8004960:	d906      	bls.n	8004970 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	8bfb      	ldrh	r3, [r7, #30]
 8004968:	1ad2      	subs	r2, r2, r3
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	619a      	str	r2, [r3, #24]
 800496e:	e002      	b.n	8004976 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	2200      	movs	r2, #0
 8004974:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f006 f810 	bl	800a9aa <HAL_PCD_DataInStageCallback>
 800498a:	e018      	b.n	80049be <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	8bfb      	ldrh	r3, [r7, #30]
 8004992:	441a      	add	r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	8bfb      	ldrh	r3, [r7, #30]
 800499e:	441a      	add	r2, r3
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 ff27 	bl	80077fe <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80049b0:	e005      	b.n	80049be <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80049b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049b4:	461a      	mov	r2, r3
 80049b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f91b 	bl	8004bf4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	b21b      	sxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f6ff ad17 	blt.w	80043fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3738      	adds	r7, #56	; 0x38
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b088      	sub	sp, #32
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	4613      	mov	r3, r2
 80049e6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d07e      	beq.n	8004af0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	3302      	adds	r3, #2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	8b7b      	ldrh	r3, [r7, #26]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d306      	bcc.n	8004a34 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	8b7b      	ldrh	r3, [r7, #26]
 8004a2c:	1ad2      	subs	r2, r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	619a      	str	r2, [r3, #24]
 8004a32:	e002      	b.n	8004a3a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d123      	bne.n	8004a8a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	833b      	strh	r3, [r7, #24]
 8004a5e:	8b3b      	ldrh	r3, [r7, #24]
 8004a60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a64:	833b      	strh	r3, [r7, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	8b3b      	ldrh	r3, [r7, #24]
 8004a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01f      	beq.n	8004ad4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	82fb      	strh	r3, [r7, #22]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	441a      	add	r2, r3
 8004abe:	8afb      	ldrh	r3, [r7, #22]
 8004ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004acc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ad4:	8b7b      	ldrh	r3, [r7, #26]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8087 	beq.w	8004bea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6959      	ldr	r1, [r3, #20]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	891a      	ldrh	r2, [r3, #8]
 8004ae8:	8b7b      	ldrh	r3, [r7, #26]
 8004aea:	f004 f91c 	bl	8008d26 <USB_ReadPMA>
 8004aee:	e07c      	b.n	8004bea <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	3306      	adds	r3, #6
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b18:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	8b7b      	ldrh	r3, [r7, #26]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d306      	bcc.n	8004b32 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	8b7b      	ldrh	r3, [r7, #26]
 8004b2a:	1ad2      	subs	r2, r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	619a      	str	r2, [r3, #24]
 8004b30:	e002      	b.n	8004b38 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2200      	movs	r2, #0
 8004b36:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d123      	bne.n	8004b88 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	83fb      	strh	r3, [r7, #30]
 8004b5c:	8bfb      	ldrh	r3, [r7, #30]
 8004b5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b62:	83fb      	strh	r3, [r7, #30]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	8bfb      	ldrh	r3, [r7, #30]
 8004b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11f      	bne.n	8004bd2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bac:	83bb      	strh	r3, [r7, #28]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	8bbb      	ldrh	r3, [r7, #28]
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004bd2:	8b7b      	ldrh	r3, [r7, #26]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6959      	ldr	r1, [r3, #20]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	895a      	ldrh	r2, [r3, #10]
 8004be4:	8b7b      	ldrh	r3, [r7, #26]
 8004be6:	f004 f89e 	bl	8008d26 <USB_ReadPMA>
    }
  }

  return count;
 8004bea:	8b7b      	ldrh	r3, [r7, #26]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b094      	sub	sp, #80	; 0x50
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8138 	beq.w	8004e7e <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	3302      	adds	r3, #2
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d907      	bls.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	619a      	str	r2, [r3, #24]
 8004c54:	e002      	b.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d12c      	bne.n	8004cbe <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f005 fe9d 	bl	800a9aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 823a 	beq.w	80050f0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	82fb      	strh	r3, [r7, #22]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	8afb      	ldrh	r3, [r7, #22]
 8004ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]
 8004cbc:	e218      	b.n	80050f0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01f      	beq.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	441a      	add	r2, r3
 8004cf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	f040 81ee 	bne.w	80050f0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d1c:	441a      	add	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d2a:	441a      	add	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6a1a      	ldr	r2, [r3, #32]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d309      	bcc.n	8004d50 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d48:	1ad2      	subs	r2, r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	621a      	str	r2, [r3, #32]
 8004d4e:	e015      	b.n	8004d7c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8004d58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d5c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d66:	e009      	b.n	8004d7c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d155      	bne.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x23c>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	011a      	lsls	r2, r3, #4
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d112      	bne.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	e047      	b.n	8004e68 <HAL_PCD_EP_DB_Transmit+0x274>
 8004dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dda:	2b3e      	cmp	r3, #62	; 0x3e
 8004ddc:	d811      	bhi.n	8004e02 <HAL_PCD_EP_DB_Transmit+0x20e>
 8004dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_PCD_EP_DB_Transmit+0x200>
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	3301      	adds	r3, #1
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	029b      	lsls	r3, r3, #10
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	e032      	b.n	8004e68 <HAL_PCD_EP_DB_Transmit+0x274>
 8004e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_PCD_EP_DB_Transmit+0x224>
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	3b01      	subs	r3, #1
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	029b      	lsls	r3, r3, #10
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e01b      	b.n	8004e68 <HAL_PCD_EP_DB_Transmit+0x274>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d117      	bne.n	8004e68 <HAL_PCD_EP_DB_Transmit+0x274>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	4413      	add	r3, r2
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	011a      	lsls	r2, r3, #4
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	4413      	add	r3, r2
 8004e5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e5e:	623b      	str	r3, [r7, #32]
 8004e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6959      	ldr	r1, [r3, #20]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	891a      	ldrh	r2, [r3, #8]
 8004e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f003 ff0f 	bl	8008c9a <USB_WritePMA>
 8004e7c:	e138      	b.n	80050f0 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	3306      	adds	r3, #6
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ea6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d307      	bcc.n	8004ec6 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ebe:	1ad2      	subs	r2, r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	619a      	str	r2, [r3, #24]
 8004ec4:	e002      	b.n	8004ecc <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d12e      	bne.n	8004f32 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f005 fd65 	bl	800a9aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f040 8102 	bne.w	80050f0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	8013      	strh	r3, [r2, #0]
 8004f30:	e0de      	b.n	80050f0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d11f      	bne.n	8004f7c <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	867b      	strh	r3, [r7, #50]	; 0x32
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	f040 80b4 	bne.w	80050f0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f90:	441a      	add	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	69da      	ldr	r2, [r3, #28]
 8004f9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f9e:	441a      	add	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d309      	bcc.n	8004fc4 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	621a      	str	r2, [r3, #32]
 8004fc2:	e015      	b.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d107      	bne.n	8004fdc <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8004fcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004fda:	e009      	b.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d155      	bne.n	80050aa <HAL_PCD_EP_DB_Transmit+0x4b6>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	63bb      	str	r3, [r7, #56]	; 0x38
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800500c:	b29b      	uxth	r3, r3
 800500e:	461a      	mov	r2, r3
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	4413      	add	r3, r2
 8005014:	63bb      	str	r3, [r7, #56]	; 0x38
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	011a      	lsls	r2, r3, #4
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	4413      	add	r3, r2
 8005020:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
 8005026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005028:	2b00      	cmp	r3, #0
 800502a:	d112      	bne.n	8005052 <HAL_PCD_EP_DB_Transmit+0x45e>
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005036:	b29a      	uxth	r2, r3
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504a:	b29a      	uxth	r2, r3
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	e044      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005054:	2b3e      	cmp	r3, #62	; 0x3e
 8005056:	d811      	bhi.n	800507c <HAL_PCD_EP_DB_Transmit+0x488>
 8005058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_PCD_EP_DB_Transmit+0x47a>
 8005068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506a:	3301      	adds	r3, #1
 800506c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005070:	b29b      	uxth	r3, r3
 8005072:	029b      	lsls	r3, r3, #10
 8005074:	b29a      	uxth	r2, r3
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	801a      	strh	r2, [r3, #0]
 800507a:	e02f      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x4e8>
 800507c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	2b00      	cmp	r3, #0
 800508a:	d102      	bne.n	8005092 <HAL_PCD_EP_DB_Transmit+0x49e>
 800508c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508e:	3b01      	subs	r3, #1
 8005090:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005094:	b29b      	uxth	r3, r3
 8005096:	029b      	lsls	r3, r3, #10
 8005098:	b29b      	uxth	r3, r3
 800509a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	801a      	strh	r2, [r3, #0]
 80050a8:	e018      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x4e8>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d114      	bne.n	80050dc <HAL_PCD_EP_DB_Transmit+0x4e8>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c0:	4413      	add	r3, r2
 80050c2:	643b      	str	r3, [r7, #64]	; 0x40
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	011a      	lsls	r2, r3, #4
 80050ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050cc:	4413      	add	r3, r2
 80050ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050da:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6959      	ldr	r1, [r3, #20]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	895a      	ldrh	r2, [r3, #10]
 80050e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f003 fdd5 	bl	8008c9a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510a:	82bb      	strh	r3, [r7, #20]
 800510c:	8abb      	ldrh	r3, [r7, #20]
 800510e:	f083 0310 	eor.w	r3, r3, #16
 8005112:	82bb      	strh	r3, [r7, #20]
 8005114:	8abb      	ldrh	r3, [r7, #20]
 8005116:	f083 0320 	eor.w	r3, r3, #32
 800511a:	82bb      	strh	r3, [r7, #20]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	441a      	add	r2, r3
 800512a:	8abb      	ldrh	r3, [r7, #20]
 800512c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513c:	b29b      	uxth	r3, r3
 800513e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3750      	adds	r7, #80	; 0x50
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800514a:	b480      	push	{r7}
 800514c:	b087      	sub	sp, #28
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	607b      	str	r3, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	817b      	strh	r3, [r7, #10]
 8005158:	4613      	mov	r3, r2
 800515a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800515c:	897b      	ldrh	r3, [r7, #10]
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00b      	beq.n	8005180 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005168:	897b      	ldrh	r3, [r7, #10]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e009      	b.n	8005194 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005180:	897a      	ldrh	r2, [r7, #10]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005194:	893b      	ldrh	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d107      	bne.n	80051aa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2200      	movs	r2, #0
 800519e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	80da      	strh	r2, [r3, #6]
 80051a8:	e00b      	b.n	80051c2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2201      	movs	r2, #1
 80051ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	b29a      	uxth	r2, r3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	1d3b      	adds	r3, r7, #4
 80051da:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051dc:	1d3b      	adds	r3, r7, #4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f000 bef4 	b.w	8005fd2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 816a 	beq.w	80054ce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80051fa:	4bb3      	ldr	r3, [pc, #716]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b04      	cmp	r3, #4
 8005204:	d00c      	beq.n	8005220 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005206:	4bb0      	ldr	r3, [pc, #704]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b08      	cmp	r3, #8
 8005210:	d159      	bne.n	80052c6 <HAL_RCC_OscConfig+0xf6>
 8005212:	4bad      	ldr	r3, [pc, #692]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521e:	d152      	bne.n	80052c6 <HAL_RCC_OscConfig+0xf6>
 8005220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005224:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800522c:	fa93 f3a3 	rbit	r3, r3
 8005230:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005234:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005238:	fab3 f383 	clz	r3, r3
 800523c:	b2db      	uxtb	r3, r3
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d102      	bne.n	8005252 <HAL_RCC_OscConfig+0x82>
 800524c:	4b9e      	ldr	r3, [pc, #632]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	e015      	b.n	800527e <HAL_RCC_OscConfig+0xae>
 8005252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005256:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800526a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800526e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005272:	fa93 f3a3 	rbit	r3, r3
 8005276:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800527a:	4b93      	ldr	r3, [pc, #588]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005282:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005286:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800528a:	fa92 f2a2 	rbit	r2, r2
 800528e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005292:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005296:	fab2 f282 	clz	r2, r2
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	f042 0220 	orr.w	r2, r2, #32
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	f002 021f 	and.w	r2, r2, #31
 80052a6:	2101      	movs	r1, #1
 80052a8:	fa01 f202 	lsl.w	r2, r1, r2
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 810c 	beq.w	80054cc <HAL_RCC_OscConfig+0x2fc>
 80052b4:	1d3b      	adds	r3, r7, #4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 8106 	bne.w	80054cc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f000 be86 	b.w	8005fd2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c6:	1d3b      	adds	r3, r7, #4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d0:	d106      	bne.n	80052e0 <HAL_RCC_OscConfig+0x110>
 80052d2:	4b7d      	ldr	r3, [pc, #500]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a7c      	ldr	r2, [pc, #496]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e030      	b.n	8005342 <HAL_RCC_OscConfig+0x172>
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x134>
 80052ea:	4b77      	ldr	r3, [pc, #476]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a76      	ldr	r2, [pc, #472]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 80052f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b74      	ldr	r3, [pc, #464]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a73      	ldr	r2, [pc, #460]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 80052fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e01e      	b.n	8005342 <HAL_RCC_OscConfig+0x172>
 8005304:	1d3b      	adds	r3, r7, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800530e:	d10c      	bne.n	800532a <HAL_RCC_OscConfig+0x15a>
 8005310:	4b6d      	ldr	r3, [pc, #436]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a6c      	ldr	r2, [pc, #432]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b6a      	ldr	r3, [pc, #424]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a69      	ldr	r2, [pc, #420]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e00b      	b.n	8005342 <HAL_RCC_OscConfig+0x172>
 800532a:	4b67      	ldr	r3, [pc, #412]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a66      	ldr	r2, [pc, #408]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	4b64      	ldr	r3, [pc, #400]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a63      	ldr	r2, [pc, #396]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 800533c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005340:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005342:	4b61      	ldr	r3, [pc, #388]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	f023 020f 	bic.w	r2, r3, #15
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	495d      	ldr	r1, [pc, #372]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005352:	4313      	orrs	r3, r2
 8005354:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d059      	beq.n	8005414 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fc fde0 	bl	8001f24 <HAL_GetTick>
 8005364:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800536a:	f7fc fddb 	bl	8001f24 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	; 0x64
 8005378:	d902      	bls.n	8005380 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	f000 be29 	b.w	8005fd2 <HAL_RCC_OscConfig+0xe02>
 8005380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005384:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005388:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800538c:	fa93 f3a3 	rbit	r3, r3
 8005390:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005394:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005398:	fab3 f383 	clz	r3, r3
 800539c:	b2db      	uxtb	r3, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d102      	bne.n	80053b2 <HAL_RCC_OscConfig+0x1e2>
 80053ac:	4b46      	ldr	r3, [pc, #280]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	e015      	b.n	80053de <HAL_RCC_OscConfig+0x20e>
 80053b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80053be:	fa93 f3a3 	rbit	r3, r3
 80053c2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80053c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80053ce:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80053da:	4b3b      	ldr	r3, [pc, #236]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053e2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80053e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80053ea:	fa92 f2a2 	rbit	r2, r2
 80053ee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80053f2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80053f6:	fab2 f282 	clz	r2, r2
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	f042 0220 	orr.w	r2, r2, #32
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	f002 021f 	and.w	r2, r2, #31
 8005406:	2101      	movs	r1, #1
 8005408:	fa01 f202 	lsl.w	r2, r1, r2
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0ab      	beq.n	800536a <HAL_RCC_OscConfig+0x19a>
 8005412:	e05c      	b.n	80054ce <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fc fd86 	bl	8001f24 <HAL_GetTick>
 8005418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541c:	e00a      	b.n	8005434 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800541e:	f7fc fd81 	bl	8001f24 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	; 0x64
 800542c:	d902      	bls.n	8005434 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	f000 bdcf 	b.w	8005fd2 <HAL_RCC_OscConfig+0xe02>
 8005434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005438:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005440:	fa93 f3a3 	rbit	r3, r3
 8005444:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005448:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544c:	fab3 f383 	clz	r3, r3
 8005450:	b2db      	uxtb	r3, r3
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	b2db      	uxtb	r3, r3
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d102      	bne.n	8005466 <HAL_RCC_OscConfig+0x296>
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	e015      	b.n	8005492 <HAL_RCC_OscConfig+0x2c2>
 8005466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800546a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800547a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800547e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005482:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005486:	fa93 f3a3 	rbit	r3, r3
 800548a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800548e:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <HAL_RCC_OscConfig+0x2f8>)
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005496:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800549a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800549e:	fa92 f2a2 	rbit	r2, r2
 80054a2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80054a6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80054aa:	fab2 f282 	clz	r2, r2
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	f042 0220 	orr.w	r2, r2, #32
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	f002 021f 	and.w	r2, r2, #31
 80054ba:	2101      	movs	r1, #1
 80054bc:	fa01 f202 	lsl.w	r2, r1, r2
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1ab      	bne.n	800541e <HAL_RCC_OscConfig+0x24e>
 80054c6:	e002      	b.n	80054ce <HAL_RCC_OscConfig+0x2fe>
 80054c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ce:	1d3b      	adds	r3, r7, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 816f 	beq.w	80057bc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80054de:	4bd0      	ldr	r3, [pc, #832]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80054ea:	4bcd      	ldr	r3, [pc, #820]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d16c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x400>
 80054f6:	4bca      	ldr	r3, [pc, #808]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d166      	bne.n	80055d0 <HAL_RCC_OscConfig+0x400>
 8005502:	2302      	movs	r3, #2
 8005504:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005508:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800550c:	fa93 f3a3 	rbit	r3, r3
 8005510:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005514:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005518:	fab3 f383 	clz	r3, r3
 800551c:	b2db      	uxtb	r3, r3
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d102      	bne.n	8005532 <HAL_RCC_OscConfig+0x362>
 800552c:	4bbc      	ldr	r3, [pc, #752]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	e013      	b.n	800555a <HAL_RCC_OscConfig+0x38a>
 8005532:	2302      	movs	r3, #2
 8005534:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800553c:	fa93 f3a3 	rbit	r3, r3
 8005540:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005544:	2302      	movs	r3, #2
 8005546:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800554a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005556:	4bb2      	ldr	r3, [pc, #712]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2202      	movs	r2, #2
 800555c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005560:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005564:	fa92 f2a2 	rbit	r2, r2
 8005568:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800556c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005570:	fab2 f282 	clz	r2, r2
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	f042 0220 	orr.w	r2, r2, #32
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	f002 021f 	and.w	r2, r2, #31
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f202 	lsl.w	r2, r1, r2
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_RCC_OscConfig+0x3cc>
 800558c:	1d3b      	adds	r3, r7, #4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d002      	beq.n	800559c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f000 bd1b 	b.w	8005fd2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559c:	4ba0      	ldr	r3, [pc, #640]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	21f8      	movs	r1, #248	; 0xf8
 80055ac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80055b4:	fa91 f1a1 	rbit	r1, r1
 80055b8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80055bc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80055c0:	fab1 f181 	clz	r1, r1
 80055c4:	b2c9      	uxtb	r1, r1
 80055c6:	408b      	lsls	r3, r1
 80055c8:	4995      	ldr	r1, [pc, #596]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ce:	e0f5      	b.n	80057bc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8085 	beq.w	80056e6 <HAL_RCC_OscConfig+0x516>
 80055dc:	2301      	movs	r3, #1
 80055de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80055e6:	fa93 f3a3 	rbit	r3, r3
 80055ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80055ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055f2:	fab3 f383 	clz	r3, r3
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	461a      	mov	r2, r3
 8005604:	2301      	movs	r3, #1
 8005606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005608:	f7fc fc8c 	bl	8001f24 <HAL_GetTick>
 800560c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005610:	e00a      	b.n	8005628 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005612:	f7fc fc87 	bl	8001f24 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d902      	bls.n	8005628 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	f000 bcd5 	b.w	8005fd2 <HAL_RCC_OscConfig+0xe02>
 8005628:	2302      	movs	r3, #2
 800562a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005632:	fa93 f3a3 	rbit	r3, r3
 8005636:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800563a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563e:	fab3 f383 	clz	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	d102      	bne.n	8005658 <HAL_RCC_OscConfig+0x488>
 8005652:	4b73      	ldr	r3, [pc, #460]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	e013      	b.n	8005680 <HAL_RCC_OscConfig+0x4b0>
 8005658:	2302      	movs	r3, #2
 800565a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005662:	fa93 f3a3 	rbit	r3, r3
 8005666:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800566a:	2302      	movs	r3, #2
 800566c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005670:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005674:	fa93 f3a3 	rbit	r3, r3
 8005678:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800567c:	4b68      	ldr	r3, [pc, #416]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2202      	movs	r2, #2
 8005682:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005686:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800568a:	fa92 f2a2 	rbit	r2, r2
 800568e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005692:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005696:	fab2 f282 	clz	r2, r2
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	f042 0220 	orr.w	r2, r2, #32
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	f002 021f 	and.w	r2, r2, #31
 80056a6:	2101      	movs	r1, #1
 80056a8:	fa01 f202 	lsl.w	r2, r1, r2
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0af      	beq.n	8005612 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b2:	4b5b      	ldr	r3, [pc, #364]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	21f8      	movs	r1, #248	; 0xf8
 80056c2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80056ca:	fa91 f1a1 	rbit	r1, r1
 80056ce:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80056d2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80056d6:	fab1 f181 	clz	r1, r1
 80056da:	b2c9      	uxtb	r1, r1
 80056dc:	408b      	lsls	r3, r1
 80056de:	4950      	ldr	r1, [pc, #320]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	600b      	str	r3, [r1, #0]
 80056e4:	e06a      	b.n	80057bc <HAL_RCC_OscConfig+0x5ec>
 80056e6:	2301      	movs	r3, #1
 80056e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056f0:	fa93 f3a3 	rbit	r3, r3
 80056f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80056f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056fc:	fab3 f383 	clz	r3, r3
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005706:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	461a      	mov	r2, r3
 800570e:	2300      	movs	r3, #0
 8005710:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005712:	f7fc fc07 	bl	8001f24 <HAL_GetTick>
 8005716:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800571a:	e00a      	b.n	8005732 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800571c:	f7fc fc02 	bl	8001f24 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d902      	bls.n	8005732 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	f000 bc50 	b.w	8005fd2 <HAL_RCC_OscConfig+0xe02>
 8005732:	2302      	movs	r3, #2
 8005734:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005738:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800573c:	fa93 f3a3 	rbit	r3, r3
 8005740:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005748:	fab3 f383 	clz	r3, r3
 800574c:	b2db      	uxtb	r3, r3
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d102      	bne.n	8005762 <HAL_RCC_OscConfig+0x592>
 800575c:	4b30      	ldr	r3, [pc, #192]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	e013      	b.n	800578a <HAL_RCC_OscConfig+0x5ba>
 8005762:	2302      	movs	r3, #2
 8005764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800576c:	fa93 f3a3 	rbit	r3, r3
 8005770:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005774:	2302      	movs	r3, #2
 8005776:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800577a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800577e:	fa93 f3a3 	rbit	r3, r3
 8005782:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005786:	4b26      	ldr	r3, [pc, #152]	; (8005820 <HAL_RCC_OscConfig+0x650>)
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2202      	movs	r2, #2
 800578c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005790:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005794:	fa92 f2a2 	rbit	r2, r2
 8005798:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800579c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80057a0:	fab2 f282 	clz	r2, r2
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	f042 0220 	orr.w	r2, r2, #32
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	f002 021f 	and.w	r2, r2, #31
 80057b0:	2101      	movs	r1, #1
 80057b2:	fa01 f202 	lsl.w	r2, r1, r2
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1af      	bne.n	800571c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 80da 	beq.w	8005980 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d069      	beq.n	80058aa <HAL_RCC_OscConfig+0x6da>
 80057d6:	2301      	movs	r3, #1
 80057d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057e0:	fa93 f3a3 	rbit	r3, r3
 80057e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80057e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ec:	fab3 f383 	clz	r3, r3
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <HAL_RCC_OscConfig+0x654>)
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	461a      	mov	r2, r3
 80057fc:	2301      	movs	r3, #1
 80057fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005800:	f7fc fb90 	bl	8001f24 <HAL_GetTick>
 8005804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005808:	e00e      	b.n	8005828 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800580a:	f7fc fb8b 	bl	8001f24 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d906      	bls.n	8005828 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e3d9      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000
 8005824:	10908120 	.word	0x10908120
 8005828:	2302      	movs	r3, #2
 800582a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005832:	fa93 f3a3 	rbit	r3, r3
 8005836:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800583a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800583e:	2202      	movs	r2, #2
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	fa93 f2a3 	rbit	r2, r3
 800584c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005856:	2202      	movs	r2, #2
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	fa93 f2a3 	rbit	r2, r3
 8005864:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005868:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586a:	4ba5      	ldr	r3, [pc, #660]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 800586c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800586e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005872:	2102      	movs	r1, #2
 8005874:	6019      	str	r1, [r3, #0]
 8005876:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	fa93 f1a3 	rbit	r1, r3
 8005880:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005884:	6019      	str	r1, [r3, #0]
  return result;
 8005886:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	fab3 f383 	clz	r3, r3
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	2101      	movs	r1, #1
 800589e:	fa01 f303 	lsl.w	r3, r1, r3
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0b0      	beq.n	800580a <HAL_RCC_OscConfig+0x63a>
 80058a8:	e06a      	b.n	8005980 <HAL_RCC_OscConfig+0x7b0>
 80058aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	fa93 f2a3 	rbit	r2, r3
 80058bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80058c0:	601a      	str	r2, [r3, #0]
  return result;
 80058c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80058c6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c8:	fab3 f383 	clz	r3, r3
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	4b8c      	ldr	r3, [pc, #560]	; (8005b04 <HAL_RCC_OscConfig+0x934>)
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	461a      	mov	r2, r3
 80058d8:	2300      	movs	r3, #0
 80058da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058dc:	f7fc fb22 	bl	8001f24 <HAL_GetTick>
 80058e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e4:	e009      	b.n	80058fa <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e6:	f7fc fb1d 	bl	8001f24 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e36b      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
 80058fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80058fe:	2202      	movs	r2, #2
 8005900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005902:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	fa93 f2a3 	rbit	r2, r3
 800590c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005916:	2202      	movs	r2, #2
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	fa93 f2a3 	rbit	r2, r3
 8005924:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800592e:	2202      	movs	r2, #2
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	fa93 f2a3 	rbit	r2, r3
 800593c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005940:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005942:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005946:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800594a:	2102      	movs	r1, #2
 800594c:	6019      	str	r1, [r3, #0]
 800594e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	fa93 f1a3 	rbit	r1, r3
 8005958:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800595c:	6019      	str	r1, [r3, #0]
  return result;
 800595e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	fab3 f383 	clz	r3, r3
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f303 	lsl.w	r3, r1, r3
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1b2      	bne.n	80058e6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8158 	beq.w	8005c40 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005990:	2300      	movs	r3, #0
 8005992:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005996:	4b5a      	ldr	r3, [pc, #360]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d112      	bne.n	80059c8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a2:	4b57      	ldr	r3, [pc, #348]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	4a56      	ldr	r2, [pc, #344]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 80059a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ac:	61d3      	str	r3, [r2, #28]
 80059ae:	4b54      	ldr	r3, [pc, #336]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80059b6:	f107 0308 	add.w	r3, r7, #8
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c8:	4b4f      	ldr	r3, [pc, #316]	; (8005b08 <HAL_RCC_OscConfig+0x938>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11a      	bne.n	8005a0a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059d4:	4b4c      	ldr	r3, [pc, #304]	; (8005b08 <HAL_RCC_OscConfig+0x938>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a4b      	ldr	r2, [pc, #300]	; (8005b08 <HAL_RCC_OscConfig+0x938>)
 80059da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059e0:	f7fc faa0 	bl	8001f24 <HAL_GetTick>
 80059e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e8:	e009      	b.n	80059fe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ea:	f7fc fa9b 	bl	8001f24 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e2e9      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059fe:	4b42      	ldr	r3, [pc, #264]	; (8005b08 <HAL_RCC_OscConfig+0x938>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0ef      	beq.n	80059ea <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d106      	bne.n	8005a22 <HAL_RCC_OscConfig+0x852>
 8005a14:	4b3a      	ldr	r3, [pc, #232]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	4a39      	ldr	r2, [pc, #228]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a1a:	f043 0301 	orr.w	r3, r3, #1
 8005a1e:	6213      	str	r3, [r2, #32]
 8005a20:	e02f      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
 8005a22:	1d3b      	adds	r3, r7, #4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10c      	bne.n	8005a46 <HAL_RCC_OscConfig+0x876>
 8005a2c:	4b34      	ldr	r3, [pc, #208]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	4a33      	ldr	r2, [pc, #204]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	6213      	str	r3, [r2, #32]
 8005a38:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	4a30      	ldr	r2, [pc, #192]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a3e:	f023 0304 	bic.w	r3, r3, #4
 8005a42:	6213      	str	r3, [r2, #32]
 8005a44:	e01d      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b05      	cmp	r3, #5
 8005a4e:	d10c      	bne.n	8005a6a <HAL_RCC_OscConfig+0x89a>
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	4a2a      	ldr	r2, [pc, #168]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a56:	f043 0304 	orr.w	r3, r3, #4
 8005a5a:	6213      	str	r3, [r2, #32]
 8005a5c:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6213      	str	r3, [r2, #32]
 8005a68:	e00b      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
 8005a6a:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	4a24      	ldr	r2, [pc, #144]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a70:	f023 0301 	bic.w	r3, r3, #1
 8005a74:	6213      	str	r3, [r2, #32]
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a82:	1d3b      	adds	r3, r7, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d06b      	beq.n	8005b64 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a8c:	f7fc fa4a 	bl	8001f24 <HAL_GetTick>
 8005a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	e00b      	b.n	8005aae <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7fc fa45 	bl	8001f24 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e291      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
 8005aae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	fa93 f2a3 	rbit	r2, r3
 8005ac0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005aca:	2202      	movs	r2, #2
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	fa93 f2a3 	rbit	r2, r3
 8005ad8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005adc:	601a      	str	r2, [r3, #0]
  return result;
 8005ade:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005ae2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae4:	fab3 f383 	clz	r3, r3
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f043 0302 	orr.w	r3, r3, #2
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d109      	bne.n	8005b0c <HAL_RCC_OscConfig+0x93c>
 8005af8:	4b01      	ldr	r3, [pc, #4]	; (8005b00 <HAL_RCC_OscConfig+0x930>)
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	e014      	b.n	8005b28 <HAL_RCC_OscConfig+0x958>
 8005afe:	bf00      	nop
 8005b00:	40021000 	.word	0x40021000
 8005b04:	10908120 	.word	0x10908120
 8005b08:	40007000 	.word	0x40007000
 8005b0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005b10:	2202      	movs	r2, #2
 8005b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b14:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	fa93 f2a3 	rbit	r2, r3
 8005b1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	4bbb      	ldr	r3, [pc, #748]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005b2c:	2102      	movs	r1, #2
 8005b2e:	6011      	str	r1, [r2, #0]
 8005b30:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	fa92 f1a2 	rbit	r1, r2
 8005b3a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005b3e:	6011      	str	r1, [r2, #0]
  return result;
 8005b40:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	fab2 f282 	clz	r2, r2
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	f002 021f 	and.w	r2, r2, #31
 8005b56:	2101      	movs	r1, #1
 8005b58:	fa01 f202 	lsl.w	r2, r1, r2
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d099      	beq.n	8005a96 <HAL_RCC_OscConfig+0x8c6>
 8005b62:	e063      	b.n	8005c2c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b64:	f7fc f9de 	bl	8001f24 <HAL_GetTick>
 8005b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b6c:	e00b      	b.n	8005b86 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fc f9d9 	bl	8001f24 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e225      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
 8005b86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	fa93 f2a3 	rbit	r2, r3
 8005b98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	fa93 f2a3 	rbit	r2, r3
 8005bb0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005bb4:	601a      	str	r2, [r3, #0]
  return result;
 8005bb6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005bba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bbc:	fab3 f383 	clz	r3, r3
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f043 0302 	orr.w	r3, r3, #2
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCC_OscConfig+0xa06>
 8005bd0:	4b90      	ldr	r3, [pc, #576]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	e00d      	b.n	8005bf2 <HAL_RCC_OscConfig+0xa22>
 8005bd6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005bda:	2202      	movs	r2, #2
 8005bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bde:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	fa93 f2a3 	rbit	r2, r3
 8005be8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	4b89      	ldr	r3, [pc, #548]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	6011      	str	r1, [r2, #0]
 8005bfa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	fa92 f1a2 	rbit	r1, r2
 8005c04:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005c08:	6011      	str	r1, [r2, #0]
  return result;
 8005c0a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	fab2 f282 	clz	r2, r2
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	f002 021f 	and.w	r2, r2, #31
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f202 	lsl.w	r2, r1, r2
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1a0      	bne.n	8005b6e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c2c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d105      	bne.n	8005c40 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c34:	4b77      	ldr	r3, [pc, #476]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	4a76      	ldr	r2, [pc, #472]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 81c2 	beq.w	8005fd0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c4c:	4b71      	ldr	r3, [pc, #452]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	f000 819c 	beq.w	8005f92 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c5a:	1d3b      	adds	r3, r7, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	f040 8114 	bne.w	8005e8e <HAL_RCC_OscConfig+0xcbe>
 8005c66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005c6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	fa93 f2a3 	rbit	r2, r3
 8005c7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005c7e:	601a      	str	r2, [r3, #0]
  return result;
 8005c80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005c84:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c86:	fab3 f383 	clz	r3, r3
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	461a      	mov	r2, r3
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fc f942 	bl	8001f24 <HAL_GetTick>
 8005ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ca4:	e009      	b.n	8005cba <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca6:	f7fc f93d 	bl	8001f24 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e18b      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
 8005cba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	fa93 f2a3 	rbit	r2, r3
 8005cce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005cd2:	601a      	str	r2, [r3, #0]
  return result;
 8005cd4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005cd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cda:	fab3 f383 	clz	r3, r3
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d102      	bne.n	8005cf4 <HAL_RCC_OscConfig+0xb24>
 8005cee:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	e01b      	b.n	8005d2c <HAL_RCC_OscConfig+0xb5c>
 8005cf4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	fa93 f2a3 	rbit	r2, r3
 8005d08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	fa93 f2a3 	rbit	r2, r3
 8005d22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	4b3a      	ldr	r3, [pc, #232]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d34:	6011      	str	r1, [r2, #0]
 8005d36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	fa92 f1a2 	rbit	r1, r2
 8005d40:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005d44:	6011      	str	r1, [r2, #0]
  return result;
 8005d46:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	fab2 f282 	clz	r2, r2
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	f042 0220 	orr.w	r2, r2, #32
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	f002 021f 	and.w	r2, r2, #31
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d62:	4013      	ands	r3, r2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d19e      	bne.n	8005ca6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d68:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d70:	1d3b      	adds	r3, r7, #4
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d76:	1d3b      	adds	r3, r7, #4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	4925      	ldr	r1, [pc, #148]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	604b      	str	r3, [r1, #4]
 8005d84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	fa93 f2a3 	rbit	r2, r3
 8005d98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d9c:	601a      	str	r2, [r3, #0]
  return result;
 8005d9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005da2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da4:	fab3 f383 	clz	r3, r3
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005dae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	461a      	mov	r2, r3
 8005db6:	2301      	movs	r3, #1
 8005db8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dba:	f7fc f8b3 	bl	8001f24 <HAL_GetTick>
 8005dbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dc2:	e009      	b.n	8005dd8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fc f8ae 	bl	8001f24 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e0fc      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
 8005dd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	fa93 f2a3 	rbit	r2, r3
 8005dec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005df0:	601a      	str	r2, [r3, #0]
  return result;
 8005df2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005df6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005df8:	fab3 f383 	clz	r3, r3
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d105      	bne.n	8005e18 <HAL_RCC_OscConfig+0xc48>
 8005e0c:	4b01      	ldr	r3, [pc, #4]	; (8005e14 <HAL_RCC_OscConfig+0xc44>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	e01e      	b.n	8005e50 <HAL_RCC_OscConfig+0xc80>
 8005e12:	bf00      	nop
 8005e14:	40021000 	.word	0x40021000
 8005e18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	fa93 f2a3 	rbit	r2, r3
 8005e2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	fa93 f2a3 	rbit	r2, r3
 8005e46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	4b63      	ldr	r3, [pc, #396]	; (8005fdc <HAL_RCC_OscConfig+0xe0c>)
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005e54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005e58:	6011      	str	r1, [r2, #0]
 8005e5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	fa92 f1a2 	rbit	r1, r2
 8005e64:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005e68:	6011      	str	r1, [r2, #0]
  return result;
 8005e6a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	fab2 f282 	clz	r2, r2
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	f042 0220 	orr.w	r2, r2, #32
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	f002 021f 	and.w	r2, r2, #31
 8005e80:	2101      	movs	r1, #1
 8005e82:	fa01 f202 	lsl.w	r2, r1, r2
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d09b      	beq.n	8005dc4 <HAL_RCC_OscConfig+0xbf4>
 8005e8c:	e0a0      	b.n	8005fd0 <HAL_RCC_OscConfig+0xe00>
 8005e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	fa93 f2a3 	rbit	r2, r3
 8005ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ea6:	601a      	str	r2, [r3, #0]
  return result;
 8005ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005eac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eae:	fab3 f383 	clz	r3, r3
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fc f82e 	bl	8001f24 <HAL_GetTick>
 8005ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ecc:	e009      	b.n	8005ee2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ece:	f7fc f829 	bl	8001f24 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e077      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
 8005ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ee6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	fa93 f2a3 	rbit	r2, r3
 8005ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005efa:	601a      	str	r2, [r3, #0]
  return result;
 8005efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f02:	fab3 f383 	clz	r3, r3
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d102      	bne.n	8005f1c <HAL_RCC_OscConfig+0xd4c>
 8005f16:	4b31      	ldr	r3, [pc, #196]	; (8005fdc <HAL_RCC_OscConfig+0xe0c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	e01b      	b.n	8005f54 <HAL_RCC_OscConfig+0xd84>
 8005f1c:	f107 0320 	add.w	r3, r7, #32
 8005f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f26:	f107 0320 	add.w	r3, r7, #32
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	fa93 f2a3 	rbit	r2, r3
 8005f30:	f107 031c 	add.w	r3, r7, #28
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	f107 0318 	add.w	r3, r7, #24
 8005f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f107 0318 	add.w	r3, r7, #24
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	fa93 f2a3 	rbit	r2, r3
 8005f4a:	f107 0314 	add.w	r3, r7, #20
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	4b22      	ldr	r3, [pc, #136]	; (8005fdc <HAL_RCC_OscConfig+0xe0c>)
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	f107 0210 	add.w	r2, r7, #16
 8005f58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f5c:	6011      	str	r1, [r2, #0]
 8005f5e:	f107 0210 	add.w	r2, r7, #16
 8005f62:	6812      	ldr	r2, [r2, #0]
 8005f64:	fa92 f1a2 	rbit	r1, r2
 8005f68:	f107 020c 	add.w	r2, r7, #12
 8005f6c:	6011      	str	r1, [r2, #0]
  return result;
 8005f6e:	f107 020c 	add.w	r2, r7, #12
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	fab2 f282 	clz	r2, r2
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	f042 0220 	orr.w	r2, r2, #32
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	f002 021f 	and.w	r2, r2, #31
 8005f84:	2101      	movs	r1, #1
 8005f86:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d19e      	bne.n	8005ece <HAL_RCC_OscConfig+0xcfe>
 8005f90:	e01e      	b.n	8005fd0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f92:	1d3b      	adds	r3, r7, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e018      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fa0:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <HAL_RCC_OscConfig+0xe0c>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005fa8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005fac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005fb0:	1d3b      	adds	r3, r7, #4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d108      	bne.n	8005fcc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005fba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40021000 	.word	0x40021000

08005fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b09e      	sub	sp, #120	; 0x78
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e162      	b.n	80062be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ff8:	4b90      	ldr	r3, [pc, #576]	; (800623c <HAL_RCC_ClockConfig+0x25c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d910      	bls.n	8006028 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006006:	4b8d      	ldr	r3, [pc, #564]	; (800623c <HAL_RCC_ClockConfig+0x25c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f023 0207 	bic.w	r2, r3, #7
 800600e:	498b      	ldr	r1, [pc, #556]	; (800623c <HAL_RCC_ClockConfig+0x25c>)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	4313      	orrs	r3, r2
 8006014:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006016:	4b89      	ldr	r3, [pc, #548]	; (800623c <HAL_RCC_ClockConfig+0x25c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d001      	beq.n	8006028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e14a      	b.n	80062be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006034:	4b82      	ldr	r3, [pc, #520]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	497f      	ldr	r1, [pc, #508]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 8006042:	4313      	orrs	r3, r2
 8006044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 80dc 	beq.w	800620c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d13c      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xf6>
 800605c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006060:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006064:	fa93 f3a3 	rbit	r3, r3
 8006068:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800606a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606c:	fab3 f383 	clz	r3, r3
 8006070:	b2db      	uxtb	r3, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d102      	bne.n	8006086 <HAL_RCC_ClockConfig+0xa6>
 8006080:	4b6f      	ldr	r3, [pc, #444]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	e00f      	b.n	80060a6 <HAL_RCC_ClockConfig+0xc6>
 8006086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800608a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800608e:	fa93 f3a3 	rbit	r3, r3
 8006092:	667b      	str	r3, [r7, #100]	; 0x64
 8006094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006098:	663b      	str	r3, [r7, #96]	; 0x60
 800609a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800609c:	fa93 f3a3 	rbit	r3, r3
 80060a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060a2:	4b67      	ldr	r3, [pc, #412]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ae:	fa92 f2a2 	rbit	r2, r2
 80060b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80060b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060b6:	fab2 f282 	clz	r2, r2
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	f042 0220 	orr.w	r2, r2, #32
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	f002 021f 	and.w	r2, r2, #31
 80060c6:	2101      	movs	r1, #1
 80060c8:	fa01 f202 	lsl.w	r2, r1, r2
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d17b      	bne.n	80061ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e0f3      	b.n	80062be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d13c      	bne.n	8006158 <HAL_RCC_ClockConfig+0x178>
 80060de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e6:	fa93 f3a3 	rbit	r3, r3
 80060ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80060ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ee:	fab3 f383 	clz	r3, r3
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d102      	bne.n	8006108 <HAL_RCC_ClockConfig+0x128>
 8006102:	4b4f      	ldr	r3, [pc, #316]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	e00f      	b.n	8006128 <HAL_RCC_ClockConfig+0x148>
 8006108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800610c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006110:	fa93 f3a3 	rbit	r3, r3
 8006114:	647b      	str	r3, [r7, #68]	; 0x44
 8006116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800611a:	643b      	str	r3, [r7, #64]	; 0x40
 800611c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611e:	fa93 f3a3 	rbit	r3, r3
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006124:	4b46      	ldr	r3, [pc, #280]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800612c:	63ba      	str	r2, [r7, #56]	; 0x38
 800612e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006130:	fa92 f2a2 	rbit	r2, r2
 8006134:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006138:	fab2 f282 	clz	r2, r2
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	f042 0220 	orr.w	r2, r2, #32
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	f002 021f 	and.w	r2, r2, #31
 8006148:	2101      	movs	r1, #1
 800614a:	fa01 f202 	lsl.w	r2, r1, r2
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d13a      	bne.n	80061ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0b2      	b.n	80062be <HAL_RCC_ClockConfig+0x2de>
 8006158:	2302      	movs	r3, #2
 800615a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	fa93 f3a3 	rbit	r3, r3
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006166:	fab3 f383 	clz	r3, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f043 0301 	orr.w	r3, r3, #1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b01      	cmp	r3, #1
 8006178:	d102      	bne.n	8006180 <HAL_RCC_ClockConfig+0x1a0>
 800617a:	4b31      	ldr	r3, [pc, #196]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	e00d      	b.n	800619c <HAL_RCC_ClockConfig+0x1bc>
 8006180:	2302      	movs	r3, #2
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	fa93 f3a3 	rbit	r3, r3
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
 800618c:	2302      	movs	r3, #2
 800618e:	623b      	str	r3, [r7, #32]
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	fa93 f3a3 	rbit	r3, r3
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	4b29      	ldr	r3, [pc, #164]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	2202      	movs	r2, #2
 800619e:	61ba      	str	r2, [r7, #24]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	fa92 f2a2 	rbit	r2, r2
 80061a6:	617a      	str	r2, [r7, #20]
  return result;
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	fab2 f282 	clz	r2, r2
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	f042 0220 	orr.w	r2, r2, #32
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	f002 021f 	and.w	r2, r2, #31
 80061ba:	2101      	movs	r1, #1
 80061bc:	fa01 f202 	lsl.w	r2, r1, r2
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e079      	b.n	80062be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061ca:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f023 0203 	bic.w	r2, r3, #3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	491a      	ldr	r1, [pc, #104]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061dc:	f7fb fea2 	bl	8001f24 <HAL_GetTick>
 80061e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e2:	e00a      	b.n	80061fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e4:	f7fb fe9e 	bl	8001f24 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e061      	b.n	80062be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <HAL_RCC_ClockConfig+0x260>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f003 020c 	and.w	r2, r3, #12
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	429a      	cmp	r2, r3
 800620a:	d1eb      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <HAL_RCC_ClockConfig+0x25c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d214      	bcs.n	8006244 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b08      	ldr	r3, [pc, #32]	; (800623c <HAL_RCC_ClockConfig+0x25c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 0207 	bic.w	r2, r3, #7
 8006222:	4906      	ldr	r1, [pc, #24]	; (800623c <HAL_RCC_ClockConfig+0x25c>)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800622a:	4b04      	ldr	r3, [pc, #16]	; (800623c <HAL_RCC_ClockConfig+0x25c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d005      	beq.n	8006244 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e040      	b.n	80062be <HAL_RCC_ClockConfig+0x2de>
 800623c:	40022000 	.word	0x40022000
 8006240:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006250:	4b1d      	ldr	r3, [pc, #116]	; (80062c8 <HAL_RCC_ClockConfig+0x2e8>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	491a      	ldr	r1, [pc, #104]	; (80062c8 <HAL_RCC_ClockConfig+0x2e8>)
 800625e:	4313      	orrs	r3, r2
 8006260:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800626e:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <HAL_RCC_ClockConfig+0x2e8>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	4912      	ldr	r1, [pc, #72]	; (80062c8 <HAL_RCC_ClockConfig+0x2e8>)
 800627e:	4313      	orrs	r3, r2
 8006280:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006282:	f000 f829 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 8006286:	4601      	mov	r1, r0
 8006288:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <HAL_RCC_ClockConfig+0x2e8>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006290:	22f0      	movs	r2, #240	; 0xf0
 8006292:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	fa92 f2a2 	rbit	r2, r2
 800629a:	60fa      	str	r2, [r7, #12]
  return result;
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	fab2 f282 	clz	r2, r2
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	40d3      	lsrs	r3, r2
 80062a6:	4a09      	ldr	r2, [pc, #36]	; (80062cc <HAL_RCC_ClockConfig+0x2ec>)
 80062a8:	5cd3      	ldrb	r3, [r2, r3]
 80062aa:	fa21 f303 	lsr.w	r3, r1, r3
 80062ae:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <HAL_RCC_ClockConfig+0x2f0>)
 80062b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <HAL_RCC_ClockConfig+0x2f4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fb fdf0 	bl	8001e9c <HAL_InitTick>
  
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3778      	adds	r7, #120	; 0x78
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40021000 	.word	0x40021000
 80062cc:	0800dfa8 	.word	0x0800dfa8
 80062d0:	20000010 	.word	0x20000010
 80062d4:	20000900 	.word	0x20000900

080062d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	b08b      	sub	sp, #44	; 0x2c
 80062dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	2300      	movs	r3, #0
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	2300      	movs	r3, #0
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80062f2:	4b29      	ldr	r3, [pc, #164]	; (8006398 <HAL_RCC_GetSysClockFreq+0xc0>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d002      	beq.n	8006308 <HAL_RCC_GetSysClockFreq+0x30>
 8006302:	2b08      	cmp	r3, #8
 8006304:	d003      	beq.n	800630e <HAL_RCC_GetSysClockFreq+0x36>
 8006306:	e03c      	b.n	8006382 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006308:	4b24      	ldr	r3, [pc, #144]	; (800639c <HAL_RCC_GetSysClockFreq+0xc4>)
 800630a:	623b      	str	r3, [r7, #32]
      break;
 800630c:	e03c      	b.n	8006388 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006314:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006318:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	fa92 f2a2 	rbit	r2, r2
 8006320:	607a      	str	r2, [r7, #4]
  return result;
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	fab2 f282 	clz	r2, r2
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	40d3      	lsrs	r3, r2
 800632c:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800632e:	5cd3      	ldrb	r3, [r2, r3]
 8006330:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006332:	4b19      	ldr	r3, [pc, #100]	; (8006398 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	f003 030f 	and.w	r3, r3, #15
 800633a:	220f      	movs	r2, #15
 800633c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	fa92 f2a2 	rbit	r2, r2
 8006344:	60fa      	str	r2, [r7, #12]
  return result;
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	fab2 f282 	clz	r2, r2
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	40d3      	lsrs	r3, r2
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006352:	5cd3      	ldrb	r3, [r2, r3]
 8006354:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006360:	4a0e      	ldr	r2, [pc, #56]	; (800639c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	fbb2 f2f3 	udiv	r2, r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
 8006370:	e004      	b.n	800637c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4a0c      	ldr	r2, [pc, #48]	; (80063a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006376:	fb02 f303 	mul.w	r3, r2, r3
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	623b      	str	r3, [r7, #32]
      break;
 8006380:	e002      	b.n	8006388 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006382:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8006384:	623b      	str	r3, [r7, #32]
      break;
 8006386:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006388:	6a3b      	ldr	r3, [r7, #32]
}
 800638a:	4618      	mov	r0, r3
 800638c:	372c      	adds	r7, #44	; 0x2c
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40021000 	.word	0x40021000
 800639c:	016e3600 	.word	0x016e3600
 80063a0:	0800dfb8 	.word	0x0800dfb8
 80063a4:	0800dfc8 	.word	0x0800dfc8
 80063a8:	003d0900 	.word	0x003d0900
 80063ac:	007a1200 	.word	0x007a1200

080063b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b092      	sub	sp, #72	; 0x48
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80d4 	beq.w	800657c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063d4:	4b4e      	ldr	r3, [pc, #312]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10e      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063e0:	4b4b      	ldr	r3, [pc, #300]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	4a4a      	ldr	r2, [pc, #296]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ea:	61d3      	str	r3, [r2, #28]
 80063ec:	4b48      	ldr	r3, [pc, #288]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fe:	4b45      	ldr	r3, [pc, #276]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d118      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800640a:	4b42      	ldr	r3, [pc, #264]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a41      	ldr	r2, [pc, #260]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006414:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006416:	f7fb fd85 	bl	8001f24 <HAL_GetTick>
 800641a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800641c:	e008      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641e:	f7fb fd81 	bl	8001f24 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b64      	cmp	r3, #100	; 0x64
 800642a:	d901      	bls.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e169      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006430:	4b38      	ldr	r3, [pc, #224]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800643c:	4b34      	ldr	r3, [pc, #208]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 8084 	beq.w	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006456:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006458:	429a      	cmp	r2, r3
 800645a:	d07c      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800645c:	4b2c      	ldr	r3, [pc, #176]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800646a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	fa93 f3a3 	rbit	r3, r3
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006476:	fab3 f383 	clz	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	4b26      	ldr	r3, [pc, #152]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	461a      	mov	r2, r3
 8006486:	2301      	movs	r3, #1
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800648e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	fa93 f3a3 	rbit	r3, r3
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800649a:	fab3 f383 	clz	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	4b1d      	ldr	r3, [pc, #116]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	461a      	mov	r2, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80064ae:	4a18      	ldr	r2, [pc, #96]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d04b      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064be:	f7fb fd31 	bl	8001f24 <HAL_GetTick>
 80064c2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c4:	e00a      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c6:	f7fb fd2d 	bl	8001f24 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d901      	bls.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e113      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80064dc:	2302      	movs	r3, #2
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	fa93 f3a3 	rbit	r3, r3
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
 80064e8:	2302      	movs	r3, #2
 80064ea:	623b      	str	r3, [r7, #32]
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	fa93 f3a3 	rbit	r3, r3
 80064f2:	61fb      	str	r3, [r7, #28]
  return result;
 80064f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f6:	fab3 f383 	clz	r3, r3
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f043 0302 	orr.w	r3, r3, #2
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d108      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800650a:	4b01      	ldr	r3, [pc, #4]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	e00d      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006510:	40021000 	.word	0x40021000
 8006514:	40007000 	.word	0x40007000
 8006518:	10908100 	.word	0x10908100
 800651c:	2302      	movs	r3, #2
 800651e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	fa93 f3a3 	rbit	r3, r3
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	4b78      	ldr	r3, [pc, #480]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	2202      	movs	r2, #2
 800652e:	613a      	str	r2, [r7, #16]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	fa92 f2a2 	rbit	r2, r2
 8006536:	60fa      	str	r2, [r7, #12]
  return result;
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	fab2 f282 	clz	r2, r2
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	f002 021f 	and.w	r2, r2, #31
 800654a:	2101      	movs	r1, #1
 800654c:	fa01 f202 	lsl.w	r2, r1, r2
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0b7      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006556:	4b6d      	ldr	r3, [pc, #436]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	496a      	ldr	r1, [pc, #424]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006564:	4313      	orrs	r3, r2
 8006566:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006568:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800656c:	2b01      	cmp	r3, #1
 800656e:	d105      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006570:	4b66      	ldr	r3, [pc, #408]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	4a65      	ldr	r2, [pc, #404]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800657a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006588:	4b60      	ldr	r3, [pc, #384]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	f023 0203 	bic.w	r2, r3, #3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	495d      	ldr	r1, [pc, #372]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006596:	4313      	orrs	r3, r2
 8006598:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065a6:	4b59      	ldr	r3, [pc, #356]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4956      	ldr	r1, [pc, #344]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065c4:	4b51      	ldr	r3, [pc, #324]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	494e      	ldr	r1, [pc, #312]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065e2:	4b4a      	ldr	r3, [pc, #296]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	f023 0210 	bic.w	r2, r3, #16
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	4947      	ldr	r1, [pc, #284]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006600:	4b42      	ldr	r3, [pc, #264]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	493f      	ldr	r1, [pc, #252]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800660e:	4313      	orrs	r3, r2
 8006610:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800661e:	4b3b      	ldr	r3, [pc, #236]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	f023 0220 	bic.w	r2, r3, #32
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	4938      	ldr	r1, [pc, #224]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800662c:	4313      	orrs	r3, r2
 800662e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800663c:	4b33      	ldr	r3, [pc, #204]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	4930      	ldr	r1, [pc, #192]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800664a:	4313      	orrs	r3, r2
 800664c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800665a:	4b2c      	ldr	r3, [pc, #176]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	4929      	ldr	r1, [pc, #164]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006668:	4313      	orrs	r3, r2
 800666a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006674:	2b00      	cmp	r3, #0
 8006676:	d008      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006678:	4b24      	ldr	r3, [pc, #144]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	4921      	ldr	r1, [pc, #132]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006686:	4313      	orrs	r3, r2
 8006688:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d008      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006696:	4b1d      	ldr	r3, [pc, #116]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	491a      	ldr	r1, [pc, #104]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80066b4:	4b15      	ldr	r3, [pc, #84]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	4912      	ldr	r1, [pc, #72]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80066d2:	4b0e      	ldr	r3, [pc, #56]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	490b      	ldr	r1, [pc, #44]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	4903      	ldr	r1, [pc, #12]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3748      	adds	r7, #72	; 0x48
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40021000 	.word	0x40021000

08006710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e049      	b.n	80067b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fa fe22 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f000 f8fc 	bl	800694c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_TIM_ConfigClockSource+0x18>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e0b5      	b.n	8006942 <HAL_TIM_ConfigClockSource+0x184>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006800:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006812:	d03e      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0xd4>
 8006814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006818:	f200 8087 	bhi.w	800692a <HAL_TIM_ConfigClockSource+0x16c>
 800681c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006820:	f000 8085 	beq.w	800692e <HAL_TIM_ConfigClockSource+0x170>
 8006824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006828:	d87f      	bhi.n	800692a <HAL_TIM_ConfigClockSource+0x16c>
 800682a:	2b70      	cmp	r3, #112	; 0x70
 800682c:	d01a      	beq.n	8006864 <HAL_TIM_ConfigClockSource+0xa6>
 800682e:	2b70      	cmp	r3, #112	; 0x70
 8006830:	d87b      	bhi.n	800692a <HAL_TIM_ConfigClockSource+0x16c>
 8006832:	2b60      	cmp	r3, #96	; 0x60
 8006834:	d050      	beq.n	80068d8 <HAL_TIM_ConfigClockSource+0x11a>
 8006836:	2b60      	cmp	r3, #96	; 0x60
 8006838:	d877      	bhi.n	800692a <HAL_TIM_ConfigClockSource+0x16c>
 800683a:	2b50      	cmp	r3, #80	; 0x50
 800683c:	d03c      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0xfa>
 800683e:	2b50      	cmp	r3, #80	; 0x50
 8006840:	d873      	bhi.n	800692a <HAL_TIM_ConfigClockSource+0x16c>
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d058      	beq.n	80068f8 <HAL_TIM_ConfigClockSource+0x13a>
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d86f      	bhi.n	800692a <HAL_TIM_ConfigClockSource+0x16c>
 800684a:	2b30      	cmp	r3, #48	; 0x30
 800684c:	d064      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x15a>
 800684e:	2b30      	cmp	r3, #48	; 0x30
 8006850:	d86b      	bhi.n	800692a <HAL_TIM_ConfigClockSource+0x16c>
 8006852:	2b20      	cmp	r3, #32
 8006854:	d060      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x15a>
 8006856:	2b20      	cmp	r3, #32
 8006858:	d867      	bhi.n	800692a <HAL_TIM_ConfigClockSource+0x16c>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d05c      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x15a>
 800685e:	2b10      	cmp	r3, #16
 8006860:	d05a      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006862:	e062      	b.n	800692a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	6899      	ldr	r1, [r3, #8]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f000 f974 	bl	8006b60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006886:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	609a      	str	r2, [r3, #8]
      break;
 8006890:	e04e      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6899      	ldr	r1, [r3, #8]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f000 f95d 	bl	8006b60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068b4:	609a      	str	r2, [r3, #8]
      break;
 80068b6:	e03b      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6859      	ldr	r1, [r3, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	461a      	mov	r2, r3
 80068c6:	f000 f8d1 	bl	8006a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2150      	movs	r1, #80	; 0x50
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f92a 	bl	8006b2a <TIM_ITRx_SetConfig>
      break;
 80068d6:	e02b      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	6859      	ldr	r1, [r3, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	461a      	mov	r2, r3
 80068e6:	f000 f8f0 	bl	8006aca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2160      	movs	r1, #96	; 0x60
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 f91a 	bl	8006b2a <TIM_ITRx_SetConfig>
      break;
 80068f6:	e01b      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	6859      	ldr	r1, [r3, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	461a      	mov	r2, r3
 8006906:	f000 f8b1 	bl	8006a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2140      	movs	r1, #64	; 0x40
 8006910:	4618      	mov	r0, r3
 8006912:	f000 f90a 	bl	8006b2a <TIM_ITRx_SetConfig>
      break;
 8006916:	e00b      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 f901 	bl	8006b2a <TIM_ITRx_SetConfig>
        break;
 8006928:	e002      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800692a:	bf00      	nop
 800692c:	e000      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800692e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a3c      	ldr	r2, [pc, #240]	; (8006a50 <TIM_Base_SetConfig+0x104>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00f      	beq.n	8006984 <TIM_Base_SetConfig+0x38>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696a:	d00b      	beq.n	8006984 <TIM_Base_SetConfig+0x38>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a39      	ldr	r2, [pc, #228]	; (8006a54 <TIM_Base_SetConfig+0x108>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d007      	beq.n	8006984 <TIM_Base_SetConfig+0x38>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a38      	ldr	r2, [pc, #224]	; (8006a58 <TIM_Base_SetConfig+0x10c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0x38>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a37      	ldr	r2, [pc, #220]	; (8006a5c <TIM_Base_SetConfig+0x110>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d108      	bne.n	8006996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a2d      	ldr	r2, [pc, #180]	; (8006a50 <TIM_Base_SetConfig+0x104>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d01b      	beq.n	80069d6 <TIM_Base_SetConfig+0x8a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d017      	beq.n	80069d6 <TIM_Base_SetConfig+0x8a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <TIM_Base_SetConfig+0x108>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d013      	beq.n	80069d6 <TIM_Base_SetConfig+0x8a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a29      	ldr	r2, [pc, #164]	; (8006a58 <TIM_Base_SetConfig+0x10c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00f      	beq.n	80069d6 <TIM_Base_SetConfig+0x8a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a28      	ldr	r2, [pc, #160]	; (8006a5c <TIM_Base_SetConfig+0x110>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00b      	beq.n	80069d6 <TIM_Base_SetConfig+0x8a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a27      	ldr	r2, [pc, #156]	; (8006a60 <TIM_Base_SetConfig+0x114>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d007      	beq.n	80069d6 <TIM_Base_SetConfig+0x8a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a26      	ldr	r2, [pc, #152]	; (8006a64 <TIM_Base_SetConfig+0x118>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_Base_SetConfig+0x8a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a25      	ldr	r2, [pc, #148]	; (8006a68 <TIM_Base_SetConfig+0x11c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d108      	bne.n	80069e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a10      	ldr	r2, [pc, #64]	; (8006a50 <TIM_Base_SetConfig+0x104>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00f      	beq.n	8006a34 <TIM_Base_SetConfig+0xe8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a11      	ldr	r2, [pc, #68]	; (8006a5c <TIM_Base_SetConfig+0x110>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00b      	beq.n	8006a34 <TIM_Base_SetConfig+0xe8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a10      	ldr	r2, [pc, #64]	; (8006a60 <TIM_Base_SetConfig+0x114>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <TIM_Base_SetConfig+0xe8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a0f      	ldr	r2, [pc, #60]	; (8006a64 <TIM_Base_SetConfig+0x118>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_Base_SetConfig+0xe8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a0e      	ldr	r2, [pc, #56]	; (8006a68 <TIM_Base_SetConfig+0x11c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d103      	bne.n	8006a3c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	615a      	str	r2, [r3, #20]
}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800
 8006a5c:	40013400 	.word	0x40013400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f023 0201 	bic.w	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f023 030a 	bic.w	r3, r3, #10
 8006aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b087      	sub	sp, #28
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f023 0210 	bic.w	r2, r3, #16
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f043 0307 	orr.w	r3, r3, #7
 8006b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	021a      	lsls	r2, r3, #8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	609a      	str	r2, [r3, #8]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e063      	b.n	8006c80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a2b      	ldr	r2, [pc, #172]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d004      	beq.n	8006bec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2a      	ldr	r2, [pc, #168]	; (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d108      	bne.n	8006bfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1b      	ldr	r2, [pc, #108]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d018      	beq.n	8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2a:	d013      	beq.n	8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a18      	ldr	r2, [pc, #96]	; (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00e      	beq.n	8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a17      	ldr	r2, [pc, #92]	; (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d009      	beq.n	8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d004      	beq.n	8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a13      	ldr	r2, [pc, #76]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d10c      	bne.n	8006c6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40013400 	.word	0x40013400
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40014000 	.word	0x40014000

08006ca0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006cb0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006cb4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006cd6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006cda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4013      	ands	r3, r2
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d04:	b084      	sub	sp, #16
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	f107 0014 	add.w	r0, r7, #20
 8006d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	b004      	add	sp, #16
 8006d44:	4770      	bx	lr
	...

08006d48 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b09b      	sub	sp, #108	; 0x6c
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	78db      	ldrb	r3, [r3, #3]
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d81f      	bhi.n	8006dba <USB_ActivateEndpoint+0x72>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <USB_ActivateEndpoint+0x38>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006d91 	.word	0x08006d91
 8006d84:	08006dad 	.word	0x08006dad
 8006d88:	08006dc3 	.word	0x08006dc3
 8006d8c:	08006d9f 	.word	0x08006d9f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006d90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d98:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006d9c:	e012      	b.n	8006dc4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006da2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006da6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006daa:	e00b      	b.n	8006dc4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006dac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006db0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006db4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006db8:	e004      	b.n	8006dc4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006dc0:	e000      	b.n	8006dc4 <USB_ActivateEndpoint+0x7c>
      break;
 8006dc2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	441a      	add	r2, r3
 8006dce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	b21b      	sxth	r3, r3
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfe:	b21a      	sxth	r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	b21b      	sxth	r3, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	b21b      	sxth	r3, r3
 8006e0a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	7b1b      	ldrb	r3, [r3, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 8149 	bne.w	80070cc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 8084 	beq.w	8006f4c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4413      	add	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	011a      	lsls	r2, r3, #4
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	88db      	ldrh	r3, [r3, #6]
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	81fb      	strh	r3, [r7, #14]
 8006e86:	89fb      	ldrh	r3, [r7, #14]
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01b      	beq.n	8006ec8 <USB_ActivateEndpoint+0x180>
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea6:	81bb      	strh	r3, [r7, #12]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	441a      	add	r2, r3
 8006eb2:	89bb      	ldrh	r3, [r7, #12]
 8006eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	78db      	ldrb	r3, [r3, #3]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d020      	beq.n	8006f12 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee6:	813b      	strh	r3, [r7, #8]
 8006ee8:	893b      	ldrh	r3, [r7, #8]
 8006eea:	f083 0320 	eor.w	r3, r3, #32
 8006eee:	813b      	strh	r3, [r7, #8]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	441a      	add	r2, r3
 8006efa:	893b      	ldrh	r3, [r7, #8]
 8006efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	8013      	strh	r3, [r2, #0]
 8006f10:	e27f      	b.n	8007412 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f28:	817b      	strh	r3, [r7, #10]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	441a      	add	r2, r3
 8006f34:	897b      	ldrh	r3, [r7, #10]
 8006f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	8013      	strh	r3, [r2, #0]
 8006f4a:	e262      	b.n	8007412 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	4413      	add	r3, r2
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	011a      	lsls	r2, r3, #4
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	88db      	ldrh	r3, [r3, #6]
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	4413      	add	r3, r2
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	011a      	lsls	r2, r3, #4
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fa2:	623b      	str	r3, [r7, #32]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d112      	bne.n	8006fd2 <USB_ActivateEndpoint+0x28a>
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e02f      	b.n	8007032 <USB_ActivateEndpoint+0x2ea>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006fd8:	d813      	bhi.n	8007002 <USB_ActivateEndpoint+0x2ba>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <USB_ActivateEndpoint+0x2ac>
 8006fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	029b      	lsls	r3, r3, #10
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e017      	b.n	8007032 <USB_ActivateEndpoint+0x2ea>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	663b      	str	r3, [r7, #96]	; 0x60
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <USB_ActivateEndpoint+0x2d4>
 8007016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007018:	3b01      	subs	r3, #1
 800701a:	663b      	str	r3, [r7, #96]	; 0x60
 800701c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800701e:	b29b      	uxth	r3, r3
 8007020:	029b      	lsls	r3, r3, #10
 8007022:	b29b      	uxth	r3, r3
 8007024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702c:	b29a      	uxth	r2, r3
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	83fb      	strh	r3, [r7, #30]
 8007040:	8bfb      	ldrh	r3, [r7, #30]
 8007042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01b      	beq.n	8007082 <USB_ActivateEndpoint+0x33a>
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007060:	83bb      	strh	r3, [r7, #28]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	441a      	add	r2, r3
 800706c:	8bbb      	ldrh	r3, [r7, #28]
 800706e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800707a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707e:	b29b      	uxth	r3, r3
 8007080:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007098:	837b      	strh	r3, [r7, #26]
 800709a:	8b7b      	ldrh	r3, [r7, #26]
 800709c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070a0:	837b      	strh	r3, [r7, #26]
 80070a2:	8b7b      	ldrh	r3, [r7, #26]
 80070a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070a8:	837b      	strh	r3, [r7, #26]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	441a      	add	r2, r3
 80070b4:	8b7b      	ldrh	r3, [r7, #26]
 80070b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	8013      	strh	r3, [r2, #0]
 80070ca:	e1a2      	b.n	8007412 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	441a      	add	r2, r3
 80070f0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80070f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007104:	b29b      	uxth	r3, r3
 8007106:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	65bb      	str	r3, [r7, #88]	; 0x58
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007112:	b29b      	uxth	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007118:	4413      	add	r3, r2
 800711a:	65bb      	str	r3, [r7, #88]	; 0x58
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	011a      	lsls	r2, r3, #4
 8007122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007124:	4413      	add	r3, r2
 8007126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800712a:	657b      	str	r3, [r7, #84]	; 0x54
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	891b      	ldrh	r3, [r3, #8]
 8007130:	085b      	lsrs	r3, r3, #1
 8007132:	b29b      	uxth	r3, r3
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800713a:	801a      	strh	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	653b      	str	r3, [r7, #80]	; 0x50
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007146:	b29b      	uxth	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800714c:	4413      	add	r3, r2
 800714e:	653b      	str	r3, [r7, #80]	; 0x50
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	011a      	lsls	r2, r3, #4
 8007156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007158:	4413      	add	r3, r2
 800715a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800715e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	895b      	ldrh	r3, [r3, #10]
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	785b      	ldrb	r3, [r3, #1]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f040 8091 	bne.w	800729c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007188:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800718a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01b      	beq.n	80071ca <USB_ActivateEndpoint+0x482>
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	441a      	add	r2, r3
 80071b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80071b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	873b      	strh	r3, [r7, #56]	; 0x38
 80071d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d01b      	beq.n	800721a <USB_ActivateEndpoint+0x4d2>
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	441a      	add	r2, r3
 8007204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007212:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007216:	b29b      	uxth	r3, r3
 8007218:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800722c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007230:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007232:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007234:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007238:	86bb      	strh	r3, [r7, #52]	; 0x34
 800723a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800723c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007240:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	441a      	add	r2, r3
 800724c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800724e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725e:	b29b      	uxth	r3, r3
 8007260:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007278:	867b      	strh	r3, [r7, #50]	; 0x32
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	441a      	add	r2, r3
 8007284:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800728a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800728e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007296:	b29b      	uxth	r3, r3
 8007298:	8013      	strh	r3, [r2, #0]
 800729a:	e0ba      	b.n	8007412 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80072ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80072b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01d      	beq.n	80072f4 <USB_ActivateEndpoint+0x5ac>
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80072e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007304:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01d      	beq.n	800734c <USB_ActivateEndpoint+0x604>
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800733c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007344:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007348:	b29b      	uxth	r3, r3
 800734a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	78db      	ldrb	r3, [r3, #3]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d024      	beq.n	800739e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	b29b      	uxth	r3, r3
 8007362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800736a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800736e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007372:	f083 0320 	eor.w	r3, r3, #32
 8007376:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	441a      	add	r2, r3
 8007384:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800738c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007398:	b29b      	uxth	r3, r3
 800739a:	8013      	strh	r3, [r2, #0]
 800739c:	e01d      	b.n	80073da <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	441a      	add	r2, r3
 80073c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80073c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	441a      	add	r2, r3
 80073fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80073fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800740e:	b29b      	uxth	r3, r3
 8007410:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007412:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007416:	4618      	mov	r0, r3
 8007418:	376c      	adds	r7, #108	; 0x6c
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop

08007424 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007424:	b480      	push	{r7}
 8007426:	b08d      	sub	sp, #52	; 0x34
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	7b1b      	ldrb	r3, [r3, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f040 808e 	bne.w	8007554 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	785b      	ldrb	r3, [r3, #1]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d044      	beq.n	80074ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	81bb      	strh	r3, [r7, #12]
 800744e:	89bb      	ldrh	r3, [r7, #12]
 8007450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01b      	beq.n	8007490 <USB_DeactivateEndpoint+0x6c>
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746e:	817b      	strh	r3, [r7, #10]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	441a      	add	r2, r3
 800747a:	897b      	ldrh	r3, [r7, #10]
 800747c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007488:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800748c:	b29b      	uxth	r3, r3
 800748e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a6:	813b      	strh	r3, [r7, #8]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	441a      	add	r2, r3
 80074b2:	893b      	ldrh	r3, [r7, #8]
 80074b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	8013      	strh	r3, [r2, #0]
 80074c8:	e192      	b.n	80077f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	827b      	strh	r3, [r7, #18]
 80074d8:	8a7b      	ldrh	r3, [r7, #18]
 80074da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d01b      	beq.n	800751a <USB_DeactivateEndpoint+0xf6>
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f8:	823b      	strh	r3, [r7, #16]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	441a      	add	r2, r3
 8007504:	8a3b      	ldrh	r3, [r7, #16]
 8007506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800750e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007516:	b29b      	uxth	r3, r3
 8007518:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007530:	81fb      	strh	r3, [r7, #14]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	89fb      	ldrh	r3, [r7, #14]
 800753e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800754a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754e:	b29b      	uxth	r3, r3
 8007550:	8013      	strh	r3, [r2, #0]
 8007552:	e14d      	b.n	80077f0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f040 80a5 	bne.w	80076a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	843b      	strh	r3, [r7, #32]
 800756c:	8c3b      	ldrh	r3, [r7, #32]
 800756e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01b      	beq.n	80075ae <USB_DeactivateEndpoint+0x18a>
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758c:	83fb      	strh	r3, [r7, #30]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	441a      	add	r2, r3
 8007598:	8bfb      	ldrh	r3, [r7, #30]
 800759a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800759e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	83bb      	strh	r3, [r7, #28]
 80075bc:	8bbb      	ldrh	r3, [r7, #28]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01b      	beq.n	80075fe <USB_DeactivateEndpoint+0x1da>
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075dc:	837b      	strh	r3, [r7, #26]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	441a      	add	r2, r3
 80075e8:	8b7b      	ldrh	r3, [r7, #26]
 80075ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007614:	833b      	strh	r3, [r7, #24]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	441a      	add	r2, r3
 8007620:	8b3b      	ldrh	r3, [r7, #24]
 8007622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800762a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800762e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007632:	b29b      	uxth	r3, r3
 8007634:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764c:	82fb      	strh	r3, [r7, #22]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	441a      	add	r2, r3
 8007658:	8afb      	ldrh	r3, [r7, #22]
 800765a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800765e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766a:	b29b      	uxth	r3, r3
 800766c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007684:	82bb      	strh	r3, [r7, #20]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	441a      	add	r2, r3
 8007690:	8abb      	ldrh	r3, [r7, #20]
 8007692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800769a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	8013      	strh	r3, [r2, #0]
 80076a6:	e0a3      	b.n	80077f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80076b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01b      	beq.n	80076f8 <USB_DeactivateEndpoint+0x2d4>
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	441a      	add	r2, r3
 80076e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80076e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007706:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01b      	beq.n	8007748 <USB_DeactivateEndpoint+0x324>
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007726:	853b      	strh	r3, [r7, #40]	; 0x28
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	441a      	add	r2, r3
 8007732:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800773c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007740:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007744:	b29b      	uxth	r3, r3
 8007746:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800775a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	441a      	add	r2, r3
 800776a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800776c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777c:	b29b      	uxth	r3, r3
 800777e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
 800778e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007796:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	441a      	add	r2, r3
 80077a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	441a      	add	r2, r3
 80077da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3734      	adds	r7, #52	; 0x34
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b0c4      	sub	sp, #272	; 0x110
 8007802:	af00      	add	r7, sp, #0
 8007804:	1d3b      	adds	r3, r7, #4
 8007806:	6018      	str	r0, [r3, #0]
 8007808:	463b      	mov	r3, r7
 800780a:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800780c:	463b      	mov	r3, r7
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b01      	cmp	r3, #1
 8007814:	f040 8557 	bne.w	80082c6 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007818:	463b      	mov	r3, r7
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	463b      	mov	r3, r7
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	429a      	cmp	r2, r3
 8007826:	d905      	bls.n	8007834 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007828:	463b      	mov	r3, r7
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007832:	e004      	b.n	800783e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007834:	463b      	mov	r3, r7
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800783e:	463b      	mov	r3, r7
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	7b1b      	ldrb	r3, [r3, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d12c      	bne.n	80078a2 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007848:	463b      	mov	r3, r7
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6959      	ldr	r1, [r3, #20]
 800784e:	463b      	mov	r3, r7
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	88da      	ldrh	r2, [r3, #6]
 8007854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007858:	b29b      	uxth	r3, r3
 800785a:	1d38      	adds	r0, r7, #4
 800785c:	6800      	ldr	r0, [r0, #0]
 800785e:	f001 fa1c 	bl	8008c9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007862:	1d3b      	adds	r3, r7, #4
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	1d3b      	adds	r3, r7, #4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007870:	b29b      	uxth	r3, r3
 8007872:	461a      	mov	r2, r3
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	4413      	add	r3, r2
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	463b      	mov	r3, r7
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	011a      	lsls	r2, r3, #4
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	4413      	add	r3, r2
 8007886:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800788a:	f107 0310 	add.w	r3, r7, #16
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007894:	b29a      	uxth	r2, r3
 8007896:	f107 0310 	add.w	r3, r7, #16
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	801a      	strh	r2, [r3, #0]
 800789e:	f000 bcdd 	b.w	800825c <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80078a2:	463b      	mov	r3, r7
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	78db      	ldrb	r3, [r3, #3]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	f040 8347 	bne.w	8007f3c <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80078ae:	463b      	mov	r3, r7
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6a1a      	ldr	r2, [r3, #32]
 80078b4:	463b      	mov	r3, r7
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	f240 82eb 	bls.w	8007e96 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	463b      	mov	r3, r7
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078da:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80078de:	1d3b      	adds	r3, r7, #4
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	463b      	mov	r3, r7
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	441a      	add	r2, r3
 80078ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80078f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007900:	b29b      	uxth	r3, r3
 8007902:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007904:	463b      	mov	r3, r7
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a1a      	ldr	r2, [r3, #32]
 800790a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800790e:	1ad2      	subs	r2, r2, r3
 8007910:	463b      	mov	r3, r7
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007916:	1d3b      	adds	r3, r7, #4
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	463b      	mov	r3, r7
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8159 	beq.w	8007be4 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007932:	1d3b      	adds	r3, r7, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
 8007938:	463b      	mov	r3, r7
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d164      	bne.n	8007a0c <USB_EPStartXfer+0x20e>
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007948:	1d3b      	adds	r3, r7, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007950:	b29b      	uxth	r3, r3
 8007952:	461a      	mov	r2, r3
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007956:	4413      	add	r3, r2
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800795a:	463b      	mov	r3, r7
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	011a      	lsls	r2, r3, #4
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	4413      	add	r3, r2
 8007966:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28
 800796c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d112      	bne.n	800799a <USB_EPStartXfer+0x19c>
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800797e:	b29a      	uxth	r2, r3
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007992:	b29a      	uxth	r2, r3
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	e054      	b.n	8007a44 <USB_EPStartXfer+0x246>
 800799a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800799e:	2b3e      	cmp	r3, #62	; 0x3e
 80079a0:	d817      	bhi.n	80079d2 <USB_EPStartXfer+0x1d4>
 80079a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a6:	085b      	lsrs	r3, r3, #1
 80079a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d004      	beq.n	80079c2 <USB_EPStartXfer+0x1c4>
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079bc:	3301      	adds	r3, #1
 80079be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	029b      	lsls	r3, r3, #10
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	801a      	strh	r2, [r3, #0]
 80079d0:	e038      	b.n	8007a44 <USB_EPStartXfer+0x246>
 80079d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e0:	f003 031f 	and.w	r3, r3, #31
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <USB_EPStartXfer+0x1f4>
 80079e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ec:	3b01      	subs	r3, #1
 80079ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	029b      	lsls	r3, r3, #10
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	e01b      	b.n	8007a44 <USB_EPStartXfer+0x246>
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d116      	bne.n	8007a44 <USB_EPStartXfer+0x246>
 8007a16:	1d3b      	adds	r3, r7, #4
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a24:	4413      	add	r3, r2
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34
 8007a28:	463b      	mov	r3, r7
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	011a      	lsls	r2, r3, #4
 8007a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a32:	4413      	add	r3, r2
 8007a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a38:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a44:	463b      	mov	r3, r7
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	895b      	ldrh	r3, [r3, #10]
 8007a4a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a4e:	463b      	mov	r3, r7
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6959      	ldr	r1, [r3, #20]
 8007a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007a5e:	1d38      	adds	r0, r7, #4
 8007a60:	6800      	ldr	r0, [r0, #0]
 8007a62:	f001 f91a 	bl	8008c9a <USB_WritePMA>
            ep->xfer_buff += len;
 8007a66:	463b      	mov	r3, r7
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	695a      	ldr	r2, [r3, #20]
 8007a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a70:	441a      	add	r2, r3
 8007a72:	463b      	mov	r3, r7
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a78:	463b      	mov	r3, r7
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6a1a      	ldr	r2, [r3, #32]
 8007a7e:	463b      	mov	r3, r7
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d909      	bls.n	8007a9c <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007a88:	463b      	mov	r3, r7
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a92:	1ad2      	subs	r2, r2, r3
 8007a94:	463b      	mov	r3, r7
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	621a      	str	r2, [r3, #32]
 8007a9a:	e008      	b.n	8007aae <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a9c:	463b      	mov	r3, r7
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007aae:	463b      	mov	r3, r7
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d164      	bne.n	8007b82 <USB_EPStartXfer+0x384>
 8007ab8:	1d3b      	adds	r3, r7, #4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	61fb      	str	r3, [r7, #28]
 8007abe:	1d3b      	adds	r3, r7, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	011a      	lsls	r2, r3, #4
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d112      	bne.n	8007b10 <USB_EPStartXfer+0x312>
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	801a      	strh	r2, [r3, #0]
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	801a      	strh	r2, [r3, #0]
 8007b0e:	e057      	b.n	8007bc0 <USB_EPStartXfer+0x3c2>
 8007b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b14:	2b3e      	cmp	r3, #62	; 0x3e
 8007b16:	d817      	bhi.n	8007b48 <USB_EPStartXfer+0x34a>
 8007b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b1c:	085b      	lsrs	r3, r3, #1
 8007b1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d004      	beq.n	8007b38 <USB_EPStartXfer+0x33a>
 8007b2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b32:	3301      	adds	r3, #1
 8007b34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	029b      	lsls	r3, r3, #10
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e03b      	b.n	8007bc0 <USB_EPStartXfer+0x3c2>
 8007b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d104      	bne.n	8007b68 <USB_EPStartXfer+0x36a>
 8007b5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b62:	3b01      	subs	r3, #1
 8007b64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	029b      	lsls	r3, r3, #10
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	e01e      	b.n	8007bc0 <USB_EPStartXfer+0x3c2>
 8007b82:	463b      	mov	r3, r7
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	785b      	ldrb	r3, [r3, #1]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d119      	bne.n	8007bc0 <USB_EPStartXfer+0x3c2>
 8007b8c:	1d3b      	adds	r3, r7, #4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
 8007b92:	1d3b      	adds	r3, r7, #4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	4413      	add	r3, r2
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba4:	463b      	mov	r3, r7
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	011a      	lsls	r2, r3, #4
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	4413      	add	r3, r2
 8007bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bb4:	623b      	str	r3, [r7, #32]
 8007bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	891b      	ldrh	r3, [r3, #8]
 8007bc6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bca:	463b      	mov	r3, r7
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6959      	ldr	r1, [r3, #20]
 8007bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007bda:	1d38      	adds	r0, r7, #4
 8007bdc:	6800      	ldr	r0, [r0, #0]
 8007bde:	f001 f85c 	bl	8008c9a <USB_WritePMA>
 8007be2:	e33b      	b.n	800825c <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007be4:	463b      	mov	r3, r7
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d164      	bne.n	8007cb8 <USB_EPStartXfer+0x4ba>
 8007bee:	1d3b      	adds	r3, r7, #4
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf4:	1d3b      	adds	r3, r7, #4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c02:	4413      	add	r3, r2
 8007c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c06:	463b      	mov	r3, r7
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	011a      	lsls	r2, r3, #4
 8007c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c10:	4413      	add	r3, r2
 8007c12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d112      	bne.n	8007c46 <USB_EPStartXfer+0x448>
 8007c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e057      	b.n	8007cf6 <USB_EPStartXfer+0x4f8>
 8007c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c4c:	d817      	bhi.n	8007c7e <USB_EPStartXfer+0x480>
 8007c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <USB_EPStartXfer+0x470>
 8007c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c68:	3301      	adds	r3, #1
 8007c6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	029b      	lsls	r3, r3, #10
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c7a:	801a      	strh	r2, [r3, #0]
 8007c7c:	e03b      	b.n	8007cf6 <USB_EPStartXfer+0x4f8>
 8007c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <USB_EPStartXfer+0x4a0>
 8007c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	029b      	lsls	r3, r3, #10
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb4:	801a      	strh	r2, [r3, #0]
 8007cb6:	e01e      	b.n	8007cf6 <USB_EPStartXfer+0x4f8>
 8007cb8:	463b      	mov	r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d119      	bne.n	8007cf6 <USB_EPStartXfer+0x4f8>
 8007cc2:	1d3b      	adds	r3, r7, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8007cc8:	1d3b      	adds	r3, r7, #4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd6:	4413      	add	r3, r2
 8007cd8:	657b      	str	r3, [r7, #84]	; 0x54
 8007cda:	463b      	mov	r3, r7
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	011a      	lsls	r2, r3, #4
 8007ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cea:	653b      	str	r3, [r7, #80]	; 0x50
 8007cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	891b      	ldrh	r3, [r3, #8]
 8007cfc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d00:	463b      	mov	r3, r7
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6959      	ldr	r1, [r3, #20]
 8007d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007d10:	1d38      	adds	r0, r7, #4
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	f000 ffc1 	bl	8008c9a <USB_WritePMA>
            ep->xfer_buff += len;
 8007d18:	463b      	mov	r3, r7
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695a      	ldr	r2, [r3, #20]
 8007d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d22:	441a      	add	r2, r3
 8007d24:	463b      	mov	r3, r7
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6a1a      	ldr	r2, [r3, #32]
 8007d30:	463b      	mov	r3, r7
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d909      	bls.n	8007d4e <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6a1a      	ldr	r2, [r3, #32]
 8007d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d44:	1ad2      	subs	r2, r2, r3
 8007d46:	463b      	mov	r3, r7
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	621a      	str	r2, [r3, #32]
 8007d4c:	e008      	b.n	8007d60 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d4e:	463b      	mov	r3, r7
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007d58:	463b      	mov	r3, r7
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d60:	1d3b      	adds	r3, r7, #4
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	647b      	str	r3, [r7, #68]	; 0x44
 8007d66:	463b      	mov	r3, r7
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d164      	bne.n	8007e3a <USB_EPStartXfer+0x63c>
 8007d70:	1d3b      	adds	r3, r7, #4
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d76:	1d3b      	adds	r3, r7, #4
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d84:	4413      	add	r3, r2
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d88:	463b      	mov	r3, r7
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	011a      	lsls	r2, r3, #4
 8007d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d92:	4413      	add	r3, r2
 8007d94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d112      	bne.n	8007dc8 <USB_EPStartXfer+0x5ca>
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	e054      	b.n	8007e72 <USB_EPStartXfer+0x674>
 8007dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dcc:	2b3e      	cmp	r3, #62	; 0x3e
 8007dce:	d817      	bhi.n	8007e00 <USB_EPStartXfer+0x602>
 8007dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dd4:	085b      	lsrs	r3, r3, #1
 8007dd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <USB_EPStartXfer+0x5f2>
 8007de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dea:	3301      	adds	r3, #1
 8007dec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007df0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	029b      	lsls	r3, r3, #10
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	801a      	strh	r2, [r3, #0]
 8007dfe:	e038      	b.n	8007e72 <USB_EPStartXfer+0x674>
 8007e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d104      	bne.n	8007e20 <USB_EPStartXfer+0x622>
 8007e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	029b      	lsls	r3, r3, #10
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	801a      	strh	r2, [r3, #0]
 8007e38:	e01b      	b.n	8007e72 <USB_EPStartXfer+0x674>
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d116      	bne.n	8007e72 <USB_EPStartXfer+0x674>
 8007e44:	1d3b      	adds	r3, r7, #4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e52:	4413      	add	r3, r2
 8007e54:	647b      	str	r3, [r7, #68]	; 0x44
 8007e56:	463b      	mov	r3, r7
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	011a      	lsls	r2, r3, #4
 8007e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e66:	643b      	str	r3, [r7, #64]	; 0x40
 8007e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e72:	463b      	mov	r3, r7
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	895b      	ldrh	r3, [r3, #10]
 8007e78:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6959      	ldr	r1, [r3, #20]
 8007e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007e8c:	1d38      	adds	r0, r7, #4
 8007e8e:	6800      	ldr	r0, [r0, #0]
 8007e90:	f000 ff03 	bl	8008c9a <USB_WritePMA>
 8007e94:	e1e2      	b.n	800825c <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e96:	463b      	mov	r3, r7
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007ea0:	1d3b      	adds	r3, r7, #4
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007ebe:	1d3b      	adds	r3, r7, #4
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	463b      	mov	r3, r7
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	441a      	add	r2, r3
 8007ecc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ee4:	1d3b      	adds	r3, r7, #4
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8007eea:	1d3b      	adds	r3, r7, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ef8:	4413      	add	r3, r2
 8007efa:	663b      	str	r3, [r7, #96]	; 0x60
 8007efc:	463b      	mov	r3, r7
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	011a      	lsls	r2, r3, #4
 8007f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f06:	4413      	add	r3, r2
 8007f08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f18:	463b      	mov	r3, r7
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	891b      	ldrh	r3, [r3, #8]
 8007f1e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f22:	463b      	mov	r3, r7
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6959      	ldr	r1, [r3, #20]
 8007f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007f32:	1d38      	adds	r0, r7, #4
 8007f34:	6800      	ldr	r0, [r0, #0]
 8007f36:	f000 feb0 	bl	8008c9a <USB_WritePMA>
 8007f3a:	e18f      	b.n	800825c <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f3c:	1d3b      	adds	r3, r7, #4
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	463b      	mov	r3, r7
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 808f 	beq.w	8008076 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f58:	1d3b      	adds	r3, r7, #4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f5e:	463b      	mov	r3, r7
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	785b      	ldrb	r3, [r3, #1]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d164      	bne.n	8008032 <USB_EPStartXfer+0x834>
 8007f68:	1d3b      	adds	r3, r7, #4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	673b      	str	r3, [r7, #112]	; 0x70
 8007f6e:	1d3b      	adds	r3, r7, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f7c:	4413      	add	r3, r2
 8007f7e:	673b      	str	r3, [r7, #112]	; 0x70
 8007f80:	463b      	mov	r3, r7
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	011a      	lsls	r2, r3, #4
 8007f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d112      	bne.n	8007fc0 <USB_EPStartXfer+0x7c2>
 8007f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa8:	801a      	strh	r2, [r3, #0]
 8007faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbc:	801a      	strh	r2, [r3, #0]
 8007fbe:	e054      	b.n	800806a <USB_EPStartXfer+0x86c>
 8007fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8007fc6:	d817      	bhi.n	8007ff8 <USB_EPStartXfer+0x7fa>
 8007fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fcc:	085b      	lsrs	r3, r3, #1
 8007fce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <USB_EPStartXfer+0x7ea>
 8007fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	029b      	lsls	r3, r3, #10
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	e038      	b.n	800806a <USB_EPStartXfer+0x86c>
 8007ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008006:	f003 031f 	and.w	r3, r3, #31
 800800a:	2b00      	cmp	r3, #0
 800800c:	d104      	bne.n	8008018 <USB_EPStartXfer+0x81a>
 800800e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008012:	3b01      	subs	r3, #1
 8008014:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	b29b      	uxth	r3, r3
 800801e:	029b      	lsls	r3, r3, #10
 8008020:	b29b      	uxth	r3, r3
 8008022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802a:	b29a      	uxth	r2, r3
 800802c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802e:	801a      	strh	r2, [r3, #0]
 8008030:	e01b      	b.n	800806a <USB_EPStartXfer+0x86c>
 8008032:	463b      	mov	r3, r7
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	785b      	ldrb	r3, [r3, #1]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d116      	bne.n	800806a <USB_EPStartXfer+0x86c>
 800803c:	1d3b      	adds	r3, r7, #4
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008044:	b29b      	uxth	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800804a:	4413      	add	r3, r2
 800804c:	67bb      	str	r3, [r7, #120]	; 0x78
 800804e:	463b      	mov	r3, r7
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	011a      	lsls	r2, r3, #4
 8008056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008058:	4413      	add	r3, r2
 800805a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800805e:	677b      	str	r3, [r7, #116]	; 0x74
 8008060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008064:	b29a      	uxth	r2, r3
 8008066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008068:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800806a:	463b      	mov	r3, r7
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	895b      	ldrh	r3, [r3, #10]
 8008070:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8008074:	e097      	b.n	80081a6 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008076:	463b      	mov	r3, r7
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d168      	bne.n	8008152 <USB_EPStartXfer+0x954>
 8008080:	1d3b      	adds	r3, r7, #4
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008088:	1d3b      	adds	r3, r7, #4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008090:	b29b      	uxth	r3, r3
 8008092:	461a      	mov	r2, r3
 8008094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008098:	4413      	add	r3, r2
 800809a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800809e:	463b      	mov	r3, r7
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	011a      	lsls	r2, r3, #4
 80080a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080aa:	4413      	add	r3, r2
 80080ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d112      	bne.n	80080e0 <USB_EPStartXfer+0x8e2>
 80080ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080c8:	801a      	strh	r2, [r3, #0]
 80080ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d8:	b29a      	uxth	r2, r3
 80080da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080dc:	801a      	strh	r2, [r3, #0]
 80080de:	e05d      	b.n	800819c <USB_EPStartXfer+0x99e>
 80080e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080e4:	2b3e      	cmp	r3, #62	; 0x3e
 80080e6:	d817      	bhi.n	8008118 <USB_EPStartXfer+0x91a>
 80080e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080ec:	085b      	lsrs	r3, r3, #1
 80080ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d004      	beq.n	8008108 <USB_EPStartXfer+0x90a>
 80080fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008102:	3301      	adds	r3, #1
 8008104:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008108:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800810c:	b29b      	uxth	r3, r3
 800810e:	029b      	lsls	r3, r3, #10
 8008110:	b29a      	uxth	r2, r3
 8008112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	e041      	b.n	800819c <USB_EPStartXfer+0x99e>
 8008118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008126:	f003 031f 	and.w	r3, r3, #31
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <USB_EPStartXfer+0x93a>
 800812e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008132:	3b01      	subs	r3, #1
 8008134:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008138:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800813c:	b29b      	uxth	r3, r3
 800813e:	029b      	lsls	r3, r3, #10
 8008140:	b29b      	uxth	r3, r3
 8008142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814a:	b29a      	uxth	r2, r3
 800814c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800814e:	801a      	strh	r2, [r3, #0]
 8008150:	e024      	b.n	800819c <USB_EPStartXfer+0x99e>
 8008152:	463b      	mov	r3, r7
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d11f      	bne.n	800819c <USB_EPStartXfer+0x99e>
 800815c:	1d3b      	adds	r3, r7, #4
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800816c:	b29b      	uxth	r3, r3
 800816e:	461a      	mov	r2, r3
 8008170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008174:	4413      	add	r3, r2
 8008176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800817a:	463b      	mov	r3, r7
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	011a      	lsls	r2, r3, #4
 8008182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008186:	4413      	add	r3, r2
 8008188:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800818c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008194:	b29a      	uxth	r2, r3
 8008196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800819a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800819c:	463b      	mov	r3, r7
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	891b      	ldrh	r3, [r3, #8]
 80081a2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081a6:	463b      	mov	r3, r7
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6959      	ldr	r1, [r3, #20]
 80081ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80081b6:	1d38      	adds	r0, r7, #4
 80081b8:	6800      	ldr	r0, [r0, #0]
 80081ba:	f000 fd6e 	bl	8008c9a <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80081be:	463b      	mov	r3, r7
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d122      	bne.n	800820e <USB_EPStartXfer+0xa10>
 80081c8:	1d3b      	adds	r3, r7, #4
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	463b      	mov	r3, r7
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80081e6:	1d3b      	adds	r3, r7, #4
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	463b      	mov	r3, r7
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	441a      	add	r2, r3
 80081f4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80081f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008204:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008208:	b29b      	uxth	r3, r3
 800820a:	8013      	strh	r3, [r2, #0]
 800820c:	e026      	b.n	800825c <USB_EPStartXfer+0xa5e>
 800820e:	463b      	mov	r3, r7
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d121      	bne.n	800825c <USB_EPStartXfer+0xa5e>
 8008218:	1d3b      	adds	r3, r7, #4
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	463b      	mov	r3, r7
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800822e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008232:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008236:	1d3b      	adds	r3, r7, #4
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	463b      	mov	r3, r7
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	441a      	add	r2, r3
 8008244:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008258:	b29b      	uxth	r3, r3
 800825a:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800825c:	1d3b      	adds	r3, r7, #4
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	463b      	mov	r3, r7
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f107 020e 	add.w	r2, r7, #14
 8008272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800827a:	8013      	strh	r3, [r2, #0]
 800827c:	f107 030e 	add.w	r3, r7, #14
 8008280:	f107 020e 	add.w	r2, r7, #14
 8008284:	8812      	ldrh	r2, [r2, #0]
 8008286:	f082 0210 	eor.w	r2, r2, #16
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	f107 030e 	add.w	r3, r7, #14
 8008290:	f107 020e 	add.w	r2, r7, #14
 8008294:	8812      	ldrh	r2, [r2, #0]
 8008296:	f082 0220 	eor.w	r2, r2, #32
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	1d3b      	adds	r3, r7, #4
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	463b      	mov	r3, r7
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	441a      	add	r2, r3
 80082aa:	f107 030e 	add.w	r3, r7, #14
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	8013      	strh	r3, [r2, #0]
 80082c4:	e3b5      	b.n	8008a32 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082c6:	463b      	mov	r3, r7
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	7b1b      	ldrb	r3, [r3, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8090 	bne.w	80083f2 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80082d2:	463b      	mov	r3, r7
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699a      	ldr	r2, [r3, #24]
 80082d8:	463b      	mov	r3, r7
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d90e      	bls.n	8008300 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80082e2:	463b      	mov	r3, r7
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80082ec:	463b      	mov	r3, r7
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082f6:	1ad2      	subs	r2, r2, r3
 80082f8:	463b      	mov	r3, r7
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	619a      	str	r2, [r3, #24]
 80082fe:	e008      	b.n	8008312 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008300:	463b      	mov	r3, r7
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800830a:	463b      	mov	r3, r7
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2200      	movs	r2, #0
 8008310:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008312:	1d3b      	adds	r3, r7, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800831a:	1d3b      	adds	r3, r7, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008322:	b29b      	uxth	r3, r3
 8008324:	461a      	mov	r2, r3
 8008326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800832a:	4413      	add	r3, r2
 800832c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008330:	463b      	mov	r3, r7
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	011a      	lsls	r2, r3, #4
 8008338:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800833c:	4413      	add	r3, r2
 800833e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d116      	bne.n	800837c <USB_EPStartXfer+0xb7e>
 800834e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800835a:	b29a      	uxth	r2, r3
 800835c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008360:	801a      	strh	r2, [r3, #0]
 8008362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	e32c      	b.n	80089d6 <USB_EPStartXfer+0x11d8>
 800837c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008380:	2b3e      	cmp	r3, #62	; 0x3e
 8008382:	d818      	bhi.n	80083b6 <USB_EPStartXfer+0xbb8>
 8008384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008388:	085b      	lsrs	r3, r3, #1
 800838a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800838e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d004      	beq.n	80083a4 <USB_EPStartXfer+0xba6>
 800839a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800839e:	3301      	adds	r3, #1
 80083a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	029b      	lsls	r3, r3, #10
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083b2:	801a      	strh	r2, [r3, #0]
 80083b4:	e30f      	b.n	80089d6 <USB_EPStartXfer+0x11d8>
 80083b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083c4:	f003 031f 	and.w	r3, r3, #31
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d104      	bne.n	80083d6 <USB_EPStartXfer+0xbd8>
 80083cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083d0:	3b01      	subs	r3, #1
 80083d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083da:	b29b      	uxth	r3, r3
 80083dc:	029b      	lsls	r3, r3, #10
 80083de:	b29b      	uxth	r3, r3
 80083e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	e2f1      	b.n	80089d6 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80083f2:	463b      	mov	r3, r7
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	78db      	ldrb	r3, [r3, #3]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	f040 818f 	bne.w	800871c <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80083fe:	463b      	mov	r3, r7
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	785b      	ldrb	r3, [r3, #1]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d175      	bne.n	80084f4 <USB_EPStartXfer+0xcf6>
 8008408:	1d3b      	adds	r3, r7, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008410:	1d3b      	adds	r3, r7, #4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008418:	b29b      	uxth	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008420:	4413      	add	r3, r2
 8008422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008426:	463b      	mov	r3, r7
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	011a      	lsls	r2, r3, #4
 800842e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008432:	4413      	add	r3, r2
 8008434:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008438:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800843c:	463b      	mov	r3, r7
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d116      	bne.n	8008474 <USB_EPStartXfer+0xc76>
 8008446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29b      	uxth	r3, r3
 800844e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008452:	b29a      	uxth	r2, r3
 8008454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008458:	801a      	strh	r2, [r3, #0]
 800845a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846a:	b29a      	uxth	r2, r3
 800846c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	e065      	b.n	8008540 <USB_EPStartXfer+0xd42>
 8008474:	463b      	mov	r3, r7
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b3e      	cmp	r3, #62	; 0x3e
 800847c:	d81a      	bhi.n	80084b4 <USB_EPStartXfer+0xcb6>
 800847e:	463b      	mov	r3, r7
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	085b      	lsrs	r3, r3, #1
 8008486:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800848a:	463b      	mov	r3, r7
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d004      	beq.n	80084a2 <USB_EPStartXfer+0xca4>
 8008498:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800849c:	3301      	adds	r3, #1
 800849e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	029b      	lsls	r3, r3, #10
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084b0:	801a      	strh	r2, [r3, #0]
 80084b2:	e045      	b.n	8008540 <USB_EPStartXfer+0xd42>
 80084b4:	463b      	mov	r3, r7
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	095b      	lsrs	r3, r3, #5
 80084bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084c0:	463b      	mov	r3, r7
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <USB_EPStartXfer+0xcda>
 80084ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084d2:	3b01      	subs	r3, #1
 80084d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084dc:	b29b      	uxth	r3, r3
 80084de:	029b      	lsls	r3, r3, #10
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	e025      	b.n	8008540 <USB_EPStartXfer+0xd42>
 80084f4:	463b      	mov	r3, r7
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d120      	bne.n	8008540 <USB_EPStartXfer+0xd42>
 80084fe:	1d3b      	adds	r3, r7, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008506:	1d3b      	adds	r3, r7, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008516:	4413      	add	r3, r2
 8008518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800851c:	463b      	mov	r3, r7
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	011a      	lsls	r2, r3, #4
 8008524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008528:	4413      	add	r3, r2
 800852a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800852e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008532:	463b      	mov	r3, r7
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	b29a      	uxth	r2, r3
 800853a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	1d3b      	adds	r3, r7, #4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008548:	463b      	mov	r3, r7
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d175      	bne.n	800863e <USB_EPStartXfer+0xe40>
 8008552:	1d3b      	adds	r3, r7, #4
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800855a:	1d3b      	adds	r3, r7, #4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008562:	b29b      	uxth	r3, r3
 8008564:	461a      	mov	r2, r3
 8008566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800856a:	4413      	add	r3, r2
 800856c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008570:	463b      	mov	r3, r7
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	011a      	lsls	r2, r3, #4
 8008578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800857c:	4413      	add	r3, r2
 800857e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008586:	463b      	mov	r3, r7
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d116      	bne.n	80085be <USB_EPStartXfer+0xdc0>
 8008590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29b      	uxth	r3, r3
 8008598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800859c:	b29a      	uxth	r2, r3
 800859e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085a2:	801a      	strh	r2, [r3, #0]
 80085a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	e061      	b.n	8008682 <USB_EPStartXfer+0xe84>
 80085be:	463b      	mov	r3, r7
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	2b3e      	cmp	r3, #62	; 0x3e
 80085c6:	d81a      	bhi.n	80085fe <USB_EPStartXfer+0xe00>
 80085c8:	463b      	mov	r3, r7
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085d4:	463b      	mov	r3, r7
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d004      	beq.n	80085ec <USB_EPStartXfer+0xdee>
 80085e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e6:	3301      	adds	r3, #1
 80085e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	029b      	lsls	r3, r3, #10
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085fa:	801a      	strh	r2, [r3, #0]
 80085fc:	e041      	b.n	8008682 <USB_EPStartXfer+0xe84>
 80085fe:	463b      	mov	r3, r7
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800860a:	463b      	mov	r3, r7
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f003 031f 	and.w	r3, r3, #31
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <USB_EPStartXfer+0xe24>
 8008618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861c:	3b01      	subs	r3, #1
 800861e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008626:	b29b      	uxth	r3, r3
 8008628:	029b      	lsls	r3, r3, #10
 800862a:	b29b      	uxth	r3, r3
 800862c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008634:	b29a      	uxth	r2, r3
 8008636:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	e021      	b.n	8008682 <USB_EPStartXfer+0xe84>
 800863e:	463b      	mov	r3, r7
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d11c      	bne.n	8008682 <USB_EPStartXfer+0xe84>
 8008648:	1d3b      	adds	r3, r7, #4
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008650:	b29b      	uxth	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008658:	4413      	add	r3, r2
 800865a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800865e:	463b      	mov	r3, r7
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	011a      	lsls	r2, r3, #4
 8008666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800866a:	4413      	add	r3, r2
 800866c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008670:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008674:	463b      	mov	r3, r7
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	b29a      	uxth	r2, r3
 800867c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008680:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008682:	463b      	mov	r3, r7
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 81a4 	beq.w	80089d6 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	463b      	mov	r3, r7
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80086a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d005      	beq.n	80086ba <USB_EPStartXfer+0xebc>
 80086ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80086b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10d      	bne.n	80086d6 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80086be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f040 8187 	bne.w	80089d6 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80086cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f040 8180 	bne.w	80089d6 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80086d6:	1d3b      	adds	r3, r7, #4
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	463b      	mov	r3, r7
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	463b      	mov	r3, r7
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	441a      	add	r2, r3
 8008702:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800870a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800870e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008712:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008716:	b29b      	uxth	r3, r3
 8008718:	8013      	strh	r3, [r2, #0]
 800871a:	e15c      	b.n	80089d6 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800871c:	463b      	mov	r3, r7
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	78db      	ldrb	r3, [r3, #3]
 8008722:	2b01      	cmp	r3, #1
 8008724:	f040 8155 	bne.w	80089d2 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008728:	463b      	mov	r3, r7
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	463b      	mov	r3, r7
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	429a      	cmp	r2, r3
 8008736:	d90e      	bls.n	8008756 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008738:	463b      	mov	r3, r7
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008742:	463b      	mov	r3, r7
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699a      	ldr	r2, [r3, #24]
 8008748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800874c:	1ad2      	subs	r2, r2, r3
 800874e:	463b      	mov	r3, r7
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	619a      	str	r2, [r3, #24]
 8008754:	e008      	b.n	8008768 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008756:	463b      	mov	r3, r7
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008760:	463b      	mov	r3, r7
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2200      	movs	r2, #0
 8008766:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008768:	463b      	mov	r3, r7
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	785b      	ldrb	r3, [r3, #1]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d16f      	bne.n	8008852 <USB_EPStartXfer+0x1054>
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800877a:	1d3b      	adds	r3, r7, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008782:	b29b      	uxth	r3, r3
 8008784:	461a      	mov	r2, r3
 8008786:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800878a:	4413      	add	r3, r2
 800878c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008790:	463b      	mov	r3, r7
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	011a      	lsls	r2, r3, #4
 8008798:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800879c:	4413      	add	r3, r2
 800879e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d116      	bne.n	80087dc <USB_EPStartXfer+0xfde>
 80087ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087c0:	801a      	strh	r2, [r3, #0]
 80087c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087d8:	801a      	strh	r2, [r3, #0]
 80087da:	e05f      	b.n	800889c <USB_EPStartXfer+0x109e>
 80087dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087e0:	2b3e      	cmp	r3, #62	; 0x3e
 80087e2:	d818      	bhi.n	8008816 <USB_EPStartXfer+0x1018>
 80087e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087e8:	085b      	lsrs	r3, r3, #1
 80087ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d004      	beq.n	8008804 <USB_EPStartXfer+0x1006>
 80087fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087fe:	3301      	adds	r3, #1
 8008800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008808:	b29b      	uxth	r3, r3
 800880a:	029b      	lsls	r3, r3, #10
 800880c:	b29a      	uxth	r2, r3
 800880e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008812:	801a      	strh	r2, [r3, #0]
 8008814:	e042      	b.n	800889c <USB_EPStartXfer+0x109e>
 8008816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008824:	f003 031f 	and.w	r3, r3, #31
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <USB_EPStartXfer+0x1038>
 800882c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008830:	3b01      	subs	r3, #1
 8008832:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800883a:	b29b      	uxth	r3, r3
 800883c:	029b      	lsls	r3, r3, #10
 800883e:	b29b      	uxth	r3, r3
 8008840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008848:	b29a      	uxth	r2, r3
 800884a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	e024      	b.n	800889c <USB_EPStartXfer+0x109e>
 8008852:	463b      	mov	r3, r7
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d11f      	bne.n	800889c <USB_EPStartXfer+0x109e>
 800885c:	1d3b      	adds	r3, r7, #4
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008864:	1d3b      	adds	r3, r7, #4
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800886c:	b29b      	uxth	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008874:	4413      	add	r3, r2
 8008876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800887a:	463b      	mov	r3, r7
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	011a      	lsls	r2, r3, #4
 8008882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008886:	4413      	add	r3, r2
 8008888:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800888c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008894:	b29a      	uxth	r2, r3
 8008896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	1d3b      	adds	r3, r7, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088a4:	463b      	mov	r3, r7
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d16f      	bne.n	800898e <USB_EPStartXfer+0x1190>
 80088ae:	1d3b      	adds	r3, r7, #4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088b6:	1d3b      	adds	r3, r7, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088be:	b29b      	uxth	r3, r3
 80088c0:	461a      	mov	r2, r3
 80088c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088c6:	4413      	add	r3, r2
 80088c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088cc:	463b      	mov	r3, r7
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	011a      	lsls	r2, r3, #4
 80088d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088d8:	4413      	add	r3, r2
 80088da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80088e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d116      	bne.n	8008918 <USB_EPStartXfer+0x111a>
 80088ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80088fc:	801a      	strh	r2, [r3, #0]
 80088fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800890e:	b29a      	uxth	r2, r3
 8008910:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008914:	801a      	strh	r2, [r3, #0]
 8008916:	e05e      	b.n	80089d6 <USB_EPStartXfer+0x11d8>
 8008918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800891c:	2b3e      	cmp	r3, #62	; 0x3e
 800891e:	d818      	bhi.n	8008952 <USB_EPStartXfer+0x1154>
 8008920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800892a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <USB_EPStartXfer+0x1142>
 8008936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800893a:	3301      	adds	r3, #1
 800893c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008944:	b29b      	uxth	r3, r3
 8008946:	029b      	lsls	r3, r3, #10
 8008948:	b29a      	uxth	r2, r3
 800894a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800894e:	801a      	strh	r2, [r3, #0]
 8008950:	e041      	b.n	80089d6 <USB_EPStartXfer+0x11d8>
 8008952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008956:	095b      	lsrs	r3, r3, #5
 8008958:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800895c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	2b00      	cmp	r3, #0
 8008966:	d104      	bne.n	8008972 <USB_EPStartXfer+0x1174>
 8008968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800896c:	3b01      	subs	r3, #1
 800896e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008976:	b29b      	uxth	r3, r3
 8008978:	029b      	lsls	r3, r3, #10
 800897a:	b29b      	uxth	r3, r3
 800897c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008984:	b29a      	uxth	r2, r3
 8008986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	e023      	b.n	80089d6 <USB_EPStartXfer+0x11d8>
 800898e:	463b      	mov	r3, r7
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d11e      	bne.n	80089d6 <USB_EPStartXfer+0x11d8>
 8008998:	1d3b      	adds	r3, r7, #4
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089a8:	4413      	add	r3, r2
 80089aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089ae:	463b      	mov	r3, r7
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	011a      	lsls	r2, r3, #4
 80089b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089ba:	4413      	add	r3, r2
 80089bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089ce:	801a      	strh	r2, [r3, #0]
 80089d0:	e001      	b.n	80089d6 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e02e      	b.n	8008a34 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089d6:	1d3b      	adds	r3, r7, #4
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	463b      	mov	r3, r7
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80089f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80089f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008a00:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008a04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a08:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008a0c:	1d3b      	adds	r3, r7, #4
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	463b      	mov	r3, r7
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	441a      	add	r2, r3
 8008a1a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d020      	beq.n	8008a92 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a66:	81bb      	strh	r3, [r7, #12]
 8008a68:	89bb      	ldrh	r3, [r7, #12]
 8008a6a:	f083 0310 	eor.w	r3, r3, #16
 8008a6e:	81bb      	strh	r3, [r7, #12]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	441a      	add	r2, r3
 8008a7a:	89bb      	ldrh	r3, [r7, #12]
 8008a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	8013      	strh	r3, [r2, #0]
 8008a90:	e01f      	b.n	8008ad2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa8:	81fb      	strh	r3, [r7, #14]
 8008aaa:	89fb      	ldrh	r3, [r7, #14]
 8008aac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ab0:	81fb      	strh	r3, [r7, #14]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	441a      	add	r2, r3
 8008abc:	89fb      	ldrh	r3, [r7, #14]
 8008abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	7b1b      	ldrb	r3, [r3, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f040 809d 	bne.w	8008c2e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	785b      	ldrb	r3, [r3, #1]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d04c      	beq.n	8008b96 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	823b      	strh	r3, [r7, #16]
 8008b0a:	8a3b      	ldrh	r3, [r7, #16]
 8008b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d01b      	beq.n	8008b4c <USB_EPClearStall+0x6c>
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b2a:	81fb      	strh	r3, [r7, #14]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	441a      	add	r2, r3
 8008b36:	89fb      	ldrh	r3, [r7, #14]
 8008b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	78db      	ldrb	r3, [r3, #3]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d06c      	beq.n	8008c2e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b6a:	81bb      	strh	r3, [r7, #12]
 8008b6c:	89bb      	ldrh	r3, [r7, #12]
 8008b6e:	f083 0320 	eor.w	r3, r3, #32
 8008b72:	81bb      	strh	r3, [r7, #12]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	441a      	add	r2, r3
 8008b7e:	89bb      	ldrh	r3, [r7, #12]
 8008b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	8013      	strh	r3, [r2, #0]
 8008b94:	e04b      	b.n	8008c2e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	82fb      	strh	r3, [r7, #22]
 8008ba4:	8afb      	ldrh	r3, [r7, #22]
 8008ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01b      	beq.n	8008be6 <USB_EPClearStall+0x106>
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc4:	82bb      	strh	r3, [r7, #20]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	441a      	add	r2, r3
 8008bd0:	8abb      	ldrh	r3, [r7, #20]
 8008bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfc:	827b      	strh	r3, [r7, #18]
 8008bfe:	8a7b      	ldrh	r3, [r7, #18]
 8008c00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c04:	827b      	strh	r3, [r7, #18]
 8008c06:	8a7b      	ldrh	r3, [r7, #18]
 8008c08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c0c:	827b      	strh	r3, [r7, #18]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	441a      	add	r2, r3
 8008c18:	8a7b      	ldrh	r3, [r7, #18]
 8008c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d103      	bne.n	8008c56 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2280      	movs	r2, #128	; 0x80
 8008c52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b08d      	sub	sp, #52	; 0x34
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	460b      	mov	r3, r1
 8008caa:	80fb      	strh	r3, [r7, #6]
 8008cac:	4613      	mov	r3, r2
 8008cae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008cb0:	88bb      	ldrh	r3, [r7, #4]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008cc0:	88fb      	ldrh	r3, [r7, #6]
 8008cc2:	005a      	lsls	r2, r3, #1
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ccc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cd2:	e01e      	b.n	8008d12 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	3301      	adds	r3, #1
 8008cde:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	461a      	mov	r2, r3
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	3302      	adds	r3, #2
 8008d04:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	3301      	adds	r3, #1
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1dd      	bne.n	8008cd4 <USB_WritePMA+0x3a>
  }
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	3734      	adds	r7, #52	; 0x34
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b08b      	sub	sp, #44	; 0x2c
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	4611      	mov	r1, r2
 8008d32:	461a      	mov	r2, r3
 8008d34:	460b      	mov	r3, r1
 8008d36:	80fb      	strh	r3, [r7, #6]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008d3c:	88bb      	ldrh	r3, [r7, #4]
 8008d3e:	085b      	lsrs	r3, r3, #1
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	005a      	lsls	r2, r3, #1
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d58:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d5e:	e01b      	b.n	8008d98 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	3302      	adds	r3, #2
 8008d6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	3302      	adds	r3, #2
 8008d90:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	3b01      	subs	r3, #1
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e0      	bne.n	8008d60 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008d9e:	88bb      	ldrh	r3, [r7, #4]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d007      	beq.n	8008dba <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	701a      	strb	r2, [r3, #0]
  }
}
 8008dba:	bf00      	nop
 8008dbc:	372c      	adds	r7, #44	; 0x2c
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7c1b      	ldrb	r3, [r3, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d115      	bne.n	8008e0a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008de2:	2202      	movs	r2, #2
 8008de4:	2181      	movs	r1, #129	; 0x81
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 fec3 	bl	800ab72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008df6:	2202      	movs	r2, #2
 8008df8:	2101      	movs	r1, #1
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f001 feb9 	bl	800ab72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008e08:	e012      	b.n	8008e30 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e0a:	2340      	movs	r3, #64	; 0x40
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	2181      	movs	r1, #129	; 0x81
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 feae 	bl	800ab72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e1c:	2340      	movs	r3, #64	; 0x40
 8008e1e:	2202      	movs	r2, #2
 8008e20:	2101      	movs	r1, #1
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 fea5 	bl	800ab72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e30:	2308      	movs	r3, #8
 8008e32:	2203      	movs	r2, #3
 8008e34:	2182      	movs	r1, #130	; 0x82
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 fe9b 	bl	800ab72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008e42:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008e46:	f001 ffbd 	bl	800adc4 <USBD_static_malloc>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d102      	bne.n	8008e62 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
 8008e60:	e026      	b.n	8008eb0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e68:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	7c1b      	ldrb	r3, [r3, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e96:	2101      	movs	r1, #1
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 ff5c 	bl	800ad56 <USBD_LL_PrepareReceive>
 8008e9e:	e007      	b.n	8008eb0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ea6:	2340      	movs	r3, #64	; 0x40
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f001 ff53 	bl	800ad56 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008eca:	2181      	movs	r1, #129	; 0x81
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f001 fe76 	bl	800abbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ed8:	2101      	movs	r1, #1
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fe6f 	bl	800abbe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008ee8:	2182      	movs	r1, #130	; 0x82
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fe67 	bl	800abbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00e      	beq.n	8008f1e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f10:	4618      	mov	r0, r3
 8008f12:	f001 ff65 	bl	800ade0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f38:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d039      	beq.n	8008fc6 <USBD_CDC_Setup+0x9e>
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d17f      	bne.n	8009056 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	88db      	ldrh	r3, [r3, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d029      	beq.n	8008fb2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	b25b      	sxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	da11      	bge.n	8008f8c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008f74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	88d2      	ldrh	r2, [r2, #6]
 8008f7a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008f7c:	6939      	ldr	r1, [r7, #16]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	88db      	ldrh	r3, [r3, #6]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 fa14 	bl	800a3b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008f8a:	e06b      	b.n	8009064 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	785a      	ldrb	r2, [r3, #1]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	88db      	ldrh	r3, [r3, #6]
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008fa2:	6939      	ldr	r1, [r7, #16]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	88db      	ldrh	r3, [r3, #6]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 fa2f 	bl	800a40e <USBD_CtlPrepareRx>
      break;
 8008fb0:	e058      	b.n	8009064 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	7850      	ldrb	r0, [r2, #1]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	4798      	blx	r3
      break;
 8008fc4:	e04e      	b.n	8009064 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	2b0b      	cmp	r3, #11
 8008fcc:	d02e      	beq.n	800902c <USBD_CDC_Setup+0x104>
 8008fce:	2b0b      	cmp	r3, #11
 8008fd0:	dc38      	bgt.n	8009044 <USBD_CDC_Setup+0x11c>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <USBD_CDC_Setup+0xb4>
 8008fd6:	2b0a      	cmp	r3, #10
 8008fd8:	d014      	beq.n	8009004 <USBD_CDC_Setup+0xdc>
 8008fda:	e033      	b.n	8009044 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d107      	bne.n	8008ff6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008fe6:	f107 030c 	add.w	r3, r7, #12
 8008fea:	2202      	movs	r2, #2
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 f9df 	bl	800a3b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ff4:	e02e      	b.n	8009054 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 f96f 	bl	800a2dc <USBD_CtlError>
            ret = USBD_FAIL;
 8008ffe:	2302      	movs	r3, #2
 8009000:	75fb      	strb	r3, [r7, #23]
          break;
 8009002:	e027      	b.n	8009054 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900a:	2b03      	cmp	r3, #3
 800900c:	d107      	bne.n	800901e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800900e:	f107 030f 	add.w	r3, r7, #15
 8009012:	2201      	movs	r2, #1
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 f9cb 	bl	800a3b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800901c:	e01a      	b.n	8009054 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 f95b 	bl	800a2dc <USBD_CtlError>
            ret = USBD_FAIL;
 8009026:	2302      	movs	r3, #2
 8009028:	75fb      	strb	r3, [r7, #23]
          break;
 800902a:	e013      	b.n	8009054 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009032:	2b03      	cmp	r3, #3
 8009034:	d00d      	beq.n	8009052 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 f94f 	bl	800a2dc <USBD_CtlError>
            ret = USBD_FAIL;
 800903e:	2302      	movs	r3, #2
 8009040:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009042:	e006      	b.n	8009052 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 f948 	bl	800a2dc <USBD_CtlError>
          ret = USBD_FAIL;
 800904c:	2302      	movs	r3, #2
 800904e:	75fb      	strb	r3, [r7, #23]
          break;
 8009050:	e000      	b.n	8009054 <USBD_CDC_Setup+0x12c>
          break;
 8009052:	bf00      	nop
      }
      break;
 8009054:	e006      	b.n	8009064 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 f93f 	bl	800a2dc <USBD_CtlError>
      ret = USBD_FAIL;
 800905e:	2302      	movs	r3, #2
 8009060:	75fb      	strb	r3, [r7, #23]
      break;
 8009062:	bf00      	nop
  }

  return ret;
 8009064:	7dfb      	ldrb	r3, [r7, #23]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009080:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009088:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009090:	2b00      	cmp	r3, #0
 8009092:	d03a      	beq.n	800910a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	331c      	adds	r3, #28
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d029      	beq.n	80090fe <USBD_CDC_DataIn+0x90>
 80090aa:	78fa      	ldrb	r2, [r7, #3]
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	331c      	adds	r3, #28
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	78f9      	ldrb	r1, [r7, #3]
 80090be:	68b8      	ldr	r0, [r7, #8]
 80090c0:	460b      	mov	r3, r1
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4403      	add	r3, r0
 80090ca:	3338      	adds	r3, #56	; 0x38
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	fbb2 f1f3 	udiv	r1, r2, r3
 80090d2:	fb03 f301 	mul.w	r3, r3, r1
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d110      	bne.n	80090fe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80090dc:	78fa      	ldrb	r2, [r7, #3]
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	331c      	adds	r3, #28
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80090f0:	78f9      	ldrb	r1, [r7, #3]
 80090f2:	2300      	movs	r3, #0
 80090f4:	2200      	movs	r2, #0
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f001 fe0a 	bl	800ad10 <USBD_LL_Transmit>
 80090fc:	e003      	b.n	8009106 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	e000      	b.n	800910c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800910a:	2302      	movs	r3, #2
  }
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009126:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 fe35 	bl	800ad9c <USBD_LL_GetRxDataSize>
 8009132:	4602      	mov	r2, r0
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00d      	beq.n	8009160 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009158:	4611      	mov	r1, r2
 800915a:	4798      	blx	r3

    return USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	e000      	b.n	8009162 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009160:	2302      	movs	r3, #2
  }
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009178:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009180:	2b00      	cmp	r3, #0
 8009182:	d015      	beq.n	80091b0 <USBD_CDC_EP0_RxReady+0x46>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800918a:	2bff      	cmp	r3, #255	; 0xff
 800918c:	d010      	beq.n	80091b0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800919c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091a4:	b292      	uxth	r2, r2
 80091a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	22ff      	movs	r2, #255	; 0xff
 80091ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2243      	movs	r2, #67	; 0x43
 80091c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80091ca:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	20000990 	.word	0x20000990

080091dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2243      	movs	r2, #67	; 0x43
 80091e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80091ea:	4b03      	ldr	r3, [pc, #12]	; (80091f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	2000094c 	.word	0x2000094c

080091fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2243      	movs	r2, #67	; 0x43
 8009208:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800920a:	4b03      	ldr	r3, [pc, #12]	; (8009218 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	200009d4 	.word	0x200009d4

0800921c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	220a      	movs	r2, #10
 8009228:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800922a:	4b03      	ldr	r3, [pc, #12]	; (8009238 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	20000908 	.word	0x20000908

0800923c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009246:	2302      	movs	r3, #2
 8009248:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800926a:	b480      	push	{r7}
 800926c:	b087      	sub	sp, #28
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	4613      	mov	r3, r2
 8009276:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009288:	88fa      	ldrh	r2, [r7, #6]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	371c      	adds	r7, #28
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800929e:	b480      	push	{r7}
 80092a0:	b085      	sub	sp, #20
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01c      	beq.n	800931a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d115      	bne.n	8009316 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009308:	b29b      	uxth	r3, r3
 800930a:	2181      	movs	r1, #129	; 0x81
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 fcff 	bl	800ad10 <USBD_LL_Transmit>

      return USBD_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	e002      	b.n	800931c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009316:	2301      	movs	r3, #1
 8009318:	e000      	b.n	800931c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800931a:	2302      	movs	r3, #2
  }
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009332:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933a:	2b00      	cmp	r3, #0
 800933c:	d017      	beq.n	800936e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	7c1b      	ldrb	r3, [r3, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d109      	bne.n	800935a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800934c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009350:	2101      	movs	r1, #1
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fcff 	bl	800ad56 <USBD_LL_PrepareReceive>
 8009358:	e007      	b.n	800936a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009360:	2340      	movs	r3, #64	; 0x40
 8009362:	2101      	movs	r1, #1
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 fcf6 	bl	800ad56 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	e000      	b.n	8009370 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800936e:	2302      	movs	r3, #2
  }
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800938c:	2302      	movs	r3, #2
 800938e:	e01a      	b.n	80093c6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	79fa      	ldrb	r2, [r7, #7]
 80093bc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f001 fb62 	bl	800aa88 <USBD_LL_Init>

  return USBD_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b085      	sub	sp, #20
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]
 80093ee:	e001      	b.n	80093f4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80093f0:	2302      	movs	r3, #2
 80093f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f001 fb96 	bl	800ab3c <USBD_LL_Start>

  return USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800943c:	2302      	movs	r3, #2
 800943e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00c      	beq.n	8009464 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	78fa      	ldrb	r2, [r7, #3]
 8009454:	4611      	mov	r1, r2
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	4798      	blx	r3
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	78fa      	ldrb	r2, [r7, #3]
 8009484:	4611      	mov	r1, r2
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fedb 	bl	800a262 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094ba:	461a      	mov	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80094c8:	f003 031f 	and.w	r3, r3, #31
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d016      	beq.n	80094fe <USBD_LL_SetupStage+0x6a>
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d81c      	bhi.n	800950e <USBD_LL_SetupStage+0x7a>
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <USBD_LL_SetupStage+0x4a>
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d008      	beq.n	80094ee <USBD_LL_SetupStage+0x5a>
 80094dc:	e017      	b.n	800950e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f9ce 	bl	8009888 <USBD_StdDevReq>
      break;
 80094ec:	e01a      	b.n	8009524 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa30 	bl	800995c <USBD_StdItfReq>
      break;
 80094fc:	e012      	b.n	8009524 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa70 	bl	80099ec <USBD_StdEPReq>
      break;
 800950c:	e00a      	b.n	8009524 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009514:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009518:	b2db      	uxtb	r3, r3
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 fb6d 	bl	800abfc <USBD_LL_StallEP>
      break;
 8009522:	bf00      	nop
  }

  return USBD_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b086      	sub	sp, #24
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	460b      	mov	r3, r1
 8009538:	607a      	str	r2, [r7, #4]
 800953a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800953c:	7afb      	ldrb	r3, [r7, #11]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d14b      	bne.n	80095da <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009548:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009550:	2b03      	cmp	r3, #3
 8009552:	d134      	bne.n	80095be <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	429a      	cmp	r2, r3
 800955e:	d919      	bls.n	8009594 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	1ad2      	subs	r2, r2, r3
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009576:	429a      	cmp	r2, r3
 8009578:	d203      	bcs.n	8009582 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800957e:	b29b      	uxth	r3, r3
 8009580:	e002      	b.n	8009588 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009586:	b29b      	uxth	r3, r3
 8009588:	461a      	mov	r2, r3
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 ff5c 	bl	800a44a <USBD_CtlContinueRx>
 8009592:	e038      	b.n	8009606 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00a      	beq.n	80095b6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d105      	bne.n	80095b6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 ff59 	bl	800a46e <USBD_CtlSendStatus>
 80095bc:	e023      	b.n	8009606 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095c4:	2b05      	cmp	r3, #5
 80095c6:	d11e      	bne.n	8009606 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80095d0:	2100      	movs	r1, #0
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f001 fb12 	bl	800abfc <USBD_LL_StallEP>
 80095d8:	e015      	b.n	8009606 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00d      	beq.n	8009602 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d108      	bne.n	8009602 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	7afa      	ldrb	r2, [r7, #11]
 80095fa:	4611      	mov	r1, r2
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	4798      	blx	r3
 8009600:	e001      	b.n	8009606 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009602:	2302      	movs	r3, #2
 8009604:	e000      	b.n	8009608 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	460b      	mov	r3, r1
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d17f      	bne.n	8009724 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	3314      	adds	r3, #20
 8009628:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009630:	2b02      	cmp	r3, #2
 8009632:	d15c      	bne.n	80096ee <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	429a      	cmp	r2, r3
 800963e:	d915      	bls.n	800966c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	68da      	ldr	r2, [r3, #12]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	1ad2      	subs	r2, r2, r3
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	b29b      	uxth	r3, r3
 8009654:	461a      	mov	r2, r3
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 fec6 	bl	800a3ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800965e:	2300      	movs	r3, #0
 8009660:	2200      	movs	r2, #0
 8009662:	2100      	movs	r1, #0
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f001 fb76 	bl	800ad56 <USBD_LL_PrepareReceive>
 800966a:	e04e      	b.n	800970a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	6912      	ldr	r2, [r2, #16]
 8009674:	fbb3 f1f2 	udiv	r1, r3, r2
 8009678:	fb02 f201 	mul.w	r2, r2, r1
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d11c      	bne.n	80096bc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	689a      	ldr	r2, [r3, #8]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800968a:	429a      	cmp	r2, r3
 800968c:	d316      	bcc.n	80096bc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	689a      	ldr	r2, [r3, #8]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009698:	429a      	cmp	r2, r3
 800969a:	d20f      	bcs.n	80096bc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800969c:	2200      	movs	r2, #0
 800969e:	2100      	movs	r1, #0
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 fea2 	bl	800a3ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096ae:	2300      	movs	r3, #0
 80096b0:	2200      	movs	r2, #0
 80096b2:	2100      	movs	r1, #0
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f001 fb4e 	bl	800ad56 <USBD_LL_PrepareReceive>
 80096ba:	e026      	b.n	800970a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00a      	beq.n	80096de <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d105      	bne.n	80096de <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80096de:	2180      	movs	r1, #128	; 0x80
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f001 fa8b 	bl	800abfc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f000 fed4 	bl	800a494 <USBD_CtlReceiveStatus>
 80096ec:	e00d      	b.n	800970a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d004      	beq.n	8009702 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d103      	bne.n	800970a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009702:	2180      	movs	r1, #128	; 0x80
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f001 fa79 	bl	800abfc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009710:	2b01      	cmp	r3, #1
 8009712:	d11d      	bne.n	8009750 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f7ff fe80 	bl	800941a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009722:	e015      	b.n	8009750 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00d      	beq.n	800974c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009736:	2b03      	cmp	r3, #3
 8009738:	d108      	bne.n	800974c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	7afa      	ldrb	r2, [r7, #11]
 8009744:	4611      	mov	r1, r2
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	4798      	blx	r3
 800974a:	e001      	b.n	8009750 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800974c:	2302      	movs	r3, #2
 800974e:	e000      	b.n	8009752 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009762:	2340      	movs	r3, #64	; 0x40
 8009764:	2200      	movs	r2, #0
 8009766:	2100      	movs	r1, #0
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 fa02 	bl	800ab72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2240      	movs	r2, #64	; 0x40
 800977a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800977e:	2340      	movs	r3, #64	; 0x40
 8009780:	2200      	movs	r2, #0
 8009782:	2180      	movs	r1, #128	; 0x80
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f9f4 	bl	800ab72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2240      	movs	r2, #64	; 0x40
 8009794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	6852      	ldr	r2, [r2, #4]
 80097ca:	b2d2      	uxtb	r2, r2
 80097cc:	4611      	mov	r1, r2
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
  }

  return USBD_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	78fa      	ldrb	r2, [r7, #3]
 80097ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2204      	movs	r2, #4
 8009814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009834:	2b04      	cmp	r3, #4
 8009836:	d105      	bne.n	8009844 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009860:	2b03      	cmp	r3, #3
 8009862:	d10b      	bne.n	800987c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800989e:	2b40      	cmp	r3, #64	; 0x40
 80098a0:	d005      	beq.n	80098ae <USBD_StdDevReq+0x26>
 80098a2:	2b40      	cmp	r3, #64	; 0x40
 80098a4:	d84f      	bhi.n	8009946 <USBD_StdDevReq+0xbe>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d009      	beq.n	80098be <USBD_StdDevReq+0x36>
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d14b      	bne.n	8009946 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	4798      	blx	r3
      break;
 80098bc:	e048      	b.n	8009950 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	785b      	ldrb	r3, [r3, #1]
 80098c2:	2b09      	cmp	r3, #9
 80098c4:	d839      	bhi.n	800993a <USBD_StdDevReq+0xb2>
 80098c6:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <USBD_StdDevReq+0x44>)
 80098c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098cc:	0800991d 	.word	0x0800991d
 80098d0:	08009931 	.word	0x08009931
 80098d4:	0800993b 	.word	0x0800993b
 80098d8:	08009927 	.word	0x08009927
 80098dc:	0800993b 	.word	0x0800993b
 80098e0:	080098ff 	.word	0x080098ff
 80098e4:	080098f5 	.word	0x080098f5
 80098e8:	0800993b 	.word	0x0800993b
 80098ec:	08009913 	.word	0x08009913
 80098f0:	08009909 	.word	0x08009909
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f9dc 	bl	8009cb4 <USBD_GetDescriptor>
          break;
 80098fc:	e022      	b.n	8009944 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fb3f 	bl	8009f84 <USBD_SetAddress>
          break;
 8009906:	e01d      	b.n	8009944 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fb7e 	bl	800a00c <USBD_SetConfig>
          break;
 8009910:	e018      	b.n	8009944 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fc07 	bl	800a128 <USBD_GetConfig>
          break;
 800991a:	e013      	b.n	8009944 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fc37 	bl	800a192 <USBD_GetStatus>
          break;
 8009924:	e00e      	b.n	8009944 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fc65 	bl	800a1f8 <USBD_SetFeature>
          break;
 800992e:	e009      	b.n	8009944 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fc74 	bl	800a220 <USBD_ClrFeature>
          break;
 8009938:	e004      	b.n	8009944 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fccd 	bl	800a2dc <USBD_CtlError>
          break;
 8009942:	bf00      	nop
      }
      break;
 8009944:	e004      	b.n	8009950 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fcc7 	bl	800a2dc <USBD_CtlError>
      break;
 800994e:	bf00      	nop
  }

  return ret;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop

0800995c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009972:	2b40      	cmp	r3, #64	; 0x40
 8009974:	d005      	beq.n	8009982 <USBD_StdItfReq+0x26>
 8009976:	2b40      	cmp	r3, #64	; 0x40
 8009978:	d82e      	bhi.n	80099d8 <USBD_StdItfReq+0x7c>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <USBD_StdItfReq+0x26>
 800997e:	2b20      	cmp	r3, #32
 8009980:	d12a      	bne.n	80099d8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009988:	3b01      	subs	r3, #1
 800998a:	2b02      	cmp	r3, #2
 800998c:	d81d      	bhi.n	80099ca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	889b      	ldrh	r3, [r3, #4]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b01      	cmp	r3, #1
 8009996:	d813      	bhi.n	80099c0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	4798      	blx	r3
 80099a6:	4603      	mov	r3, r0
 80099a8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	88db      	ldrh	r3, [r3, #6]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d110      	bne.n	80099d4 <USBD_StdItfReq+0x78>
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10d      	bne.n	80099d4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fd58 	bl	800a46e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099be:	e009      	b.n	80099d4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fc8a 	bl	800a2dc <USBD_CtlError>
          break;
 80099c8:	e004      	b.n	80099d4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fc85 	bl	800a2dc <USBD_CtlError>
          break;
 80099d2:	e000      	b.n	80099d6 <USBD_StdItfReq+0x7a>
          break;
 80099d4:	bf00      	nop
      }
      break;
 80099d6:	e004      	b.n	80099e2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fc7e 	bl	800a2dc <USBD_CtlError>
      break;
 80099e0:	bf00      	nop
  }

  return USBD_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	889b      	ldrh	r3, [r3, #4]
 80099fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a08:	2b40      	cmp	r3, #64	; 0x40
 8009a0a:	d007      	beq.n	8009a1c <USBD_StdEPReq+0x30>
 8009a0c:	2b40      	cmp	r3, #64	; 0x40
 8009a0e:	f200 8146 	bhi.w	8009c9e <USBD_StdEPReq+0x2b2>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <USBD_StdEPReq+0x40>
 8009a16:	2b20      	cmp	r3, #32
 8009a18:	f040 8141 	bne.w	8009c9e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	4798      	blx	r3
      break;
 8009a2a:	e13d      	b.n	8009ca8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a34:	2b20      	cmp	r3, #32
 8009a36:	d10a      	bne.n	8009a4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	4798      	blx	r3
 8009a46:	4603      	mov	r3, r0
 8009a48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	e12d      	b.n	8009caa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	785b      	ldrb	r3, [r3, #1]
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d007      	beq.n	8009a66 <USBD_StdEPReq+0x7a>
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	f300 811b 	bgt.w	8009c92 <USBD_StdEPReq+0x2a6>
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d072      	beq.n	8009b46 <USBD_StdEPReq+0x15a>
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d03a      	beq.n	8009ada <USBD_StdEPReq+0xee>
 8009a64:	e115      	b.n	8009c92 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d002      	beq.n	8009a76 <USBD_StdEPReq+0x8a>
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d015      	beq.n	8009aa0 <USBD_StdEPReq+0xb4>
 8009a74:	e02b      	b.n	8009ace <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a76:	7bbb      	ldrb	r3, [r7, #14]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00c      	beq.n	8009a96 <USBD_StdEPReq+0xaa>
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	2b80      	cmp	r3, #128	; 0x80
 8009a80:	d009      	beq.n	8009a96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 f8b8 	bl	800abfc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a8c:	2180      	movs	r1, #128	; 0x80
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 f8b4 	bl	800abfc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a94:	e020      	b.n	8009ad8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fc1f 	bl	800a2dc <USBD_CtlError>
              break;
 8009a9e:	e01b      	b.n	8009ad8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	885b      	ldrh	r3, [r3, #2]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10e      	bne.n	8009ac6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00b      	beq.n	8009ac6 <USBD_StdEPReq+0xda>
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	2b80      	cmp	r3, #128	; 0x80
 8009ab2:	d008      	beq.n	8009ac6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	88db      	ldrh	r3, [r3, #6]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 f89b 	bl	800abfc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fcd1 	bl	800a46e <USBD_CtlSendStatus>

              break;
 8009acc:	e004      	b.n	8009ad8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fc03 	bl	800a2dc <USBD_CtlError>
              break;
 8009ad6:	bf00      	nop
          }
          break;
 8009ad8:	e0e0      	b.n	8009c9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d002      	beq.n	8009aea <USBD_StdEPReq+0xfe>
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d015      	beq.n	8009b14 <USBD_StdEPReq+0x128>
 8009ae8:	e026      	b.n	8009b38 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aea:	7bbb      	ldrb	r3, [r7, #14]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00c      	beq.n	8009b0a <USBD_StdEPReq+0x11e>
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	2b80      	cmp	r3, #128	; 0x80
 8009af4:	d009      	beq.n	8009b0a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 f87e 	bl	800abfc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b00:	2180      	movs	r1, #128	; 0x80
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f001 f87a 	bl	800abfc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b08:	e01c      	b.n	8009b44 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fbe5 	bl	800a2dc <USBD_CtlError>
              break;
 8009b12:	e017      	b.n	8009b44 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	885b      	ldrh	r3, [r3, #2]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d112      	bne.n	8009b42 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d004      	beq.n	8009b30 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f001 f885 	bl	800ac3a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fc9c 	bl	800a46e <USBD_CtlSendStatus>
              }
              break;
 8009b36:	e004      	b.n	8009b42 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fbce 	bl	800a2dc <USBD_CtlError>
              break;
 8009b40:	e000      	b.n	8009b44 <USBD_StdEPReq+0x158>
              break;
 8009b42:	bf00      	nop
          }
          break;
 8009b44:	e0aa      	b.n	8009c9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d002      	beq.n	8009b56 <USBD_StdEPReq+0x16a>
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	d032      	beq.n	8009bba <USBD_StdEPReq+0x1ce>
 8009b54:	e097      	b.n	8009c86 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d007      	beq.n	8009b6c <USBD_StdEPReq+0x180>
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	2b80      	cmp	r3, #128	; 0x80
 8009b60:	d004      	beq.n	8009b6c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fbb9 	bl	800a2dc <USBD_CtlError>
                break;
 8009b6a:	e091      	b.n	8009c90 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	da0b      	bge.n	8009b8c <USBD_StdEPReq+0x1a0>
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	3310      	adds	r3, #16
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	4413      	add	r3, r2
 8009b88:	3304      	adds	r3, #4
 8009b8a:	e00b      	b.n	8009ba4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	2202      	movs	r2, #2
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fbfd 	bl	800a3b2 <USBD_CtlSendData>
              break;
 8009bb8:	e06a      	b.n	8009c90 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	da11      	bge.n	8009be6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
 8009bc4:	f003 020f 	and.w	r2, r3, #15
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	3318      	adds	r3, #24
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d117      	bne.n	8009c0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fb7c 	bl	800a2dc <USBD_CtlError>
                  break;
 8009be4:	e054      	b.n	8009c90 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	f003 020f 	and.w	r2, r3, #15
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	440b      	add	r3, r1
 8009bf8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d104      	bne.n	8009c0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fb69 	bl	800a2dc <USBD_CtlError>
                  break;
 8009c0a:	e041      	b.n	8009c90 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	da0b      	bge.n	8009c2c <USBD_StdEPReq+0x240>
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	3310      	adds	r3, #16
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	4413      	add	r3, r2
 8009c28:	3304      	adds	r3, #4
 8009c2a:	e00b      	b.n	8009c44 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	4413      	add	r3, r2
 8009c42:	3304      	adds	r3, #4
 8009c44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c46:	7bbb      	ldrb	r3, [r7, #14]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <USBD_StdEPReq+0x266>
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b80      	cmp	r3, #128	; 0x80
 8009c50:	d103      	bne.n	8009c5a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2200      	movs	r2, #0
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	e00e      	b.n	8009c78 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 f80a 	bl	800ac78 <USBD_LL_IsStallEP>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	e002      	b.n	8009c78 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fb97 	bl	800a3b2 <USBD_CtlSendData>
              break;
 8009c84:	e004      	b.n	8009c90 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fb27 	bl	800a2dc <USBD_CtlError>
              break;
 8009c8e:	bf00      	nop
          }
          break;
 8009c90:	e004      	b.n	8009c9c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fb21 	bl	800a2dc <USBD_CtlError>
          break;
 8009c9a:	bf00      	nop
      }
      break;
 8009c9c:	e004      	b.n	8009ca8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fb1b 	bl	800a2dc <USBD_CtlError>
      break;
 8009ca6:	bf00      	nop
  }

  return ret;
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	885b      	ldrh	r3, [r3, #2]
 8009cce:	0a1b      	lsrs	r3, r3, #8
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	2b06      	cmp	r3, #6
 8009cd6:	f200 8128 	bhi.w	8009f2a <USBD_GetDescriptor+0x276>
 8009cda:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <USBD_GetDescriptor+0x2c>)
 8009cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce0:	08009cfd 	.word	0x08009cfd
 8009ce4:	08009d15 	.word	0x08009d15
 8009ce8:	08009d55 	.word	0x08009d55
 8009cec:	08009f2b 	.word	0x08009f2b
 8009cf0:	08009f2b 	.word	0x08009f2b
 8009cf4:	08009ecb 	.word	0x08009ecb
 8009cf8:	08009ef7 	.word	0x08009ef7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7c12      	ldrb	r2, [r2, #16]
 8009d08:	f107 0108 	add.w	r1, r7, #8
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4798      	blx	r3
 8009d10:	60f8      	str	r0, [r7, #12]
      break;
 8009d12:	e112      	b.n	8009f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7c1b      	ldrb	r3, [r3, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10d      	bne.n	8009d38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	f107 0208 	add.w	r2, r7, #8
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4798      	blx	r3
 8009d2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3301      	adds	r3, #1
 8009d32:	2202      	movs	r2, #2
 8009d34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d36:	e100      	b.n	8009f3a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d40:	f107 0208 	add.w	r2, r7, #8
 8009d44:	4610      	mov	r0, r2
 8009d46:	4798      	blx	r3
 8009d48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	2202      	movs	r2, #2
 8009d50:	701a      	strb	r2, [r3, #0]
      break;
 8009d52:	e0f2      	b.n	8009f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	885b      	ldrh	r3, [r3, #2]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b05      	cmp	r3, #5
 8009d5c:	f200 80ac 	bhi.w	8009eb8 <USBD_GetDescriptor+0x204>
 8009d60:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <USBD_GetDescriptor+0xb4>)
 8009d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d66:	bf00      	nop
 8009d68:	08009d81 	.word	0x08009d81
 8009d6c:	08009db5 	.word	0x08009db5
 8009d70:	08009de9 	.word	0x08009de9
 8009d74:	08009e1d 	.word	0x08009e1d
 8009d78:	08009e51 	.word	0x08009e51
 8009d7c:	08009e85 	.word	0x08009e85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	7c12      	ldrb	r2, [r2, #16]
 8009d98:	f107 0108 	add.w	r1, r7, #8
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4798      	blx	r3
 8009da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009da2:	e091      	b.n	8009ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fa98 	bl	800a2dc <USBD_CtlError>
            err++;
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	3301      	adds	r3, #1
 8009db0:	72fb      	strb	r3, [r7, #11]
          break;
 8009db2:	e089      	b.n	8009ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00b      	beq.n	8009dd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	7c12      	ldrb	r2, [r2, #16]
 8009dcc:	f107 0108 	add.w	r1, r7, #8
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
 8009dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dd6:	e077      	b.n	8009ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa7e 	bl	800a2dc <USBD_CtlError>
            err++;
 8009de0:	7afb      	ldrb	r3, [r7, #11]
 8009de2:	3301      	adds	r3, #1
 8009de4:	72fb      	strb	r3, [r7, #11]
          break;
 8009de6:	e06f      	b.n	8009ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	7c12      	ldrb	r2, [r2, #16]
 8009e00:	f107 0108 	add.w	r1, r7, #8
 8009e04:	4610      	mov	r0, r2
 8009e06:	4798      	blx	r3
 8009e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0a:	e05d      	b.n	8009ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa64 	bl	800a2dc <USBD_CtlError>
            err++;
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	3301      	adds	r3, #1
 8009e18:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1a:	e055      	b.n	8009ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	f107 0108 	add.w	r1, r7, #8
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3e:	e043      	b.n	8009ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa4a 	bl	800a2dc <USBD_CtlError>
            err++;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e4e:	e03b      	b.n	8009ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	7c12      	ldrb	r2, [r2, #16]
 8009e68:	f107 0108 	add.w	r1, r7, #8
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e72:	e029      	b.n	8009ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa30 	bl	800a2dc <USBD_CtlError>
            err++;
 8009e7c:	7afb      	ldrb	r3, [r7, #11]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	72fb      	strb	r3, [r7, #11]
          break;
 8009e82:	e021      	b.n	8009ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	7c12      	ldrb	r2, [r2, #16]
 8009e9c:	f107 0108 	add.w	r1, r7, #8
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4798      	blx	r3
 8009ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ea6:	e00f      	b.n	8009ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa16 	bl	800a2dc <USBD_CtlError>
            err++;
 8009eb0:	7afb      	ldrb	r3, [r7, #11]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009eb6:	e007      	b.n	8009ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa0e 	bl	800a2dc <USBD_CtlError>
          err++;
 8009ec0:	7afb      	ldrb	r3, [r7, #11]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009ec6:	e038      	b.n	8009f3a <USBD_GetDescriptor+0x286>
 8009ec8:	e037      	b.n	8009f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7c1b      	ldrb	r3, [r3, #16]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d109      	bne.n	8009ee6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eda:	f107 0208 	add.w	r2, r7, #8
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4798      	blx	r3
 8009ee2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ee4:	e029      	b.n	8009f3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f9f7 	bl	800a2dc <USBD_CtlError>
        err++;
 8009eee:	7afb      	ldrb	r3, [r7, #11]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ef4:	e021      	b.n	8009f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	7c1b      	ldrb	r3, [r3, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10d      	bne.n	8009f1a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	f107 0208 	add.w	r2, r7, #8
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	4798      	blx	r3
 8009f0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	2207      	movs	r2, #7
 8009f16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f18:	e00f      	b.n	8009f3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f9dd 	bl	800a2dc <USBD_CtlError>
        err++;
 8009f22:	7afb      	ldrb	r3, [r7, #11]
 8009f24:	3301      	adds	r3, #1
 8009f26:	72fb      	strb	r3, [r7, #11]
      break;
 8009f28:	e007      	b.n	8009f3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f9d5 	bl	800a2dc <USBD_CtlError>
      err++;
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	3301      	adds	r3, #1
 8009f36:	72fb      	strb	r3, [r7, #11]
      break;
 8009f38:	bf00      	nop
  }

  if (err != 0U)
 8009f3a:	7afb      	ldrb	r3, [r7, #11]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d11c      	bne.n	8009f7a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009f40:	893b      	ldrh	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d011      	beq.n	8009f6a <USBD_GetDescriptor+0x2b6>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	88db      	ldrh	r3, [r3, #6]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00d      	beq.n	8009f6a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	88da      	ldrh	r2, [r3, #6]
 8009f52:	893b      	ldrh	r3, [r7, #8]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	bf28      	it	cs
 8009f58:	4613      	movcs	r3, r2
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f5e:	893b      	ldrh	r3, [r7, #8]
 8009f60:	461a      	mov	r2, r3
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fa24 	bl	800a3b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	88db      	ldrh	r3, [r3, #6]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d104      	bne.n	8009f7c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fa7b 	bl	800a46e <USBD_CtlSendStatus>
 8009f78:	e000      	b.n	8009f7c <USBD_GetDescriptor+0x2c8>
    return;
 8009f7a:	bf00      	nop
    }
  }
}
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop

08009f84 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	889b      	ldrh	r3, [r3, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d130      	bne.n	8009ff8 <USBD_SetAddress+0x74>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	88db      	ldrh	r3, [r3, #6]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d12c      	bne.n	8009ff8 <USBD_SetAddress+0x74>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	885b      	ldrh	r3, [r3, #2]
 8009fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8009fa4:	d828      	bhi.n	8009ff8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	885b      	ldrh	r3, [r3, #2]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d104      	bne.n	8009fc6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f98c 	bl	800a2dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc4:	e01d      	b.n	800a002 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	7bfa      	ldrb	r2, [r7, #15]
 8009fca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fe7d 	bl	800acd2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fa48 	bl	800a46e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fec:	e009      	b.n	800a002 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff6:	e004      	b.n	800a002 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f96e 	bl	800a2dc <USBD_CtlError>
  }
}
 800a000:	bf00      	nop
 800a002:	bf00      	nop
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	885b      	ldrh	r3, [r3, #2]
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	4b41      	ldr	r3, [pc, #260]	; (800a124 <USBD_SetConfig+0x118>)
 800a01e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a020:	4b40      	ldr	r3, [pc, #256]	; (800a124 <USBD_SetConfig+0x118>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d904      	bls.n	800a032 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f956 	bl	800a2dc <USBD_CtlError>
 800a030:	e075      	b.n	800a11e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d002      	beq.n	800a042 <USBD_SetConfig+0x36>
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d023      	beq.n	800a088 <USBD_SetConfig+0x7c>
 800a040:	e062      	b.n	800a108 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a042:	4b38      	ldr	r3, [pc, #224]	; (800a124 <USBD_SetConfig+0x118>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d01a      	beq.n	800a080 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a04a:	4b36      	ldr	r3, [pc, #216]	; (800a124 <USBD_SetConfig+0x118>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2203      	movs	r2, #3
 800a058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a05c:	4b31      	ldr	r3, [pc, #196]	; (800a124 <USBD_SetConfig+0x118>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7ff f9e4 	bl	8009430 <USBD_SetClassConfig>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d104      	bne.n	800a078 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f933 	bl	800a2dc <USBD_CtlError>
            return;
 800a076:	e052      	b.n	800a11e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f9f8 	bl	800a46e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a07e:	e04e      	b.n	800a11e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f9f4 	bl	800a46e <USBD_CtlSendStatus>
        break;
 800a086:	e04a      	b.n	800a11e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a088:	4b26      	ldr	r3, [pc, #152]	; (800a124 <USBD_SetConfig+0x118>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d112      	bne.n	800a0b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2202      	movs	r2, #2
 800a094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a098:	4b22      	ldr	r3, [pc, #136]	; (800a124 <USBD_SetConfig+0x118>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a0a2:	4b20      	ldr	r3, [pc, #128]	; (800a124 <USBD_SetConfig+0x118>)
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff f9e0 	bl	800946e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f9dd 	bl	800a46e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a0b4:	e033      	b.n	800a11e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a0b6:	4b1b      	ldr	r3, [pc, #108]	; (800a124 <USBD_SetConfig+0x118>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d01d      	beq.n	800a100 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff f9ce 	bl	800946e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a0d2:	4b14      	ldr	r3, [pc, #80]	; (800a124 <USBD_SetConfig+0x118>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0dc:	4b11      	ldr	r3, [pc, #68]	; (800a124 <USBD_SetConfig+0x118>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff f9a4 	bl	8009430 <USBD_SetClassConfig>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d104      	bne.n	800a0f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f8f3 	bl	800a2dc <USBD_CtlError>
            return;
 800a0f6:	e012      	b.n	800a11e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f9b8 	bl	800a46e <USBD_CtlSendStatus>
        break;
 800a0fe:	e00e      	b.n	800a11e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f9b4 	bl	800a46e <USBD_CtlSendStatus>
        break;
 800a106:	e00a      	b.n	800a11e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f8e6 	bl	800a2dc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <USBD_SetConfig+0x118>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff f9a9 	bl	800946e <USBD_ClrClassConfig>
        break;
 800a11c:	bf00      	nop
    }
  }
}
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000c6c 	.word	0x20000c6c

0800a128 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	88db      	ldrh	r3, [r3, #6]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d004      	beq.n	800a144 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f8cd 	bl	800a2dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a142:	e022      	b.n	800a18a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	dc02      	bgt.n	800a154 <USBD_GetConfig+0x2c>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	dc03      	bgt.n	800a15a <USBD_GetConfig+0x32>
 800a152:	e015      	b.n	800a180 <USBD_GetConfig+0x58>
 800a154:	2b03      	cmp	r3, #3
 800a156:	d00b      	beq.n	800a170 <USBD_GetConfig+0x48>
 800a158:	e012      	b.n	800a180 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3308      	adds	r3, #8
 800a164:	2201      	movs	r2, #1
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f922 	bl	800a3b2 <USBD_CtlSendData>
        break;
 800a16e:	e00c      	b.n	800a18a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	3304      	adds	r3, #4
 800a174:	2201      	movs	r2, #1
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f91a 	bl	800a3b2 <USBD_CtlSendData>
        break;
 800a17e:	e004      	b.n	800a18a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f8aa 	bl	800a2dc <USBD_CtlError>
        break;
 800a188:	bf00      	nop
}
 800a18a:	bf00      	nop
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d81e      	bhi.n	800a1e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	88db      	ldrh	r3, [r3, #6]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d004      	beq.n	800a1ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f892 	bl	800a2dc <USBD_CtlError>
        break;
 800a1b8:	e01a      	b.n	800a1f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d005      	beq.n	800a1d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f043 0202 	orr.w	r2, r3, #2
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	330c      	adds	r3, #12
 800a1da:	2202      	movs	r2, #2
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f8e7 	bl	800a3b2 <USBD_CtlSendData>
      break;
 800a1e4:	e004      	b.n	800a1f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f877 	bl	800a2dc <USBD_CtlError>
      break;
 800a1ee:	bf00      	nop
  }
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	885b      	ldrh	r3, [r3, #2]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d106      	bne.n	800a218 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f92b 	bl	800a46e <USBD_CtlSendStatus>
  }
}
 800a218:	bf00      	nop
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a230:	3b01      	subs	r3, #1
 800a232:	2b02      	cmp	r3, #2
 800a234:	d80b      	bhi.n	800a24e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	885b      	ldrh	r3, [r3, #2]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d10c      	bne.n	800a258 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f911 	bl	800a46e <USBD_CtlSendStatus>
      }
      break;
 800a24c:	e004      	b.n	800a258 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f843 	bl	800a2dc <USBD_CtlError>
      break;
 800a256:	e000      	b.n	800a25a <USBD_ClrFeature+0x3a>
      break;
 800a258:	bf00      	nop
  }
}
 800a25a:	bf00      	nop
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	781a      	ldrb	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	785a      	ldrb	r2, [r3, #1]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	3302      	adds	r3, #2
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	b29a      	uxth	r2, r3
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	3303      	adds	r3, #3
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	b29b      	uxth	r3, r3
 800a290:	4413      	add	r3, r2
 800a292:	b29a      	uxth	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	3304      	adds	r3, #4
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	3305      	adds	r3, #5
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	021b      	lsls	r3, r3, #8
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	3306      	adds	r3, #6
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	3307      	adds	r3, #7
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	4413      	add	r3, r2
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	80da      	strh	r2, [r3, #6]

}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a2e6:	2180      	movs	r1, #128	; 0x80
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fc87 	bl	800abfc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fc83 	bl	800abfc <USBD_LL_StallEP>
}
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b086      	sub	sp, #24
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a30a:	2300      	movs	r3, #0
 800a30c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d032      	beq.n	800a37a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 f834 	bl	800a382 <USBD_GetLen>
 800a31a:	4603      	mov	r3, r0
 800a31c:	3301      	adds	r3, #1
 800a31e:	b29b      	uxth	r3, r3
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	b29a      	uxth	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	1c5a      	adds	r2, r3, #1
 800a32c:	75fa      	strb	r2, [r7, #23]
 800a32e:	461a      	mov	r2, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	4413      	add	r3, r2
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	7812      	ldrb	r2, [r2, #0]
 800a338:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	75fa      	strb	r2, [r7, #23]
 800a340:	461a      	mov	r2, r3
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	4413      	add	r3, r2
 800a346:	2203      	movs	r2, #3
 800a348:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a34a:	e012      	b.n	800a372 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	60fa      	str	r2, [r7, #12]
 800a352:	7dfa      	ldrb	r2, [r7, #23]
 800a354:	1c51      	adds	r1, r2, #1
 800a356:	75f9      	strb	r1, [r7, #23]
 800a358:	4611      	mov	r1, r2
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	440a      	add	r2, r1
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	75fa      	strb	r2, [r7, #23]
 800a368:	461a      	mov	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	4413      	add	r3, r2
 800a36e:	2200      	movs	r2, #0
 800a370:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1e8      	bne.n	800a34c <USBD_GetString+0x4e>
    }
  }
}
 800a37a:	bf00      	nop
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a382:	b480      	push	{r7}
 800a384:	b085      	sub	sp, #20
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a38e:	e005      	b.n	800a39c <USBD_GetLen+0x1a>
  {
    len++;
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	3301      	adds	r3, #1
 800a394:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3301      	adds	r3, #1
 800a39a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1f5      	bne.n	800a390 <USBD_GetLen+0xe>
  }

  return len;
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a3c8:	88fa      	ldrh	r2, [r7, #6]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a3ce:	88fa      	ldrh	r2, [r7, #6]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	2100      	movs	r1, #0
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f000 fc98 	bl	800ad10 <USBD_LL_Transmit>

  return USBD_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3f8:	88fb      	ldrh	r3, [r7, #6]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f000 fc86 	bl	800ad10 <USBD_LL_Transmit>

  return USBD_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	60f8      	str	r0, [r7, #12]
 800a416:	60b9      	str	r1, [r7, #8]
 800a418:	4613      	mov	r3, r2
 800a41a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2203      	movs	r2, #3
 800a420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a424:	88fa      	ldrh	r2, [r7, #6]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a42c:	88fa      	ldrh	r2, [r7, #6]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a434:	88fb      	ldrh	r3, [r7, #6]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	2100      	movs	r1, #0
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 fc8b 	bl	800ad56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	4613      	mov	r3, r2
 800a456:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	2100      	movs	r1, #0
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f000 fc79 	bl	800ad56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2204      	movs	r2, #4
 800a47a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a47e:	2300      	movs	r3, #0
 800a480:	2200      	movs	r2, #0
 800a482:	2100      	movs	r1, #0
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fc43 	bl	800ad10 <USBD_LL_Transmit>

  return USBD_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2205      	movs	r2, #5
 800a4a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fc53 	bl	800ad56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
	...

0800a4bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	4912      	ldr	r1, [pc, #72]	; (800a50c <MX_USB_DEVICE_Init+0x50>)
 800a4c4:	4812      	ldr	r0, [pc, #72]	; (800a510 <MX_USB_DEVICE_Init+0x54>)
 800a4c6:	f7fe ff57 	bl	8009378 <USBD_Init>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4d0:	f7f6 fee6 	bl	80012a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a4d4:	490f      	ldr	r1, [pc, #60]	; (800a514 <MX_USB_DEVICE_Init+0x58>)
 800a4d6:	480e      	ldr	r0, [pc, #56]	; (800a510 <MX_USB_DEVICE_Init+0x54>)
 800a4d8:	f7fe ff79 	bl	80093ce <USBD_RegisterClass>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a4e2:	f7f6 fedd 	bl	80012a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a4e6:	490c      	ldr	r1, [pc, #48]	; (800a518 <MX_USB_DEVICE_Init+0x5c>)
 800a4e8:	4809      	ldr	r0, [pc, #36]	; (800a510 <MX_USB_DEVICE_Init+0x54>)
 800a4ea:	f7fe fea7 	bl	800923c <USBD_CDC_RegisterInterface>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4f4:	f7f6 fed4 	bl	80012a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4f8:	4805      	ldr	r0, [pc, #20]	; (800a510 <MX_USB_DEVICE_Init+0x54>)
 800a4fa:	f7fe ff82 	bl	8009402 <USBD_Start>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a504:	f7f6 fecc 	bl	80012a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a508:	bf00      	nop
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	20000a28 	.word	0x20000a28
 800a510:	20000f88 	.word	0x20000f88
 800a514:	20000914 	.word	0x20000914
 800a518:	20000a18 	.word	0x20000a18

0800a51c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a520:	2200      	movs	r2, #0
 800a522:	4905      	ldr	r1, [pc, #20]	; (800a538 <CDC_Init_FS+0x1c>)
 800a524:	4805      	ldr	r0, [pc, #20]	; (800a53c <CDC_Init_FS+0x20>)
 800a526:	f7fe fea0 	bl	800926a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a52a:	4905      	ldr	r1, [pc, #20]	; (800a540 <CDC_Init_FS+0x24>)
 800a52c:	4803      	ldr	r0, [pc, #12]	; (800a53c <CDC_Init_FS+0x20>)
 800a52e:	f7fe feb6 	bl	800929e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a532:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a534:	4618      	mov	r0, r3
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20001634 	.word	0x20001634
 800a53c:	20000f88 	.word	0x20000f88
 800a540:	2000124c 	.word	0x2000124c

0800a544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a544:	b480      	push	{r7}
 800a546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	6039      	str	r1, [r7, #0]
 800a55e:	71fb      	strb	r3, [r7, #7]
 800a560:	4613      	mov	r3, r2
 800a562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	2b23      	cmp	r3, #35	; 0x23
 800a568:	d84a      	bhi.n	800a600 <CDC_Control_FS+0xac>
 800a56a:	a201      	add	r2, pc, #4	; (adr r2, 800a570 <CDC_Control_FS+0x1c>)
 800a56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a570:	0800a601 	.word	0x0800a601
 800a574:	0800a601 	.word	0x0800a601
 800a578:	0800a601 	.word	0x0800a601
 800a57c:	0800a601 	.word	0x0800a601
 800a580:	0800a601 	.word	0x0800a601
 800a584:	0800a601 	.word	0x0800a601
 800a588:	0800a601 	.word	0x0800a601
 800a58c:	0800a601 	.word	0x0800a601
 800a590:	0800a601 	.word	0x0800a601
 800a594:	0800a601 	.word	0x0800a601
 800a598:	0800a601 	.word	0x0800a601
 800a59c:	0800a601 	.word	0x0800a601
 800a5a0:	0800a601 	.word	0x0800a601
 800a5a4:	0800a601 	.word	0x0800a601
 800a5a8:	0800a601 	.word	0x0800a601
 800a5ac:	0800a601 	.word	0x0800a601
 800a5b0:	0800a601 	.word	0x0800a601
 800a5b4:	0800a601 	.word	0x0800a601
 800a5b8:	0800a601 	.word	0x0800a601
 800a5bc:	0800a601 	.word	0x0800a601
 800a5c0:	0800a601 	.word	0x0800a601
 800a5c4:	0800a601 	.word	0x0800a601
 800a5c8:	0800a601 	.word	0x0800a601
 800a5cc:	0800a601 	.word	0x0800a601
 800a5d0:	0800a601 	.word	0x0800a601
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	0800a601 	.word	0x0800a601
 800a5dc:	0800a601 	.word	0x0800a601
 800a5e0:	0800a601 	.word	0x0800a601
 800a5e4:	0800a601 	.word	0x0800a601
 800a5e8:	0800a601 	.word	0x0800a601
 800a5ec:	0800a601 	.word	0x0800a601
 800a5f0:	0800a601 	.word	0x0800a601
 800a5f4:	0800a601 	.word	0x0800a601
 800a5f8:	0800a601 	.word	0x0800a601
 800a5fc:	0800a601 	.word	0x0800a601
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a600:	bf00      	nop
  }

  return (USBD_OK);
 800a602:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a604:	4618      	mov	r0, r3
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);

  strncpy(rx,(char*)Buf,*Len);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	4808      	ldr	r0, [pc, #32]	; (800a644 <CDC_Receive_FS+0x34>)
 800a624:	f001 f916 	bl	800b854 <strncpy>
  rx[*Len]=0;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a05      	ldr	r2, [pc, #20]	; (800a644 <CDC_Receive_FS+0x34>)
 800a62e:	2100      	movs	r1, #0
 800a630:	54d1      	strb	r1, [r2, r3]

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a632:	4805      	ldr	r0, [pc, #20]	; (800a648 <CDC_Receive_FS+0x38>)
 800a634:	f7fe fe76 	bl	8009324 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a638:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000ee8 	.word	0x20000ee8
 800a648:	20000f88 	.word	0x20000f88

0800a64c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a65c:	4b0d      	ldr	r3, [pc, #52]	; (800a694 <CDC_Transmit_FS+0x48>)
 800a65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a662:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a66e:	2301      	movs	r3, #1
 800a670:	e00b      	b.n	800a68a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a672:	887b      	ldrh	r3, [r7, #2]
 800a674:	461a      	mov	r2, r3
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	4806      	ldr	r0, [pc, #24]	; (800a694 <CDC_Transmit_FS+0x48>)
 800a67a:	f7fe fdf6 	bl	800926a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a67e:	4805      	ldr	r0, [pc, #20]	; (800a694 <CDC_Transmit_FS+0x48>)
 800a680:	f7fe fe21 	bl	80092c6 <USBD_CDC_TransmitPacket>
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a688:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000f88 	.word	0x20000f88

0800a698 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	4603      	mov	r3, r0
 800a6a0:	6039      	str	r1, [r7, #0]
 800a6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	2212      	movs	r2, #18
 800a6a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6aa:	4b03      	ldr	r3, [pc, #12]	; (800a6b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	20000a44 	.word	0x20000a44

0800a6bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	6039      	str	r1, [r7, #0]
 800a6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a6ce:	4b03      	ldr	r3, [pc, #12]	; (800a6dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	20000a58 	.word	0x20000a58

0800a6e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	6039      	str	r1, [r7, #0]
 800a6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d105      	bne.n	800a6fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	4907      	ldr	r1, [pc, #28]	; (800a714 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6f6:	4808      	ldr	r0, [pc, #32]	; (800a718 <USBD_FS_ProductStrDescriptor+0x38>)
 800a6f8:	f7ff fe01 	bl	800a2fe <USBD_GetString>
 800a6fc:	e004      	b.n	800a708 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	4904      	ldr	r1, [pc, #16]	; (800a714 <USBD_FS_ProductStrDescriptor+0x34>)
 800a702:	4805      	ldr	r0, [pc, #20]	; (800a718 <USBD_FS_ProductStrDescriptor+0x38>)
 800a704:	f7ff fdfb 	bl	800a2fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a708:	4b02      	ldr	r3, [pc, #8]	; (800a714 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	20001a1c 	.word	0x20001a1c
 800a718:	0800df60 	.word	0x0800df60

0800a71c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	6039      	str	r1, [r7, #0]
 800a726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	4904      	ldr	r1, [pc, #16]	; (800a73c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a72c:	4804      	ldr	r0, [pc, #16]	; (800a740 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a72e:	f7ff fde6 	bl	800a2fe <USBD_GetString>
  return USBD_StrDesc;
 800a732:	4b02      	ldr	r3, [pc, #8]	; (800a73c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	20001a1c 	.word	0x20001a1c
 800a740:	0800df78 	.word	0x0800df78

0800a744 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	6039      	str	r1, [r7, #0]
 800a74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	221a      	movs	r2, #26
 800a754:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a756:	f000 f843 	bl	800a7e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a75a:	4b02      	ldr	r3, [pc, #8]	; (800a764 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	20000a5c 	.word	0x20000a5c

0800a768 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	6039      	str	r1, [r7, #0]
 800a772:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d105      	bne.n	800a786 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	4907      	ldr	r1, [pc, #28]	; (800a79c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a77e:	4808      	ldr	r0, [pc, #32]	; (800a7a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a780:	f7ff fdbd 	bl	800a2fe <USBD_GetString>
 800a784:	e004      	b.n	800a790 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	4904      	ldr	r1, [pc, #16]	; (800a79c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a78a:	4805      	ldr	r0, [pc, #20]	; (800a7a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a78c:	f7ff fdb7 	bl	800a2fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a790:	4b02      	ldr	r3, [pc, #8]	; (800a79c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20001a1c 	.word	0x20001a1c
 800a7a0:	0800df8c 	.word	0x0800df8c

0800a7a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d105      	bne.n	800a7c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	4907      	ldr	r1, [pc, #28]	; (800a7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7ba:	4808      	ldr	r0, [pc, #32]	; (800a7dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7bc:	f7ff fd9f 	bl	800a2fe <USBD_GetString>
 800a7c0:	e004      	b.n	800a7cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	4904      	ldr	r1, [pc, #16]	; (800a7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7c6:	4805      	ldr	r0, [pc, #20]	; (800a7dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7c8:	f7ff fd99 	bl	800a2fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7cc:	4b02      	ldr	r3, [pc, #8]	; (800a7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20001a1c 	.word	0x20001a1c
 800a7dc:	0800df98 	.word	0x0800df98

0800a7e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a7e6:	4b0f      	ldr	r3, [pc, #60]	; (800a824 <Get_SerialNum+0x44>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7ec:	4b0e      	ldr	r3, [pc, #56]	; (800a828 <Get_SerialNum+0x48>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a7f2:	4b0e      	ldr	r3, [pc, #56]	; (800a82c <Get_SerialNum+0x4c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d009      	beq.n	800a81a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a806:	2208      	movs	r2, #8
 800a808:	4909      	ldr	r1, [pc, #36]	; (800a830 <Get_SerialNum+0x50>)
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f000 f814 	bl	800a838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a810:	2204      	movs	r2, #4
 800a812:	4908      	ldr	r1, [pc, #32]	; (800a834 <Get_SerialNum+0x54>)
 800a814:	68b8      	ldr	r0, [r7, #8]
 800a816:	f000 f80f 	bl	800a838 <IntToUnicode>
  }
}
 800a81a:	bf00      	nop
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	1ffff7ac 	.word	0x1ffff7ac
 800a828:	1ffff7b0 	.word	0x1ffff7b0
 800a82c:	1ffff7b4 	.word	0x1ffff7b4
 800a830:	20000a5e 	.word	0x20000a5e
 800a834:	20000a6e 	.word	0x20000a6e

0800a838 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a84a:	2300      	movs	r3, #0
 800a84c:	75fb      	strb	r3, [r7, #23]
 800a84e:	e027      	b.n	800a8a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	0f1b      	lsrs	r3, r3, #28
 800a854:	2b09      	cmp	r3, #9
 800a856:	d80b      	bhi.n	800a870 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	0f1b      	lsrs	r3, r3, #28
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	4619      	mov	r1, r3
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	440b      	add	r3, r1
 800a868:	3230      	adds	r2, #48	; 0x30
 800a86a:	b2d2      	uxtb	r2, r2
 800a86c:	701a      	strb	r2, [r3, #0]
 800a86e:	e00a      	b.n	800a886 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	0f1b      	lsrs	r3, r3, #28
 800a874:	b2da      	uxtb	r2, r3
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	4619      	mov	r1, r3
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	440b      	add	r3, r1
 800a880:	3237      	adds	r2, #55	; 0x37
 800a882:	b2d2      	uxtb	r2, r2
 800a884:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	011b      	lsls	r3, r3, #4
 800a88a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	3301      	adds	r3, #1
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	4413      	add	r3, r2
 800a896:	2200      	movs	r2, #0
 800a898:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	3301      	adds	r3, #1
 800a89e:	75fb      	strb	r3, [r7, #23]
 800a8a0:	7dfa      	ldrb	r2, [r7, #23]
 800a8a2:	79fb      	ldrb	r3, [r7, #7]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d3d3      	bcc.n	800a850 <IntToUnicode+0x18>
  }
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	371c      	adds	r7, #28
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
	...

0800a8b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08a      	sub	sp, #40	; 0x28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8c0:	f107 0314 	add.w	r3, r7, #20
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	601a      	str	r2, [r3, #0]
 800a8c8:	605a      	str	r2, [r3, #4]
 800a8ca:	609a      	str	r2, [r3, #8]
 800a8cc:	60da      	str	r2, [r3, #12]
 800a8ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1c      	ldr	r2, [pc, #112]	; (800a948 <HAL_PCD_MspInit+0x90>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d131      	bne.n	800a93e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8da:	4b1c      	ldr	r3, [pc, #112]	; (800a94c <HAL_PCD_MspInit+0x94>)
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	4a1b      	ldr	r2, [pc, #108]	; (800a94c <HAL_PCD_MspInit+0x94>)
 800a8e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8e4:	6153      	str	r3, [r2, #20]
 800a8e6:	4b19      	ldr	r3, [pc, #100]	; (800a94c <HAL_PCD_MspInit+0x94>)
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ee:	613b      	str	r3, [r7, #16]
 800a8f0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a8f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a8f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a900:	2303      	movs	r3, #3
 800a902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800a904:	230e      	movs	r3, #14
 800a906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a908:	f107 0314 	add.w	r3, r7, #20
 800a90c:	4619      	mov	r1, r3
 800a90e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a912:	f7f8 ffd1 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a916:	4b0d      	ldr	r3, [pc, #52]	; (800a94c <HAL_PCD_MspInit+0x94>)
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	4a0c      	ldr	r2, [pc, #48]	; (800a94c <HAL_PCD_MspInit+0x94>)
 800a91c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a920:	61d3      	str	r3, [r2, #28]
 800a922:	4b0a      	ldr	r3, [pc, #40]	; (800a94c <HAL_PCD_MspInit+0x94>)
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800a92e:	2200      	movs	r2, #0
 800a930:	2100      	movs	r1, #0
 800a932:	2014      	movs	r0, #20
 800a934:	f7f8 fe8b 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800a938:	2014      	movs	r0, #20
 800a93a:	f7f8 fea4 	bl	8003686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a93e:	bf00      	nop
 800a940:	3728      	adds	r7, #40	; 0x28
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	40005c00 	.word	0x40005c00
 800a94c:	40021000 	.word	0x40021000

0800a950 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a964:	4619      	mov	r1, r3
 800a966:	4610      	mov	r0, r2
 800a968:	f7fe fd94 	bl	8009494 <USBD_LL_SetupStage>
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a986:	78fa      	ldrb	r2, [r7, #3]
 800a988:	6879      	ldr	r1, [r7, #4]
 800a98a:	4613      	mov	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	440b      	add	r3, r1
 800a994:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	4619      	mov	r1, r3
 800a99e:	f7fe fdc6 	bl	800952e <USBD_LL_DataOutStage>
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a9bc:	78fa      	ldrb	r2, [r7, #3]
 800a9be:	6879      	ldr	r1, [r7, #4]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4413      	add	r3, r2
 800a9c6:	00db      	lsls	r3, r3, #3
 800a9c8:	440b      	add	r3, r1
 800a9ca:	333c      	adds	r3, #60	; 0x3c
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	f7fe fe1d 	bl	8009610 <USBD_LL_DataInStage>
}
 800a9d6:	bf00      	nop
 800a9d8:	3708      	adds	r7, #8
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe ff30 	bl	8009852 <USBD_LL_SOF>
}
 800a9f2:	bf00      	nop
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa02:	2301      	movs	r3, #1
 800aa04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d001      	beq.n	800aa12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa0e:	f7f6 fc47 	bl	80012a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa18:	7bfa      	ldrb	r2, [r7, #15]
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe fedd 	bl	80097dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7fe fe96 	bl	800975a <USBD_LL_Reset>
}
 800aa2e:	bf00      	nop
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fed8 	bl	80097fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d005      	beq.n	800aa60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa54:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <HAL_PCD_SuspendCallback+0x30>)
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	4a03      	ldr	r2, [pc, #12]	; (800aa68 <HAL_PCD_SuspendCallback+0x30>)
 800aa5a:	f043 0306 	orr.w	r3, r3, #6
 800aa5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	e000ed00 	.word	0xe000ed00

0800aa6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe fed3 	bl	8009826 <USBD_LL_Resume>
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aa90:	4a28      	ldr	r2, [pc, #160]	; (800ab34 <USBD_LL_Init+0xac>)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a26      	ldr	r2, [pc, #152]	; (800ab34 <USBD_LL_Init+0xac>)
 800aa9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800aaa0:	4b24      	ldr	r3, [pc, #144]	; (800ab34 <USBD_LL_Init+0xac>)
 800aaa2:	4a25      	ldr	r2, [pc, #148]	; (800ab38 <USBD_LL_Init+0xb0>)
 800aaa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aaa6:	4b23      	ldr	r3, [pc, #140]	; (800ab34 <USBD_LL_Init+0xac>)
 800aaa8:	2208      	movs	r2, #8
 800aaaa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aaac:	4b21      	ldr	r3, [pc, #132]	; (800ab34 <USBD_LL_Init+0xac>)
 800aaae:	2202      	movs	r2, #2
 800aab0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aab2:	4b20      	ldr	r3, [pc, #128]	; (800ab34 <USBD_LL_Init+0xac>)
 800aab4:	2202      	movs	r2, #2
 800aab6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aab8:	4b1e      	ldr	r3, [pc, #120]	; (800ab34 <USBD_LL_Init+0xac>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aabe:	4b1d      	ldr	r3, [pc, #116]	; (800ab34 <USBD_LL_Init+0xac>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aac4:	481b      	ldr	r0, [pc, #108]	; (800ab34 <USBD_LL_Init+0xac>)
 800aac6:	f7f9 f889 	bl	8003bdc <HAL_PCD_Init>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aad0:	f7f6 fbe6 	bl	80012a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aada:	2318      	movs	r3, #24
 800aadc:	2200      	movs	r2, #0
 800aade:	2100      	movs	r1, #0
 800aae0:	f7fa fb33 	bl	800514a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aaea:	2358      	movs	r3, #88	; 0x58
 800aaec:	2200      	movs	r2, #0
 800aaee:	2180      	movs	r1, #128	; 0x80
 800aaf0:	f7fa fb2b 	bl	800514a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aafa:	23c0      	movs	r3, #192	; 0xc0
 800aafc:	2200      	movs	r2, #0
 800aafe:	2181      	movs	r1, #129	; 0x81
 800ab00:	f7fa fb23 	bl	800514a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab0a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2101      	movs	r1, #1
 800ab12:	f7fa fb1a 	bl	800514a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab20:	2200      	movs	r2, #0
 800ab22:	2182      	movs	r1, #130	; 0x82
 800ab24:	f7fa fb11 	bl	800514a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	20001c1c 	.word	0x20001c1c
 800ab38:	40005c00 	.word	0x40005c00

0800ab3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7f9 f920 	bl	8003d98 <HAL_PCD_Start>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 f954 	bl	800ae0c <USBD_Get_USB_Status>
 800ab64:	4603      	mov	r3, r0
 800ab66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	4608      	mov	r0, r1
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	461a      	mov	r2, r3
 800ab80:	4603      	mov	r3, r0
 800ab82:	70fb      	strb	r3, [r7, #3]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70bb      	strb	r3, [r7, #2]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab90:	2300      	movs	r3, #0
 800ab92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab9a:	78bb      	ldrb	r3, [r7, #2]
 800ab9c:	883a      	ldrh	r2, [r7, #0]
 800ab9e:	78f9      	ldrb	r1, [r7, #3]
 800aba0:	f7f9 fa3c 	bl	800401c <HAL_PCD_EP_Open>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 f92e 	bl	800ae0c <USBD_Get_USB_Status>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abd8:	78fa      	ldrb	r2, [r7, #3]
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f7f9 fa83 	bl	80040e8 <HAL_PCD_EP_Close>
 800abe2:	4603      	mov	r3, r0
 800abe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 f90f 	bl	800ae0c <USBD_Get_USB_Status>
 800abee:	4603      	mov	r3, r0
 800abf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	460b      	mov	r3, r1
 800ac06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac16:	78fa      	ldrb	r2, [r7, #3]
 800ac18:	4611      	mov	r1, r2
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7f9 fb44 	bl	80042a8 <HAL_PCD_EP_SetStall>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 f8f0 	bl	800ae0c <USBD_Get_USB_Status>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	460b      	mov	r3, r1
 800ac44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac54:	78fa      	ldrb	r2, [r7, #3]
 800ac56:	4611      	mov	r1, r2
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7f9 fb77 	bl	800434c <HAL_PCD_EP_ClrStall>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 f8d1 	bl	800ae0c <USBD_Get_USB_Status>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	460b      	mov	r3, r1
 800ac82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	da0c      	bge.n	800acae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac94:	78fb      	ldrb	r3, [r7, #3]
 800ac96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac9a:	68f9      	ldr	r1, [r7, #12]
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	4613      	mov	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	440b      	add	r3, r1
 800aca8:	3302      	adds	r3, #2
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	e00b      	b.n	800acc6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acae:	78fb      	ldrb	r3, [r7, #3]
 800acb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acb4:	68f9      	ldr	r1, [r7, #12]
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	440b      	add	r3, r1
 800acc0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800acc4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b084      	sub	sp, #16
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	460b      	mov	r3, r1
 800acdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acec:	78fa      	ldrb	r2, [r7, #3]
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7f9 f96e 	bl	8003fd2 <HAL_PCD_SetAddress>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 f885 	bl	800ae0c <USBD_Get_USB_Status>
 800ad02:	4603      	mov	r3, r0
 800ad04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	607a      	str	r2, [r7, #4]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	72fb      	strb	r3, [r7, #11]
 800ad20:	4613      	mov	r3, r2
 800ad22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad32:	893b      	ldrh	r3, [r7, #8]
 800ad34:	7af9      	ldrb	r1, [r7, #11]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	f7f9 fa73 	bl	8004222 <HAL_PCD_EP_Transmit>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f862 	bl	800ae0c <USBD_Get_USB_Status>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b086      	sub	sp, #24
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	461a      	mov	r2, r3
 800ad62:	460b      	mov	r3, r1
 800ad64:	72fb      	strb	r3, [r7, #11]
 800ad66:	4613      	mov	r3, r2
 800ad68:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad78:	893b      	ldrh	r3, [r7, #8]
 800ad7a:	7af9      	ldrb	r1, [r7, #11]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	f7f9 f9fb 	bl	8004178 <HAL_PCD_EP_Receive>
 800ad82:	4603      	mov	r3, r0
 800ad84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f83f 	bl	800ae0c <USBD_Get_USB_Status>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad92:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7f9 fa1d 	bl	80041f2 <HAL_PCD_EP_GetRxCount>
 800adb8:	4603      	mov	r3, r0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
	...

0800adc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800adcc:	4b03      	ldr	r3, [pc, #12]	; (800addc <USBD_static_malloc+0x18>)
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	20000c70 	.word	0x20000c70

0800ade0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]

}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae1a:	79fb      	ldrb	r3, [r7, #7]
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d817      	bhi.n	800ae50 <USBD_Get_USB_Status+0x44>
 800ae20:	a201      	add	r2, pc, #4	; (adr r2, 800ae28 <USBD_Get_USB_Status+0x1c>)
 800ae22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae26:	bf00      	nop
 800ae28:	0800ae39 	.word	0x0800ae39
 800ae2c:	0800ae3f 	.word	0x0800ae3f
 800ae30:	0800ae45 	.word	0x0800ae45
 800ae34:	0800ae4b 	.word	0x0800ae4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3c:	e00b      	b.n	800ae56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae3e:	2302      	movs	r3, #2
 800ae40:	73fb      	strb	r3, [r7, #15]
    break;
 800ae42:	e008      	b.n	800ae56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae44:	2301      	movs	r3, #1
 800ae46:	73fb      	strb	r3, [r7, #15]
    break;
 800ae48:	e005      	b.n	800ae56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4e:	e002      	b.n	800ae56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae50:	2302      	movs	r3, #2
 800ae52:	73fb      	strb	r3, [r7, #15]
    break;
 800ae54:	bf00      	nop
  }
  return usb_status;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <__errno>:
 800ae64:	4b01      	ldr	r3, [pc, #4]	; (800ae6c <__errno+0x8>)
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	20000a78 	.word	0x20000a78

0800ae70 <__libc_init_array>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	4d0d      	ldr	r5, [pc, #52]	; (800aea8 <__libc_init_array+0x38>)
 800ae74:	4c0d      	ldr	r4, [pc, #52]	; (800aeac <__libc_init_array+0x3c>)
 800ae76:	1b64      	subs	r4, r4, r5
 800ae78:	10a4      	asrs	r4, r4, #2
 800ae7a:	2600      	movs	r6, #0
 800ae7c:	42a6      	cmp	r6, r4
 800ae7e:	d109      	bne.n	800ae94 <__libc_init_array+0x24>
 800ae80:	4d0b      	ldr	r5, [pc, #44]	; (800aeb0 <__libc_init_array+0x40>)
 800ae82:	4c0c      	ldr	r4, [pc, #48]	; (800aeb4 <__libc_init_array+0x44>)
 800ae84:	f002 ff50 	bl	800dd28 <_init>
 800ae88:	1b64      	subs	r4, r4, r5
 800ae8a:	10a4      	asrs	r4, r4, #2
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	42a6      	cmp	r6, r4
 800ae90:	d105      	bne.n	800ae9e <__libc_init_array+0x2e>
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae98:	4798      	blx	r3
 800ae9a:	3601      	adds	r6, #1
 800ae9c:	e7ee      	b.n	800ae7c <__libc_init_array+0xc>
 800ae9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea2:	4798      	blx	r3
 800aea4:	3601      	adds	r6, #1
 800aea6:	e7f2      	b.n	800ae8e <__libc_init_array+0x1e>
 800aea8:	0800e424 	.word	0x0800e424
 800aeac:	0800e424 	.word	0x0800e424
 800aeb0:	0800e424 	.word	0x0800e424
 800aeb4:	0800e428 	.word	0x0800e428

0800aeb8 <memcpy>:
 800aeb8:	440a      	add	r2, r1
 800aeba:	4291      	cmp	r1, r2
 800aebc:	f100 33ff 	add.w	r3, r0, #4294967295
 800aec0:	d100      	bne.n	800aec4 <memcpy+0xc>
 800aec2:	4770      	bx	lr
 800aec4:	b510      	push	{r4, lr}
 800aec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aece:	4291      	cmp	r1, r2
 800aed0:	d1f9      	bne.n	800aec6 <memcpy+0xe>
 800aed2:	bd10      	pop	{r4, pc}

0800aed4 <memset>:
 800aed4:	4402      	add	r2, r0
 800aed6:	4603      	mov	r3, r0
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d100      	bne.n	800aede <memset+0xa>
 800aedc:	4770      	bx	lr
 800aede:	f803 1b01 	strb.w	r1, [r3], #1
 800aee2:	e7f9      	b.n	800aed8 <memset+0x4>

0800aee4 <__cvt>:
 800aee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aee8:	ec55 4b10 	vmov	r4, r5, d0
 800aeec:	2d00      	cmp	r5, #0
 800aeee:	460e      	mov	r6, r1
 800aef0:	4619      	mov	r1, r3
 800aef2:	462b      	mov	r3, r5
 800aef4:	bfbb      	ittet	lt
 800aef6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aefa:	461d      	movlt	r5, r3
 800aefc:	2300      	movge	r3, #0
 800aefe:	232d      	movlt	r3, #45	; 0x2d
 800af00:	700b      	strb	r3, [r1, #0]
 800af02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af08:	4691      	mov	r9, r2
 800af0a:	f023 0820 	bic.w	r8, r3, #32
 800af0e:	bfbc      	itt	lt
 800af10:	4622      	movlt	r2, r4
 800af12:	4614      	movlt	r4, r2
 800af14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af18:	d005      	beq.n	800af26 <__cvt+0x42>
 800af1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af1e:	d100      	bne.n	800af22 <__cvt+0x3e>
 800af20:	3601      	adds	r6, #1
 800af22:	2102      	movs	r1, #2
 800af24:	e000      	b.n	800af28 <__cvt+0x44>
 800af26:	2103      	movs	r1, #3
 800af28:	ab03      	add	r3, sp, #12
 800af2a:	9301      	str	r3, [sp, #4]
 800af2c:	ab02      	add	r3, sp, #8
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	ec45 4b10 	vmov	d0, r4, r5
 800af34:	4653      	mov	r3, sl
 800af36:	4632      	mov	r2, r6
 800af38:	f000 fda6 	bl	800ba88 <_dtoa_r>
 800af3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af40:	4607      	mov	r7, r0
 800af42:	d102      	bne.n	800af4a <__cvt+0x66>
 800af44:	f019 0f01 	tst.w	r9, #1
 800af48:	d022      	beq.n	800af90 <__cvt+0xac>
 800af4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af4e:	eb07 0906 	add.w	r9, r7, r6
 800af52:	d110      	bne.n	800af76 <__cvt+0x92>
 800af54:	783b      	ldrb	r3, [r7, #0]
 800af56:	2b30      	cmp	r3, #48	; 0x30
 800af58:	d10a      	bne.n	800af70 <__cvt+0x8c>
 800af5a:	2200      	movs	r2, #0
 800af5c:	2300      	movs	r3, #0
 800af5e:	4620      	mov	r0, r4
 800af60:	4629      	mov	r1, r5
 800af62:	f7f5 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800af66:	b918      	cbnz	r0, 800af70 <__cvt+0x8c>
 800af68:	f1c6 0601 	rsb	r6, r6, #1
 800af6c:	f8ca 6000 	str.w	r6, [sl]
 800af70:	f8da 3000 	ldr.w	r3, [sl]
 800af74:	4499      	add	r9, r3
 800af76:	2200      	movs	r2, #0
 800af78:	2300      	movs	r3, #0
 800af7a:	4620      	mov	r0, r4
 800af7c:	4629      	mov	r1, r5
 800af7e:	f7f5 fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 800af82:	b108      	cbz	r0, 800af88 <__cvt+0xa4>
 800af84:	f8cd 900c 	str.w	r9, [sp, #12]
 800af88:	2230      	movs	r2, #48	; 0x30
 800af8a:	9b03      	ldr	r3, [sp, #12]
 800af8c:	454b      	cmp	r3, r9
 800af8e:	d307      	bcc.n	800afa0 <__cvt+0xbc>
 800af90:	9b03      	ldr	r3, [sp, #12]
 800af92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af94:	1bdb      	subs	r3, r3, r7
 800af96:	4638      	mov	r0, r7
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	b004      	add	sp, #16
 800af9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa0:	1c59      	adds	r1, r3, #1
 800afa2:	9103      	str	r1, [sp, #12]
 800afa4:	701a      	strb	r2, [r3, #0]
 800afa6:	e7f0      	b.n	800af8a <__cvt+0xa6>

0800afa8 <__exponent>:
 800afa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afaa:	4603      	mov	r3, r0
 800afac:	2900      	cmp	r1, #0
 800afae:	bfb8      	it	lt
 800afb0:	4249      	neglt	r1, r1
 800afb2:	f803 2b02 	strb.w	r2, [r3], #2
 800afb6:	bfb4      	ite	lt
 800afb8:	222d      	movlt	r2, #45	; 0x2d
 800afba:	222b      	movge	r2, #43	; 0x2b
 800afbc:	2909      	cmp	r1, #9
 800afbe:	7042      	strb	r2, [r0, #1]
 800afc0:	dd2a      	ble.n	800b018 <__exponent+0x70>
 800afc2:	f10d 0407 	add.w	r4, sp, #7
 800afc6:	46a4      	mov	ip, r4
 800afc8:	270a      	movs	r7, #10
 800afca:	46a6      	mov	lr, r4
 800afcc:	460a      	mov	r2, r1
 800afce:	fb91 f6f7 	sdiv	r6, r1, r7
 800afd2:	fb07 1516 	mls	r5, r7, r6, r1
 800afd6:	3530      	adds	r5, #48	; 0x30
 800afd8:	2a63      	cmp	r2, #99	; 0x63
 800afda:	f104 34ff 	add.w	r4, r4, #4294967295
 800afde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800afe2:	4631      	mov	r1, r6
 800afe4:	dcf1      	bgt.n	800afca <__exponent+0x22>
 800afe6:	3130      	adds	r1, #48	; 0x30
 800afe8:	f1ae 0502 	sub.w	r5, lr, #2
 800afec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aff0:	1c44      	adds	r4, r0, #1
 800aff2:	4629      	mov	r1, r5
 800aff4:	4561      	cmp	r1, ip
 800aff6:	d30a      	bcc.n	800b00e <__exponent+0x66>
 800aff8:	f10d 0209 	add.w	r2, sp, #9
 800affc:	eba2 020e 	sub.w	r2, r2, lr
 800b000:	4565      	cmp	r5, ip
 800b002:	bf88      	it	hi
 800b004:	2200      	movhi	r2, #0
 800b006:	4413      	add	r3, r2
 800b008:	1a18      	subs	r0, r3, r0
 800b00a:	b003      	add	sp, #12
 800b00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b00e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b012:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b016:	e7ed      	b.n	800aff4 <__exponent+0x4c>
 800b018:	2330      	movs	r3, #48	; 0x30
 800b01a:	3130      	adds	r1, #48	; 0x30
 800b01c:	7083      	strb	r3, [r0, #2]
 800b01e:	70c1      	strb	r1, [r0, #3]
 800b020:	1d03      	adds	r3, r0, #4
 800b022:	e7f1      	b.n	800b008 <__exponent+0x60>

0800b024 <_printf_float>:
 800b024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b028:	ed2d 8b02 	vpush	{d8}
 800b02c:	b08d      	sub	sp, #52	; 0x34
 800b02e:	460c      	mov	r4, r1
 800b030:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b034:	4616      	mov	r6, r2
 800b036:	461f      	mov	r7, r3
 800b038:	4605      	mov	r5, r0
 800b03a:	f001 fb23 	bl	800c684 <_localeconv_r>
 800b03e:	f8d0 a000 	ldr.w	sl, [r0]
 800b042:	4650      	mov	r0, sl
 800b044:	f7f5 f8c4 	bl	80001d0 <strlen>
 800b048:	2300      	movs	r3, #0
 800b04a:	930a      	str	r3, [sp, #40]	; 0x28
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	9305      	str	r3, [sp, #20]
 800b050:	f8d8 3000 	ldr.w	r3, [r8]
 800b054:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b058:	3307      	adds	r3, #7
 800b05a:	f023 0307 	bic.w	r3, r3, #7
 800b05e:	f103 0208 	add.w	r2, r3, #8
 800b062:	f8c8 2000 	str.w	r2, [r8]
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b06e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b076:	9307      	str	r3, [sp, #28]
 800b078:	f8cd 8018 	str.w	r8, [sp, #24]
 800b07c:	ee08 0a10 	vmov	s16, r0
 800b080:	4b9f      	ldr	r3, [pc, #636]	; (800b300 <_printf_float+0x2dc>)
 800b082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b086:	f04f 32ff 	mov.w	r2, #4294967295
 800b08a:	f7f5 fd4f 	bl	8000b2c <__aeabi_dcmpun>
 800b08e:	bb88      	cbnz	r0, 800b0f4 <_printf_float+0xd0>
 800b090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b094:	4b9a      	ldr	r3, [pc, #616]	; (800b300 <_printf_float+0x2dc>)
 800b096:	f04f 32ff 	mov.w	r2, #4294967295
 800b09a:	f7f5 fd29 	bl	8000af0 <__aeabi_dcmple>
 800b09e:	bb48      	cbnz	r0, 800b0f4 <_printf_float+0xd0>
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	f7f5 fd18 	bl	8000adc <__aeabi_dcmplt>
 800b0ac:	b110      	cbz	r0, 800b0b4 <_printf_float+0x90>
 800b0ae:	232d      	movs	r3, #45	; 0x2d
 800b0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0b4:	4b93      	ldr	r3, [pc, #588]	; (800b304 <_printf_float+0x2e0>)
 800b0b6:	4894      	ldr	r0, [pc, #592]	; (800b308 <_printf_float+0x2e4>)
 800b0b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0bc:	bf94      	ite	ls
 800b0be:	4698      	movls	r8, r3
 800b0c0:	4680      	movhi	r8, r0
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	6123      	str	r3, [r4, #16]
 800b0c6:	9b05      	ldr	r3, [sp, #20]
 800b0c8:	f023 0204 	bic.w	r2, r3, #4
 800b0cc:	6022      	str	r2, [r4, #0]
 800b0ce:	f04f 0900 	mov.w	r9, #0
 800b0d2:	9700      	str	r7, [sp, #0]
 800b0d4:	4633      	mov	r3, r6
 800b0d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0d8:	4621      	mov	r1, r4
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f000 f9d8 	bl	800b490 <_printf_common>
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	f040 8090 	bne.w	800b206 <_printf_float+0x1e2>
 800b0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ea:	b00d      	add	sp, #52	; 0x34
 800b0ec:	ecbd 8b02 	vpop	{d8}
 800b0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f4:	4642      	mov	r2, r8
 800b0f6:	464b      	mov	r3, r9
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	f7f5 fd16 	bl	8000b2c <__aeabi_dcmpun>
 800b100:	b140      	cbz	r0, 800b114 <_printf_float+0xf0>
 800b102:	464b      	mov	r3, r9
 800b104:	2b00      	cmp	r3, #0
 800b106:	bfbc      	itt	lt
 800b108:	232d      	movlt	r3, #45	; 0x2d
 800b10a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b10e:	487f      	ldr	r0, [pc, #508]	; (800b30c <_printf_float+0x2e8>)
 800b110:	4b7f      	ldr	r3, [pc, #508]	; (800b310 <_printf_float+0x2ec>)
 800b112:	e7d1      	b.n	800b0b8 <_printf_float+0x94>
 800b114:	6863      	ldr	r3, [r4, #4]
 800b116:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b11a:	9206      	str	r2, [sp, #24]
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	d13f      	bne.n	800b1a0 <_printf_float+0x17c>
 800b120:	2306      	movs	r3, #6
 800b122:	6063      	str	r3, [r4, #4]
 800b124:	9b05      	ldr	r3, [sp, #20]
 800b126:	6861      	ldr	r1, [r4, #4]
 800b128:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b12c:	2300      	movs	r3, #0
 800b12e:	9303      	str	r3, [sp, #12]
 800b130:	ab0a      	add	r3, sp, #40	; 0x28
 800b132:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b136:	ab09      	add	r3, sp, #36	; 0x24
 800b138:	ec49 8b10 	vmov	d0, r8, r9
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	6022      	str	r2, [r4, #0]
 800b140:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b144:	4628      	mov	r0, r5
 800b146:	f7ff fecd 	bl	800aee4 <__cvt>
 800b14a:	9b06      	ldr	r3, [sp, #24]
 800b14c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b14e:	2b47      	cmp	r3, #71	; 0x47
 800b150:	4680      	mov	r8, r0
 800b152:	d108      	bne.n	800b166 <_printf_float+0x142>
 800b154:	1cc8      	adds	r0, r1, #3
 800b156:	db02      	blt.n	800b15e <_printf_float+0x13a>
 800b158:	6863      	ldr	r3, [r4, #4]
 800b15a:	4299      	cmp	r1, r3
 800b15c:	dd41      	ble.n	800b1e2 <_printf_float+0x1be>
 800b15e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b162:	fa5f fb8b 	uxtb.w	fp, fp
 800b166:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b16a:	d820      	bhi.n	800b1ae <_printf_float+0x18a>
 800b16c:	3901      	subs	r1, #1
 800b16e:	465a      	mov	r2, fp
 800b170:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b174:	9109      	str	r1, [sp, #36]	; 0x24
 800b176:	f7ff ff17 	bl	800afa8 <__exponent>
 800b17a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b17c:	1813      	adds	r3, r2, r0
 800b17e:	2a01      	cmp	r2, #1
 800b180:	4681      	mov	r9, r0
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	dc02      	bgt.n	800b18c <_printf_float+0x168>
 800b186:	6822      	ldr	r2, [r4, #0]
 800b188:	07d2      	lsls	r2, r2, #31
 800b18a:	d501      	bpl.n	800b190 <_printf_float+0x16c>
 800b18c:	3301      	adds	r3, #1
 800b18e:	6123      	str	r3, [r4, #16]
 800b190:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b194:	2b00      	cmp	r3, #0
 800b196:	d09c      	beq.n	800b0d2 <_printf_float+0xae>
 800b198:	232d      	movs	r3, #45	; 0x2d
 800b19a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b19e:	e798      	b.n	800b0d2 <_printf_float+0xae>
 800b1a0:	9a06      	ldr	r2, [sp, #24]
 800b1a2:	2a47      	cmp	r2, #71	; 0x47
 800b1a4:	d1be      	bne.n	800b124 <_printf_float+0x100>
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1bc      	bne.n	800b124 <_printf_float+0x100>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e7b9      	b.n	800b122 <_printf_float+0xfe>
 800b1ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1b2:	d118      	bne.n	800b1e6 <_printf_float+0x1c2>
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	6863      	ldr	r3, [r4, #4]
 800b1b8:	dd0b      	ble.n	800b1d2 <_printf_float+0x1ae>
 800b1ba:	6121      	str	r1, [r4, #16]
 800b1bc:	b913      	cbnz	r3, 800b1c4 <_printf_float+0x1a0>
 800b1be:	6822      	ldr	r2, [r4, #0]
 800b1c0:	07d0      	lsls	r0, r2, #31
 800b1c2:	d502      	bpl.n	800b1ca <_printf_float+0x1a6>
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	440b      	add	r3, r1
 800b1c8:	6123      	str	r3, [r4, #16]
 800b1ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1cc:	f04f 0900 	mov.w	r9, #0
 800b1d0:	e7de      	b.n	800b190 <_printf_float+0x16c>
 800b1d2:	b913      	cbnz	r3, 800b1da <_printf_float+0x1b6>
 800b1d4:	6822      	ldr	r2, [r4, #0]
 800b1d6:	07d2      	lsls	r2, r2, #31
 800b1d8:	d501      	bpl.n	800b1de <_printf_float+0x1ba>
 800b1da:	3302      	adds	r3, #2
 800b1dc:	e7f4      	b.n	800b1c8 <_printf_float+0x1a4>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e7f2      	b.n	800b1c8 <_printf_float+0x1a4>
 800b1e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e8:	4299      	cmp	r1, r3
 800b1ea:	db05      	blt.n	800b1f8 <_printf_float+0x1d4>
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	6121      	str	r1, [r4, #16]
 800b1f0:	07d8      	lsls	r0, r3, #31
 800b1f2:	d5ea      	bpl.n	800b1ca <_printf_float+0x1a6>
 800b1f4:	1c4b      	adds	r3, r1, #1
 800b1f6:	e7e7      	b.n	800b1c8 <_printf_float+0x1a4>
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	bfd4      	ite	le
 800b1fc:	f1c1 0202 	rsble	r2, r1, #2
 800b200:	2201      	movgt	r2, #1
 800b202:	4413      	add	r3, r2
 800b204:	e7e0      	b.n	800b1c8 <_printf_float+0x1a4>
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	055a      	lsls	r2, r3, #21
 800b20a:	d407      	bmi.n	800b21c <_printf_float+0x1f8>
 800b20c:	6923      	ldr	r3, [r4, #16]
 800b20e:	4642      	mov	r2, r8
 800b210:	4631      	mov	r1, r6
 800b212:	4628      	mov	r0, r5
 800b214:	47b8      	blx	r7
 800b216:	3001      	adds	r0, #1
 800b218:	d12c      	bne.n	800b274 <_printf_float+0x250>
 800b21a:	e764      	b.n	800b0e6 <_printf_float+0xc2>
 800b21c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b220:	f240 80e0 	bls.w	800b3e4 <_printf_float+0x3c0>
 800b224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b228:	2200      	movs	r2, #0
 800b22a:	2300      	movs	r3, #0
 800b22c:	f7f5 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b230:	2800      	cmp	r0, #0
 800b232:	d034      	beq.n	800b29e <_printf_float+0x27a>
 800b234:	4a37      	ldr	r2, [pc, #220]	; (800b314 <_printf_float+0x2f0>)
 800b236:	2301      	movs	r3, #1
 800b238:	4631      	mov	r1, r6
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b8      	blx	r7
 800b23e:	3001      	adds	r0, #1
 800b240:	f43f af51 	beq.w	800b0e6 <_printf_float+0xc2>
 800b244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b248:	429a      	cmp	r2, r3
 800b24a:	db02      	blt.n	800b252 <_printf_float+0x22e>
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	07d8      	lsls	r0, r3, #31
 800b250:	d510      	bpl.n	800b274 <_printf_float+0x250>
 800b252:	ee18 3a10 	vmov	r3, s16
 800b256:	4652      	mov	r2, sl
 800b258:	4631      	mov	r1, r6
 800b25a:	4628      	mov	r0, r5
 800b25c:	47b8      	blx	r7
 800b25e:	3001      	adds	r0, #1
 800b260:	f43f af41 	beq.w	800b0e6 <_printf_float+0xc2>
 800b264:	f04f 0800 	mov.w	r8, #0
 800b268:	f104 091a 	add.w	r9, r4, #26
 800b26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b26e:	3b01      	subs	r3, #1
 800b270:	4543      	cmp	r3, r8
 800b272:	dc09      	bgt.n	800b288 <_printf_float+0x264>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	079b      	lsls	r3, r3, #30
 800b278:	f100 8105 	bmi.w	800b486 <_printf_float+0x462>
 800b27c:	68e0      	ldr	r0, [r4, #12]
 800b27e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b280:	4298      	cmp	r0, r3
 800b282:	bfb8      	it	lt
 800b284:	4618      	movlt	r0, r3
 800b286:	e730      	b.n	800b0ea <_printf_float+0xc6>
 800b288:	2301      	movs	r3, #1
 800b28a:	464a      	mov	r2, r9
 800b28c:	4631      	mov	r1, r6
 800b28e:	4628      	mov	r0, r5
 800b290:	47b8      	blx	r7
 800b292:	3001      	adds	r0, #1
 800b294:	f43f af27 	beq.w	800b0e6 <_printf_float+0xc2>
 800b298:	f108 0801 	add.w	r8, r8, #1
 800b29c:	e7e6      	b.n	800b26c <_printf_float+0x248>
 800b29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	dc39      	bgt.n	800b318 <_printf_float+0x2f4>
 800b2a4:	4a1b      	ldr	r2, [pc, #108]	; (800b314 <_printf_float+0x2f0>)
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4631      	mov	r1, r6
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	47b8      	blx	r7
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	f43f af19 	beq.w	800b0e6 <_printf_float+0xc2>
 800b2b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	d102      	bne.n	800b2c2 <_printf_float+0x29e>
 800b2bc:	6823      	ldr	r3, [r4, #0]
 800b2be:	07d9      	lsls	r1, r3, #31
 800b2c0:	d5d8      	bpl.n	800b274 <_printf_float+0x250>
 800b2c2:	ee18 3a10 	vmov	r3, s16
 800b2c6:	4652      	mov	r2, sl
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	47b8      	blx	r7
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	f43f af09 	beq.w	800b0e6 <_printf_float+0xc2>
 800b2d4:	f04f 0900 	mov.w	r9, #0
 800b2d8:	f104 0a1a 	add.w	sl, r4, #26
 800b2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2de:	425b      	negs	r3, r3
 800b2e0:	454b      	cmp	r3, r9
 800b2e2:	dc01      	bgt.n	800b2e8 <_printf_float+0x2c4>
 800b2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2e6:	e792      	b.n	800b20e <_printf_float+0x1ea>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	4652      	mov	r2, sl
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	47b8      	blx	r7
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	f43f aef7 	beq.w	800b0e6 <_printf_float+0xc2>
 800b2f8:	f109 0901 	add.w	r9, r9, #1
 800b2fc:	e7ee      	b.n	800b2dc <_printf_float+0x2b8>
 800b2fe:	bf00      	nop
 800b300:	7fefffff 	.word	0x7fefffff
 800b304:	0800dfdc 	.word	0x0800dfdc
 800b308:	0800dfe0 	.word	0x0800dfe0
 800b30c:	0800dfe8 	.word	0x0800dfe8
 800b310:	0800dfe4 	.word	0x0800dfe4
 800b314:	0800dfec 	.word	0x0800dfec
 800b318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b31a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b31c:	429a      	cmp	r2, r3
 800b31e:	bfa8      	it	ge
 800b320:	461a      	movge	r2, r3
 800b322:	2a00      	cmp	r2, #0
 800b324:	4691      	mov	r9, r2
 800b326:	dc37      	bgt.n	800b398 <_printf_float+0x374>
 800b328:	f04f 0b00 	mov.w	fp, #0
 800b32c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b330:	f104 021a 	add.w	r2, r4, #26
 800b334:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	eba3 0309 	sub.w	r3, r3, r9
 800b33c:	455b      	cmp	r3, fp
 800b33e:	dc33      	bgt.n	800b3a8 <_printf_float+0x384>
 800b340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b344:	429a      	cmp	r2, r3
 800b346:	db3b      	blt.n	800b3c0 <_printf_float+0x39c>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	07da      	lsls	r2, r3, #31
 800b34c:	d438      	bmi.n	800b3c0 <_printf_float+0x39c>
 800b34e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b350:	9b05      	ldr	r3, [sp, #20]
 800b352:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	eba2 0901 	sub.w	r9, r2, r1
 800b35a:	4599      	cmp	r9, r3
 800b35c:	bfa8      	it	ge
 800b35e:	4699      	movge	r9, r3
 800b360:	f1b9 0f00 	cmp.w	r9, #0
 800b364:	dc35      	bgt.n	800b3d2 <_printf_float+0x3ae>
 800b366:	f04f 0800 	mov.w	r8, #0
 800b36a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b36e:	f104 0a1a 	add.w	sl, r4, #26
 800b372:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b376:	1a9b      	subs	r3, r3, r2
 800b378:	eba3 0309 	sub.w	r3, r3, r9
 800b37c:	4543      	cmp	r3, r8
 800b37e:	f77f af79 	ble.w	800b274 <_printf_float+0x250>
 800b382:	2301      	movs	r3, #1
 800b384:	4652      	mov	r2, sl
 800b386:	4631      	mov	r1, r6
 800b388:	4628      	mov	r0, r5
 800b38a:	47b8      	blx	r7
 800b38c:	3001      	adds	r0, #1
 800b38e:	f43f aeaa 	beq.w	800b0e6 <_printf_float+0xc2>
 800b392:	f108 0801 	add.w	r8, r8, #1
 800b396:	e7ec      	b.n	800b372 <_printf_float+0x34e>
 800b398:	4613      	mov	r3, r2
 800b39a:	4631      	mov	r1, r6
 800b39c:	4642      	mov	r2, r8
 800b39e:	4628      	mov	r0, r5
 800b3a0:	47b8      	blx	r7
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	d1c0      	bne.n	800b328 <_printf_float+0x304>
 800b3a6:	e69e      	b.n	800b0e6 <_printf_float+0xc2>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	9205      	str	r2, [sp, #20]
 800b3b0:	47b8      	blx	r7
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	f43f ae97 	beq.w	800b0e6 <_printf_float+0xc2>
 800b3b8:	9a05      	ldr	r2, [sp, #20]
 800b3ba:	f10b 0b01 	add.w	fp, fp, #1
 800b3be:	e7b9      	b.n	800b334 <_printf_float+0x310>
 800b3c0:	ee18 3a10 	vmov	r3, s16
 800b3c4:	4652      	mov	r2, sl
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	47b8      	blx	r7
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	d1be      	bne.n	800b34e <_printf_float+0x32a>
 800b3d0:	e689      	b.n	800b0e6 <_printf_float+0xc2>
 800b3d2:	9a05      	ldr	r2, [sp, #20]
 800b3d4:	464b      	mov	r3, r9
 800b3d6:	4442      	add	r2, r8
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d1c1      	bne.n	800b366 <_printf_float+0x342>
 800b3e2:	e680      	b.n	800b0e6 <_printf_float+0xc2>
 800b3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3e6:	2a01      	cmp	r2, #1
 800b3e8:	dc01      	bgt.n	800b3ee <_printf_float+0x3ca>
 800b3ea:	07db      	lsls	r3, r3, #31
 800b3ec:	d538      	bpl.n	800b460 <_printf_float+0x43c>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	47b8      	blx	r7
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	f43f ae74 	beq.w	800b0e6 <_printf_float+0xc2>
 800b3fe:	ee18 3a10 	vmov	r3, s16
 800b402:	4652      	mov	r2, sl
 800b404:	4631      	mov	r1, r6
 800b406:	4628      	mov	r0, r5
 800b408:	47b8      	blx	r7
 800b40a:	3001      	adds	r0, #1
 800b40c:	f43f ae6b 	beq.w	800b0e6 <_printf_float+0xc2>
 800b410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b414:	2200      	movs	r2, #0
 800b416:	2300      	movs	r3, #0
 800b418:	f7f5 fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 800b41c:	b9d8      	cbnz	r0, 800b456 <_printf_float+0x432>
 800b41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b420:	f108 0201 	add.w	r2, r8, #1
 800b424:	3b01      	subs	r3, #1
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	d10e      	bne.n	800b44e <_printf_float+0x42a>
 800b430:	e659      	b.n	800b0e6 <_printf_float+0xc2>
 800b432:	2301      	movs	r3, #1
 800b434:	4652      	mov	r2, sl
 800b436:	4631      	mov	r1, r6
 800b438:	4628      	mov	r0, r5
 800b43a:	47b8      	blx	r7
 800b43c:	3001      	adds	r0, #1
 800b43e:	f43f ae52 	beq.w	800b0e6 <_printf_float+0xc2>
 800b442:	f108 0801 	add.w	r8, r8, #1
 800b446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b448:	3b01      	subs	r3, #1
 800b44a:	4543      	cmp	r3, r8
 800b44c:	dcf1      	bgt.n	800b432 <_printf_float+0x40e>
 800b44e:	464b      	mov	r3, r9
 800b450:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b454:	e6dc      	b.n	800b210 <_printf_float+0x1ec>
 800b456:	f04f 0800 	mov.w	r8, #0
 800b45a:	f104 0a1a 	add.w	sl, r4, #26
 800b45e:	e7f2      	b.n	800b446 <_printf_float+0x422>
 800b460:	2301      	movs	r3, #1
 800b462:	4642      	mov	r2, r8
 800b464:	e7df      	b.n	800b426 <_printf_float+0x402>
 800b466:	2301      	movs	r3, #1
 800b468:	464a      	mov	r2, r9
 800b46a:	4631      	mov	r1, r6
 800b46c:	4628      	mov	r0, r5
 800b46e:	47b8      	blx	r7
 800b470:	3001      	adds	r0, #1
 800b472:	f43f ae38 	beq.w	800b0e6 <_printf_float+0xc2>
 800b476:	f108 0801 	add.w	r8, r8, #1
 800b47a:	68e3      	ldr	r3, [r4, #12]
 800b47c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b47e:	1a5b      	subs	r3, r3, r1
 800b480:	4543      	cmp	r3, r8
 800b482:	dcf0      	bgt.n	800b466 <_printf_float+0x442>
 800b484:	e6fa      	b.n	800b27c <_printf_float+0x258>
 800b486:	f04f 0800 	mov.w	r8, #0
 800b48a:	f104 0919 	add.w	r9, r4, #25
 800b48e:	e7f4      	b.n	800b47a <_printf_float+0x456>

0800b490 <_printf_common>:
 800b490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b494:	4616      	mov	r6, r2
 800b496:	4699      	mov	r9, r3
 800b498:	688a      	ldr	r2, [r1, #8]
 800b49a:	690b      	ldr	r3, [r1, #16]
 800b49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	bfb8      	it	lt
 800b4a4:	4613      	movlt	r3, r2
 800b4a6:	6033      	str	r3, [r6, #0]
 800b4a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4ac:	4607      	mov	r7, r0
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	b10a      	cbz	r2, 800b4b6 <_printf_common+0x26>
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	6033      	str	r3, [r6, #0]
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	0699      	lsls	r1, r3, #26
 800b4ba:	bf42      	ittt	mi
 800b4bc:	6833      	ldrmi	r3, [r6, #0]
 800b4be:	3302      	addmi	r3, #2
 800b4c0:	6033      	strmi	r3, [r6, #0]
 800b4c2:	6825      	ldr	r5, [r4, #0]
 800b4c4:	f015 0506 	ands.w	r5, r5, #6
 800b4c8:	d106      	bne.n	800b4d8 <_printf_common+0x48>
 800b4ca:	f104 0a19 	add.w	sl, r4, #25
 800b4ce:	68e3      	ldr	r3, [r4, #12]
 800b4d0:	6832      	ldr	r2, [r6, #0]
 800b4d2:	1a9b      	subs	r3, r3, r2
 800b4d4:	42ab      	cmp	r3, r5
 800b4d6:	dc26      	bgt.n	800b526 <_printf_common+0x96>
 800b4d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4dc:	1e13      	subs	r3, r2, #0
 800b4de:	6822      	ldr	r2, [r4, #0]
 800b4e0:	bf18      	it	ne
 800b4e2:	2301      	movne	r3, #1
 800b4e4:	0692      	lsls	r2, r2, #26
 800b4e6:	d42b      	bmi.n	800b540 <_printf_common+0xb0>
 800b4e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	47c0      	blx	r8
 800b4f2:	3001      	adds	r0, #1
 800b4f4:	d01e      	beq.n	800b534 <_printf_common+0xa4>
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	68e5      	ldr	r5, [r4, #12]
 800b4fa:	6832      	ldr	r2, [r6, #0]
 800b4fc:	f003 0306 	and.w	r3, r3, #6
 800b500:	2b04      	cmp	r3, #4
 800b502:	bf08      	it	eq
 800b504:	1aad      	subeq	r5, r5, r2
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	6922      	ldr	r2, [r4, #16]
 800b50a:	bf0c      	ite	eq
 800b50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b510:	2500      	movne	r5, #0
 800b512:	4293      	cmp	r3, r2
 800b514:	bfc4      	itt	gt
 800b516:	1a9b      	subgt	r3, r3, r2
 800b518:	18ed      	addgt	r5, r5, r3
 800b51a:	2600      	movs	r6, #0
 800b51c:	341a      	adds	r4, #26
 800b51e:	42b5      	cmp	r5, r6
 800b520:	d11a      	bne.n	800b558 <_printf_common+0xc8>
 800b522:	2000      	movs	r0, #0
 800b524:	e008      	b.n	800b538 <_printf_common+0xa8>
 800b526:	2301      	movs	r3, #1
 800b528:	4652      	mov	r2, sl
 800b52a:	4649      	mov	r1, r9
 800b52c:	4638      	mov	r0, r7
 800b52e:	47c0      	blx	r8
 800b530:	3001      	adds	r0, #1
 800b532:	d103      	bne.n	800b53c <_printf_common+0xac>
 800b534:	f04f 30ff 	mov.w	r0, #4294967295
 800b538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b53c:	3501      	adds	r5, #1
 800b53e:	e7c6      	b.n	800b4ce <_printf_common+0x3e>
 800b540:	18e1      	adds	r1, r4, r3
 800b542:	1c5a      	adds	r2, r3, #1
 800b544:	2030      	movs	r0, #48	; 0x30
 800b546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b54a:	4422      	add	r2, r4
 800b54c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b554:	3302      	adds	r3, #2
 800b556:	e7c7      	b.n	800b4e8 <_printf_common+0x58>
 800b558:	2301      	movs	r3, #1
 800b55a:	4622      	mov	r2, r4
 800b55c:	4649      	mov	r1, r9
 800b55e:	4638      	mov	r0, r7
 800b560:	47c0      	blx	r8
 800b562:	3001      	adds	r0, #1
 800b564:	d0e6      	beq.n	800b534 <_printf_common+0xa4>
 800b566:	3601      	adds	r6, #1
 800b568:	e7d9      	b.n	800b51e <_printf_common+0x8e>
	...

0800b56c <_printf_i>:
 800b56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b570:	460c      	mov	r4, r1
 800b572:	4691      	mov	r9, r2
 800b574:	7e27      	ldrb	r7, [r4, #24]
 800b576:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b578:	2f78      	cmp	r7, #120	; 0x78
 800b57a:	4680      	mov	r8, r0
 800b57c:	469a      	mov	sl, r3
 800b57e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b582:	d807      	bhi.n	800b594 <_printf_i+0x28>
 800b584:	2f62      	cmp	r7, #98	; 0x62
 800b586:	d80a      	bhi.n	800b59e <_printf_i+0x32>
 800b588:	2f00      	cmp	r7, #0
 800b58a:	f000 80d8 	beq.w	800b73e <_printf_i+0x1d2>
 800b58e:	2f58      	cmp	r7, #88	; 0x58
 800b590:	f000 80a3 	beq.w	800b6da <_printf_i+0x16e>
 800b594:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b59c:	e03a      	b.n	800b614 <_printf_i+0xa8>
 800b59e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5a2:	2b15      	cmp	r3, #21
 800b5a4:	d8f6      	bhi.n	800b594 <_printf_i+0x28>
 800b5a6:	a001      	add	r0, pc, #4	; (adr r0, 800b5ac <_printf_i+0x40>)
 800b5a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b5ac:	0800b605 	.word	0x0800b605
 800b5b0:	0800b619 	.word	0x0800b619
 800b5b4:	0800b595 	.word	0x0800b595
 800b5b8:	0800b595 	.word	0x0800b595
 800b5bc:	0800b595 	.word	0x0800b595
 800b5c0:	0800b595 	.word	0x0800b595
 800b5c4:	0800b619 	.word	0x0800b619
 800b5c8:	0800b595 	.word	0x0800b595
 800b5cc:	0800b595 	.word	0x0800b595
 800b5d0:	0800b595 	.word	0x0800b595
 800b5d4:	0800b595 	.word	0x0800b595
 800b5d8:	0800b725 	.word	0x0800b725
 800b5dc:	0800b649 	.word	0x0800b649
 800b5e0:	0800b707 	.word	0x0800b707
 800b5e4:	0800b595 	.word	0x0800b595
 800b5e8:	0800b595 	.word	0x0800b595
 800b5ec:	0800b747 	.word	0x0800b747
 800b5f0:	0800b595 	.word	0x0800b595
 800b5f4:	0800b649 	.word	0x0800b649
 800b5f8:	0800b595 	.word	0x0800b595
 800b5fc:	0800b595 	.word	0x0800b595
 800b600:	0800b70f 	.word	0x0800b70f
 800b604:	680b      	ldr	r3, [r1, #0]
 800b606:	1d1a      	adds	r2, r3, #4
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	600a      	str	r2, [r1, #0]
 800b60c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b614:	2301      	movs	r3, #1
 800b616:	e0a3      	b.n	800b760 <_printf_i+0x1f4>
 800b618:	6825      	ldr	r5, [r4, #0]
 800b61a:	6808      	ldr	r0, [r1, #0]
 800b61c:	062e      	lsls	r6, r5, #24
 800b61e:	f100 0304 	add.w	r3, r0, #4
 800b622:	d50a      	bpl.n	800b63a <_printf_i+0xce>
 800b624:	6805      	ldr	r5, [r0, #0]
 800b626:	600b      	str	r3, [r1, #0]
 800b628:	2d00      	cmp	r5, #0
 800b62a:	da03      	bge.n	800b634 <_printf_i+0xc8>
 800b62c:	232d      	movs	r3, #45	; 0x2d
 800b62e:	426d      	negs	r5, r5
 800b630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b634:	485e      	ldr	r0, [pc, #376]	; (800b7b0 <_printf_i+0x244>)
 800b636:	230a      	movs	r3, #10
 800b638:	e019      	b.n	800b66e <_printf_i+0x102>
 800b63a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b63e:	6805      	ldr	r5, [r0, #0]
 800b640:	600b      	str	r3, [r1, #0]
 800b642:	bf18      	it	ne
 800b644:	b22d      	sxthne	r5, r5
 800b646:	e7ef      	b.n	800b628 <_printf_i+0xbc>
 800b648:	680b      	ldr	r3, [r1, #0]
 800b64a:	6825      	ldr	r5, [r4, #0]
 800b64c:	1d18      	adds	r0, r3, #4
 800b64e:	6008      	str	r0, [r1, #0]
 800b650:	0628      	lsls	r0, r5, #24
 800b652:	d501      	bpl.n	800b658 <_printf_i+0xec>
 800b654:	681d      	ldr	r5, [r3, #0]
 800b656:	e002      	b.n	800b65e <_printf_i+0xf2>
 800b658:	0669      	lsls	r1, r5, #25
 800b65a:	d5fb      	bpl.n	800b654 <_printf_i+0xe8>
 800b65c:	881d      	ldrh	r5, [r3, #0]
 800b65e:	4854      	ldr	r0, [pc, #336]	; (800b7b0 <_printf_i+0x244>)
 800b660:	2f6f      	cmp	r7, #111	; 0x6f
 800b662:	bf0c      	ite	eq
 800b664:	2308      	moveq	r3, #8
 800b666:	230a      	movne	r3, #10
 800b668:	2100      	movs	r1, #0
 800b66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b66e:	6866      	ldr	r6, [r4, #4]
 800b670:	60a6      	str	r6, [r4, #8]
 800b672:	2e00      	cmp	r6, #0
 800b674:	bfa2      	ittt	ge
 800b676:	6821      	ldrge	r1, [r4, #0]
 800b678:	f021 0104 	bicge.w	r1, r1, #4
 800b67c:	6021      	strge	r1, [r4, #0]
 800b67e:	b90d      	cbnz	r5, 800b684 <_printf_i+0x118>
 800b680:	2e00      	cmp	r6, #0
 800b682:	d04d      	beq.n	800b720 <_printf_i+0x1b4>
 800b684:	4616      	mov	r6, r2
 800b686:	fbb5 f1f3 	udiv	r1, r5, r3
 800b68a:	fb03 5711 	mls	r7, r3, r1, r5
 800b68e:	5dc7      	ldrb	r7, [r0, r7]
 800b690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b694:	462f      	mov	r7, r5
 800b696:	42bb      	cmp	r3, r7
 800b698:	460d      	mov	r5, r1
 800b69a:	d9f4      	bls.n	800b686 <_printf_i+0x11a>
 800b69c:	2b08      	cmp	r3, #8
 800b69e:	d10b      	bne.n	800b6b8 <_printf_i+0x14c>
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	07df      	lsls	r7, r3, #31
 800b6a4:	d508      	bpl.n	800b6b8 <_printf_i+0x14c>
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	6861      	ldr	r1, [r4, #4]
 800b6aa:	4299      	cmp	r1, r3
 800b6ac:	bfde      	ittt	le
 800b6ae:	2330      	movle	r3, #48	; 0x30
 800b6b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6b8:	1b92      	subs	r2, r2, r6
 800b6ba:	6122      	str	r2, [r4, #16]
 800b6bc:	f8cd a000 	str.w	sl, [sp]
 800b6c0:	464b      	mov	r3, r9
 800b6c2:	aa03      	add	r2, sp, #12
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4640      	mov	r0, r8
 800b6c8:	f7ff fee2 	bl	800b490 <_printf_common>
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d14c      	bne.n	800b76a <_printf_i+0x1fe>
 800b6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d4:	b004      	add	sp, #16
 800b6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6da:	4835      	ldr	r0, [pc, #212]	; (800b7b0 <_printf_i+0x244>)
 800b6dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	680e      	ldr	r6, [r1, #0]
 800b6e4:	061f      	lsls	r7, r3, #24
 800b6e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800b6ea:	600e      	str	r6, [r1, #0]
 800b6ec:	d514      	bpl.n	800b718 <_printf_i+0x1ac>
 800b6ee:	07d9      	lsls	r1, r3, #31
 800b6f0:	bf44      	itt	mi
 800b6f2:	f043 0320 	orrmi.w	r3, r3, #32
 800b6f6:	6023      	strmi	r3, [r4, #0]
 800b6f8:	b91d      	cbnz	r5, 800b702 <_printf_i+0x196>
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	f023 0320 	bic.w	r3, r3, #32
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	2310      	movs	r3, #16
 800b704:	e7b0      	b.n	800b668 <_printf_i+0xfc>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	f043 0320 	orr.w	r3, r3, #32
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	2378      	movs	r3, #120	; 0x78
 800b710:	4828      	ldr	r0, [pc, #160]	; (800b7b4 <_printf_i+0x248>)
 800b712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b716:	e7e3      	b.n	800b6e0 <_printf_i+0x174>
 800b718:	065e      	lsls	r6, r3, #25
 800b71a:	bf48      	it	mi
 800b71c:	b2ad      	uxthmi	r5, r5
 800b71e:	e7e6      	b.n	800b6ee <_printf_i+0x182>
 800b720:	4616      	mov	r6, r2
 800b722:	e7bb      	b.n	800b69c <_printf_i+0x130>
 800b724:	680b      	ldr	r3, [r1, #0]
 800b726:	6826      	ldr	r6, [r4, #0]
 800b728:	6960      	ldr	r0, [r4, #20]
 800b72a:	1d1d      	adds	r5, r3, #4
 800b72c:	600d      	str	r5, [r1, #0]
 800b72e:	0635      	lsls	r5, r6, #24
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	d501      	bpl.n	800b738 <_printf_i+0x1cc>
 800b734:	6018      	str	r0, [r3, #0]
 800b736:	e002      	b.n	800b73e <_printf_i+0x1d2>
 800b738:	0671      	lsls	r1, r6, #25
 800b73a:	d5fb      	bpl.n	800b734 <_printf_i+0x1c8>
 800b73c:	8018      	strh	r0, [r3, #0]
 800b73e:	2300      	movs	r3, #0
 800b740:	6123      	str	r3, [r4, #16]
 800b742:	4616      	mov	r6, r2
 800b744:	e7ba      	b.n	800b6bc <_printf_i+0x150>
 800b746:	680b      	ldr	r3, [r1, #0]
 800b748:	1d1a      	adds	r2, r3, #4
 800b74a:	600a      	str	r2, [r1, #0]
 800b74c:	681e      	ldr	r6, [r3, #0]
 800b74e:	6862      	ldr	r2, [r4, #4]
 800b750:	2100      	movs	r1, #0
 800b752:	4630      	mov	r0, r6
 800b754:	f7f4 fd44 	bl	80001e0 <memchr>
 800b758:	b108      	cbz	r0, 800b75e <_printf_i+0x1f2>
 800b75a:	1b80      	subs	r0, r0, r6
 800b75c:	6060      	str	r0, [r4, #4]
 800b75e:	6863      	ldr	r3, [r4, #4]
 800b760:	6123      	str	r3, [r4, #16]
 800b762:	2300      	movs	r3, #0
 800b764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b768:	e7a8      	b.n	800b6bc <_printf_i+0x150>
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	4632      	mov	r2, r6
 800b76e:	4649      	mov	r1, r9
 800b770:	4640      	mov	r0, r8
 800b772:	47d0      	blx	sl
 800b774:	3001      	adds	r0, #1
 800b776:	d0ab      	beq.n	800b6d0 <_printf_i+0x164>
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	079b      	lsls	r3, r3, #30
 800b77c:	d413      	bmi.n	800b7a6 <_printf_i+0x23a>
 800b77e:	68e0      	ldr	r0, [r4, #12]
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	4298      	cmp	r0, r3
 800b784:	bfb8      	it	lt
 800b786:	4618      	movlt	r0, r3
 800b788:	e7a4      	b.n	800b6d4 <_printf_i+0x168>
 800b78a:	2301      	movs	r3, #1
 800b78c:	4632      	mov	r2, r6
 800b78e:	4649      	mov	r1, r9
 800b790:	4640      	mov	r0, r8
 800b792:	47d0      	blx	sl
 800b794:	3001      	adds	r0, #1
 800b796:	d09b      	beq.n	800b6d0 <_printf_i+0x164>
 800b798:	3501      	adds	r5, #1
 800b79a:	68e3      	ldr	r3, [r4, #12]
 800b79c:	9903      	ldr	r1, [sp, #12]
 800b79e:	1a5b      	subs	r3, r3, r1
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	dcf2      	bgt.n	800b78a <_printf_i+0x21e>
 800b7a4:	e7eb      	b.n	800b77e <_printf_i+0x212>
 800b7a6:	2500      	movs	r5, #0
 800b7a8:	f104 0619 	add.w	r6, r4, #25
 800b7ac:	e7f5      	b.n	800b79a <_printf_i+0x22e>
 800b7ae:	bf00      	nop
 800b7b0:	0800dfee 	.word	0x0800dfee
 800b7b4:	0800dfff 	.word	0x0800dfff

0800b7b8 <siprintf>:
 800b7b8:	b40e      	push	{r1, r2, r3}
 800b7ba:	b500      	push	{lr}
 800b7bc:	b09c      	sub	sp, #112	; 0x70
 800b7be:	ab1d      	add	r3, sp, #116	; 0x74
 800b7c0:	9002      	str	r0, [sp, #8]
 800b7c2:	9006      	str	r0, [sp, #24]
 800b7c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7c8:	4809      	ldr	r0, [pc, #36]	; (800b7f0 <siprintf+0x38>)
 800b7ca:	9107      	str	r1, [sp, #28]
 800b7cc:	9104      	str	r1, [sp, #16]
 800b7ce:	4909      	ldr	r1, [pc, #36]	; (800b7f4 <siprintf+0x3c>)
 800b7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d4:	9105      	str	r1, [sp, #20]
 800b7d6:	6800      	ldr	r0, [r0, #0]
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	a902      	add	r1, sp, #8
 800b7dc:	f001 fbf2 	bl	800cfc4 <_svfiprintf_r>
 800b7e0:	9b02      	ldr	r3, [sp, #8]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	701a      	strb	r2, [r3, #0]
 800b7e6:	b01c      	add	sp, #112	; 0x70
 800b7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7ec:	b003      	add	sp, #12
 800b7ee:	4770      	bx	lr
 800b7f0:	20000a78 	.word	0x20000a78
 800b7f4:	ffff0208 	.word	0xffff0208

0800b7f8 <strcat>:
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	7814      	ldrb	r4, [r2, #0]
 800b7fe:	4613      	mov	r3, r2
 800b800:	3201      	adds	r2, #1
 800b802:	2c00      	cmp	r4, #0
 800b804:	d1fa      	bne.n	800b7fc <strcat+0x4>
 800b806:	3b01      	subs	r3, #1
 800b808:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b80c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b810:	2a00      	cmp	r2, #0
 800b812:	d1f9      	bne.n	800b808 <strcat+0x10>
 800b814:	bd10      	pop	{r4, pc}

0800b816 <strchr>:
 800b816:	b2c9      	uxtb	r1, r1
 800b818:	4603      	mov	r3, r0
 800b81a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b81e:	b11a      	cbz	r2, 800b828 <strchr+0x12>
 800b820:	428a      	cmp	r2, r1
 800b822:	d1f9      	bne.n	800b818 <strchr+0x2>
 800b824:	4618      	mov	r0, r3
 800b826:	4770      	bx	lr
 800b828:	2900      	cmp	r1, #0
 800b82a:	bf18      	it	ne
 800b82c:	2300      	movne	r3, #0
 800b82e:	e7f9      	b.n	800b824 <strchr+0xe>

0800b830 <strncmp>:
 800b830:	b510      	push	{r4, lr}
 800b832:	b16a      	cbz	r2, 800b850 <strncmp+0x20>
 800b834:	3901      	subs	r1, #1
 800b836:	1884      	adds	r4, r0, r2
 800b838:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b83c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b840:	4293      	cmp	r3, r2
 800b842:	d103      	bne.n	800b84c <strncmp+0x1c>
 800b844:	42a0      	cmp	r0, r4
 800b846:	d001      	beq.n	800b84c <strncmp+0x1c>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1f5      	bne.n	800b838 <strncmp+0x8>
 800b84c:	1a98      	subs	r0, r3, r2
 800b84e:	bd10      	pop	{r4, pc}
 800b850:	4610      	mov	r0, r2
 800b852:	e7fc      	b.n	800b84e <strncmp+0x1e>

0800b854 <strncpy>:
 800b854:	b510      	push	{r4, lr}
 800b856:	3901      	subs	r1, #1
 800b858:	4603      	mov	r3, r0
 800b85a:	b132      	cbz	r2, 800b86a <strncpy+0x16>
 800b85c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b860:	f803 4b01 	strb.w	r4, [r3], #1
 800b864:	3a01      	subs	r2, #1
 800b866:	2c00      	cmp	r4, #0
 800b868:	d1f7      	bne.n	800b85a <strncpy+0x6>
 800b86a:	441a      	add	r2, r3
 800b86c:	2100      	movs	r1, #0
 800b86e:	4293      	cmp	r3, r2
 800b870:	d100      	bne.n	800b874 <strncpy+0x20>
 800b872:	bd10      	pop	{r4, pc}
 800b874:	f803 1b01 	strb.w	r1, [r3], #1
 800b878:	e7f9      	b.n	800b86e <strncpy+0x1a>
	...

0800b87c <strtok>:
 800b87c:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <strtok+0x5c>)
 800b87e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b880:	681e      	ldr	r6, [r3, #0]
 800b882:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b884:	4605      	mov	r5, r0
 800b886:	b9fc      	cbnz	r4, 800b8c8 <strtok+0x4c>
 800b888:	2050      	movs	r0, #80	; 0x50
 800b88a:	9101      	str	r1, [sp, #4]
 800b88c:	f000 fefe 	bl	800c68c <malloc>
 800b890:	9901      	ldr	r1, [sp, #4]
 800b892:	65b0      	str	r0, [r6, #88]	; 0x58
 800b894:	4602      	mov	r2, r0
 800b896:	b920      	cbnz	r0, 800b8a2 <strtok+0x26>
 800b898:	4b10      	ldr	r3, [pc, #64]	; (800b8dc <strtok+0x60>)
 800b89a:	4811      	ldr	r0, [pc, #68]	; (800b8e0 <strtok+0x64>)
 800b89c:	2157      	movs	r1, #87	; 0x57
 800b89e:	f000 f849 	bl	800b934 <__assert_func>
 800b8a2:	e9c0 4400 	strd	r4, r4, [r0]
 800b8a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b8aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b8ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b8b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b8b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b8ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b8be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b8c2:	6184      	str	r4, [r0, #24]
 800b8c4:	7704      	strb	r4, [r0, #28]
 800b8c6:	6244      	str	r4, [r0, #36]	; 0x24
 800b8c8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	b002      	add	sp, #8
 800b8d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8d4:	f000 b806 	b.w	800b8e4 <__strtok_r>
 800b8d8:	20000a78 	.word	0x20000a78
 800b8dc:	0800e010 	.word	0x0800e010
 800b8e0:	0800e027 	.word	0x0800e027

0800b8e4 <__strtok_r>:
 800b8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8e6:	b908      	cbnz	r0, 800b8ec <__strtok_r+0x8>
 800b8e8:	6810      	ldr	r0, [r2, #0]
 800b8ea:	b188      	cbz	r0, 800b910 <__strtok_r+0x2c>
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b8f4:	460f      	mov	r7, r1
 800b8f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b8fa:	b91e      	cbnz	r6, 800b904 <__strtok_r+0x20>
 800b8fc:	b965      	cbnz	r5, 800b918 <__strtok_r+0x34>
 800b8fe:	6015      	str	r5, [r2, #0]
 800b900:	4628      	mov	r0, r5
 800b902:	e005      	b.n	800b910 <__strtok_r+0x2c>
 800b904:	42b5      	cmp	r5, r6
 800b906:	d1f6      	bne.n	800b8f6 <__strtok_r+0x12>
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1f0      	bne.n	800b8ee <__strtok_r+0xa>
 800b90c:	6014      	str	r4, [r2, #0]
 800b90e:	7003      	strb	r3, [r0, #0]
 800b910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b912:	461c      	mov	r4, r3
 800b914:	e00c      	b.n	800b930 <__strtok_r+0x4c>
 800b916:	b915      	cbnz	r5, 800b91e <__strtok_r+0x3a>
 800b918:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b91c:	460e      	mov	r6, r1
 800b91e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b922:	42ab      	cmp	r3, r5
 800b924:	d1f7      	bne.n	800b916 <__strtok_r+0x32>
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0f3      	beq.n	800b912 <__strtok_r+0x2e>
 800b92a:	2300      	movs	r3, #0
 800b92c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b930:	6014      	str	r4, [r2, #0]
 800b932:	e7ed      	b.n	800b910 <__strtok_r+0x2c>

0800b934 <__assert_func>:
 800b934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b936:	4614      	mov	r4, r2
 800b938:	461a      	mov	r2, r3
 800b93a:	4b09      	ldr	r3, [pc, #36]	; (800b960 <__assert_func+0x2c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4605      	mov	r5, r0
 800b940:	68d8      	ldr	r0, [r3, #12]
 800b942:	b14c      	cbz	r4, 800b958 <__assert_func+0x24>
 800b944:	4b07      	ldr	r3, [pc, #28]	; (800b964 <__assert_func+0x30>)
 800b946:	9100      	str	r1, [sp, #0]
 800b948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b94c:	4906      	ldr	r1, [pc, #24]	; (800b968 <__assert_func+0x34>)
 800b94e:	462b      	mov	r3, r5
 800b950:	f000 fe86 	bl	800c660 <fiprintf>
 800b954:	f001 fe60 	bl	800d618 <abort>
 800b958:	4b04      	ldr	r3, [pc, #16]	; (800b96c <__assert_func+0x38>)
 800b95a:	461c      	mov	r4, r3
 800b95c:	e7f3      	b.n	800b946 <__assert_func+0x12>
 800b95e:	bf00      	nop
 800b960:	20000a78 	.word	0x20000a78
 800b964:	0800e088 	.word	0x0800e088
 800b968:	0800e095 	.word	0x0800e095
 800b96c:	0800e0c3 	.word	0x0800e0c3

0800b970 <quorem>:
 800b970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b974:	6903      	ldr	r3, [r0, #16]
 800b976:	690c      	ldr	r4, [r1, #16]
 800b978:	42a3      	cmp	r3, r4
 800b97a:	4607      	mov	r7, r0
 800b97c:	f2c0 8081 	blt.w	800ba82 <quorem+0x112>
 800b980:	3c01      	subs	r4, #1
 800b982:	f101 0814 	add.w	r8, r1, #20
 800b986:	f100 0514 	add.w	r5, r0, #20
 800b98a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b998:	3301      	adds	r3, #1
 800b99a:	429a      	cmp	r2, r3
 800b99c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b9a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9a8:	d331      	bcc.n	800ba0e <quorem+0x9e>
 800b9aa:	f04f 0e00 	mov.w	lr, #0
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	46ac      	mov	ip, r5
 800b9b2:	46f2      	mov	sl, lr
 800b9b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b9b8:	b293      	uxth	r3, r2
 800b9ba:	fb06 e303 	mla	r3, r6, r3, lr
 800b9be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	ebaa 0303 	sub.w	r3, sl, r3
 800b9c8:	0c12      	lsrs	r2, r2, #16
 800b9ca:	f8dc a000 	ldr.w	sl, [ip]
 800b9ce:	fb06 e202 	mla	r2, r6, r2, lr
 800b9d2:	fa13 f38a 	uxtah	r3, r3, sl
 800b9d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b9da:	fa1f fa82 	uxth.w	sl, r2
 800b9de:	f8dc 2000 	ldr.w	r2, [ip]
 800b9e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b9e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9f0:	4581      	cmp	r9, r0
 800b9f2:	f84c 3b04 	str.w	r3, [ip], #4
 800b9f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b9fa:	d2db      	bcs.n	800b9b4 <quorem+0x44>
 800b9fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba00:	b92b      	cbnz	r3, 800ba0e <quorem+0x9e>
 800ba02:	9b01      	ldr	r3, [sp, #4]
 800ba04:	3b04      	subs	r3, #4
 800ba06:	429d      	cmp	r5, r3
 800ba08:	461a      	mov	r2, r3
 800ba0a:	d32e      	bcc.n	800ba6a <quorem+0xfa>
 800ba0c:	613c      	str	r4, [r7, #16]
 800ba0e:	4638      	mov	r0, r7
 800ba10:	f001 f8c2 	bl	800cb98 <__mcmp>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	db24      	blt.n	800ba62 <quorem+0xf2>
 800ba18:	3601      	adds	r6, #1
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f04f 0c00 	mov.w	ip, #0
 800ba20:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba24:	f8d0 e000 	ldr.w	lr, [r0]
 800ba28:	b293      	uxth	r3, r2
 800ba2a:	ebac 0303 	sub.w	r3, ip, r3
 800ba2e:	0c12      	lsrs	r2, r2, #16
 800ba30:	fa13 f38e 	uxtah	r3, r3, lr
 800ba34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba42:	45c1      	cmp	r9, r8
 800ba44:	f840 3b04 	str.w	r3, [r0], #4
 800ba48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba4c:	d2e8      	bcs.n	800ba20 <quorem+0xb0>
 800ba4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba56:	b922      	cbnz	r2, 800ba62 <quorem+0xf2>
 800ba58:	3b04      	subs	r3, #4
 800ba5a:	429d      	cmp	r5, r3
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	d30a      	bcc.n	800ba76 <quorem+0x106>
 800ba60:	613c      	str	r4, [r7, #16]
 800ba62:	4630      	mov	r0, r6
 800ba64:	b003      	add	sp, #12
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6a:	6812      	ldr	r2, [r2, #0]
 800ba6c:	3b04      	subs	r3, #4
 800ba6e:	2a00      	cmp	r2, #0
 800ba70:	d1cc      	bne.n	800ba0c <quorem+0x9c>
 800ba72:	3c01      	subs	r4, #1
 800ba74:	e7c7      	b.n	800ba06 <quorem+0x96>
 800ba76:	6812      	ldr	r2, [r2, #0]
 800ba78:	3b04      	subs	r3, #4
 800ba7a:	2a00      	cmp	r2, #0
 800ba7c:	d1f0      	bne.n	800ba60 <quorem+0xf0>
 800ba7e:	3c01      	subs	r4, #1
 800ba80:	e7eb      	b.n	800ba5a <quorem+0xea>
 800ba82:	2000      	movs	r0, #0
 800ba84:	e7ee      	b.n	800ba64 <quorem+0xf4>
	...

0800ba88 <_dtoa_r>:
 800ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	ed2d 8b02 	vpush	{d8}
 800ba90:	ec57 6b10 	vmov	r6, r7, d0
 800ba94:	b095      	sub	sp, #84	; 0x54
 800ba96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba9c:	9105      	str	r1, [sp, #20]
 800ba9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800baa2:	4604      	mov	r4, r0
 800baa4:	9209      	str	r2, [sp, #36]	; 0x24
 800baa6:	930f      	str	r3, [sp, #60]	; 0x3c
 800baa8:	b975      	cbnz	r5, 800bac8 <_dtoa_r+0x40>
 800baaa:	2010      	movs	r0, #16
 800baac:	f000 fdee 	bl	800c68c <malloc>
 800bab0:	4602      	mov	r2, r0
 800bab2:	6260      	str	r0, [r4, #36]	; 0x24
 800bab4:	b920      	cbnz	r0, 800bac0 <_dtoa_r+0x38>
 800bab6:	4bb2      	ldr	r3, [pc, #712]	; (800bd80 <_dtoa_r+0x2f8>)
 800bab8:	21ea      	movs	r1, #234	; 0xea
 800baba:	48b2      	ldr	r0, [pc, #712]	; (800bd84 <_dtoa_r+0x2fc>)
 800babc:	f7ff ff3a 	bl	800b934 <__assert_func>
 800bac0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bac4:	6005      	str	r5, [r0, #0]
 800bac6:	60c5      	str	r5, [r0, #12]
 800bac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baca:	6819      	ldr	r1, [r3, #0]
 800bacc:	b151      	cbz	r1, 800bae4 <_dtoa_r+0x5c>
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	604a      	str	r2, [r1, #4]
 800bad2:	2301      	movs	r3, #1
 800bad4:	4093      	lsls	r3, r2
 800bad6:	608b      	str	r3, [r1, #8]
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 fe1f 	bl	800c71c <_Bfree>
 800bade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	1e3b      	subs	r3, r7, #0
 800bae6:	bfb9      	ittee	lt
 800bae8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800baec:	9303      	strlt	r3, [sp, #12]
 800baee:	2300      	movge	r3, #0
 800baf0:	f8c8 3000 	strge.w	r3, [r8]
 800baf4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800baf8:	4ba3      	ldr	r3, [pc, #652]	; (800bd88 <_dtoa_r+0x300>)
 800bafa:	bfbc      	itt	lt
 800bafc:	2201      	movlt	r2, #1
 800bafe:	f8c8 2000 	strlt.w	r2, [r8]
 800bb02:	ea33 0309 	bics.w	r3, r3, r9
 800bb06:	d11b      	bne.n	800bb40 <_dtoa_r+0xb8>
 800bb08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb0a:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb14:	4333      	orrs	r3, r6
 800bb16:	f000 857a 	beq.w	800c60e <_dtoa_r+0xb86>
 800bb1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb1c:	b963      	cbnz	r3, 800bb38 <_dtoa_r+0xb0>
 800bb1e:	4b9b      	ldr	r3, [pc, #620]	; (800bd8c <_dtoa_r+0x304>)
 800bb20:	e024      	b.n	800bb6c <_dtoa_r+0xe4>
 800bb22:	4b9b      	ldr	r3, [pc, #620]	; (800bd90 <_dtoa_r+0x308>)
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	3308      	adds	r3, #8
 800bb28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	9800      	ldr	r0, [sp, #0]
 800bb2e:	b015      	add	sp, #84	; 0x54
 800bb30:	ecbd 8b02 	vpop	{d8}
 800bb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb38:	4b94      	ldr	r3, [pc, #592]	; (800bd8c <_dtoa_r+0x304>)
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	3303      	adds	r3, #3
 800bb3e:	e7f3      	b.n	800bb28 <_dtoa_r+0xa0>
 800bb40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb44:	2200      	movs	r2, #0
 800bb46:	ec51 0b17 	vmov	r0, r1, d7
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bb50:	f7f4 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb54:	4680      	mov	r8, r0
 800bb56:	b158      	cbz	r0, 800bb70 <_dtoa_r+0xe8>
 800bb58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	6013      	str	r3, [r2, #0]
 800bb5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 8551 	beq.w	800c608 <_dtoa_r+0xb80>
 800bb66:	488b      	ldr	r0, [pc, #556]	; (800bd94 <_dtoa_r+0x30c>)
 800bb68:	6018      	str	r0, [r3, #0]
 800bb6a:	1e43      	subs	r3, r0, #1
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	e7dd      	b.n	800bb2c <_dtoa_r+0xa4>
 800bb70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bb74:	aa12      	add	r2, sp, #72	; 0x48
 800bb76:	a913      	add	r1, sp, #76	; 0x4c
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f001 f8b1 	bl	800cce0 <__d2b>
 800bb7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb82:	4683      	mov	fp, r0
 800bb84:	2d00      	cmp	r5, #0
 800bb86:	d07c      	beq.n	800bc82 <_dtoa_r+0x1fa>
 800bb88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bb8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bb96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bb9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bb9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bba2:	4b7d      	ldr	r3, [pc, #500]	; (800bd98 <_dtoa_r+0x310>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	4630      	mov	r0, r6
 800bba8:	4639      	mov	r1, r7
 800bbaa:	f7f4 fb6d 	bl	8000288 <__aeabi_dsub>
 800bbae:	a36e      	add	r3, pc, #440	; (adr r3, 800bd68 <_dtoa_r+0x2e0>)
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	f7f4 fd20 	bl	80005f8 <__aeabi_dmul>
 800bbb8:	a36d      	add	r3, pc, #436	; (adr r3, 800bd70 <_dtoa_r+0x2e8>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fb65 	bl	800028c <__adddf3>
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	460f      	mov	r7, r1
 800bbc8:	f7f4 fcac 	bl	8000524 <__aeabi_i2d>
 800bbcc:	a36a      	add	r3, pc, #424	; (adr r3, 800bd78 <_dtoa_r+0x2f0>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	f7f4 fd11 	bl	80005f8 <__aeabi_dmul>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fb55 	bl	800028c <__adddf3>
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	f7f4 ffb7 	bl	8000b58 <__aeabi_d2iz>
 800bbea:	2200      	movs	r2, #0
 800bbec:	4682      	mov	sl, r0
 800bbee:	2300      	movs	r3, #0
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	f7f4 ff72 	bl	8000adc <__aeabi_dcmplt>
 800bbf8:	b148      	cbz	r0, 800bc0e <_dtoa_r+0x186>
 800bbfa:	4650      	mov	r0, sl
 800bbfc:	f7f4 fc92 	bl	8000524 <__aeabi_i2d>
 800bc00:	4632      	mov	r2, r6
 800bc02:	463b      	mov	r3, r7
 800bc04:	f7f4 ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc08:	b908      	cbnz	r0, 800bc0e <_dtoa_r+0x186>
 800bc0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc0e:	f1ba 0f16 	cmp.w	sl, #22
 800bc12:	d854      	bhi.n	800bcbe <_dtoa_r+0x236>
 800bc14:	4b61      	ldr	r3, [pc, #388]	; (800bd9c <_dtoa_r+0x314>)
 800bc16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc22:	f7f4 ff5b 	bl	8000adc <__aeabi_dcmplt>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d04b      	beq.n	800bcc2 <_dtoa_r+0x23a>
 800bc2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc2e:	2300      	movs	r3, #0
 800bc30:	930e      	str	r3, [sp, #56]	; 0x38
 800bc32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc34:	1b5d      	subs	r5, r3, r5
 800bc36:	1e6b      	subs	r3, r5, #1
 800bc38:	9304      	str	r3, [sp, #16]
 800bc3a:	bf43      	ittte	mi
 800bc3c:	2300      	movmi	r3, #0
 800bc3e:	f1c5 0801 	rsbmi	r8, r5, #1
 800bc42:	9304      	strmi	r3, [sp, #16]
 800bc44:	f04f 0800 	movpl.w	r8, #0
 800bc48:	f1ba 0f00 	cmp.w	sl, #0
 800bc4c:	db3b      	blt.n	800bcc6 <_dtoa_r+0x23e>
 800bc4e:	9b04      	ldr	r3, [sp, #16]
 800bc50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bc54:	4453      	add	r3, sl
 800bc56:	9304      	str	r3, [sp, #16]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	9306      	str	r3, [sp, #24]
 800bc5c:	9b05      	ldr	r3, [sp, #20]
 800bc5e:	2b09      	cmp	r3, #9
 800bc60:	d869      	bhi.n	800bd36 <_dtoa_r+0x2ae>
 800bc62:	2b05      	cmp	r3, #5
 800bc64:	bfc4      	itt	gt
 800bc66:	3b04      	subgt	r3, #4
 800bc68:	9305      	strgt	r3, [sp, #20]
 800bc6a:	9b05      	ldr	r3, [sp, #20]
 800bc6c:	f1a3 0302 	sub.w	r3, r3, #2
 800bc70:	bfcc      	ite	gt
 800bc72:	2500      	movgt	r5, #0
 800bc74:	2501      	movle	r5, #1
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d869      	bhi.n	800bd4e <_dtoa_r+0x2c6>
 800bc7a:	e8df f003 	tbb	[pc, r3]
 800bc7e:	4e2c      	.short	0x4e2c
 800bc80:	5a4c      	.short	0x5a4c
 800bc82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bc86:	441d      	add	r5, r3
 800bc88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bc8c:	2b20      	cmp	r3, #32
 800bc8e:	bfc1      	itttt	gt
 800bc90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bc98:	fa09 f303 	lslgt.w	r3, r9, r3
 800bc9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bca0:	bfda      	itte	le
 800bca2:	f1c3 0320 	rsble	r3, r3, #32
 800bca6:	fa06 f003 	lslle.w	r0, r6, r3
 800bcaa:	4318      	orrgt	r0, r3
 800bcac:	f7f4 fc2a 	bl	8000504 <__aeabi_ui2d>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bcb8:	3d01      	subs	r5, #1
 800bcba:	9310      	str	r3, [sp, #64]	; 0x40
 800bcbc:	e771      	b.n	800bba2 <_dtoa_r+0x11a>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e7b6      	b.n	800bc30 <_dtoa_r+0x1a8>
 800bcc2:	900e      	str	r0, [sp, #56]	; 0x38
 800bcc4:	e7b5      	b.n	800bc32 <_dtoa_r+0x1aa>
 800bcc6:	f1ca 0300 	rsb	r3, sl, #0
 800bcca:	9306      	str	r3, [sp, #24]
 800bccc:	2300      	movs	r3, #0
 800bcce:	eba8 080a 	sub.w	r8, r8, sl
 800bcd2:	930d      	str	r3, [sp, #52]	; 0x34
 800bcd4:	e7c2      	b.n	800bc5c <_dtoa_r+0x1d4>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9308      	str	r3, [sp, #32]
 800bcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dc39      	bgt.n	800bd54 <_dtoa_r+0x2cc>
 800bce0:	f04f 0901 	mov.w	r9, #1
 800bce4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bce8:	464b      	mov	r3, r9
 800bcea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bcee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	6042      	str	r2, [r0, #4]
 800bcf4:	2204      	movs	r2, #4
 800bcf6:	f102 0614 	add.w	r6, r2, #20
 800bcfa:	429e      	cmp	r6, r3
 800bcfc:	6841      	ldr	r1, [r0, #4]
 800bcfe:	d92f      	bls.n	800bd60 <_dtoa_r+0x2d8>
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 fccb 	bl	800c69c <_Balloc>
 800bd06:	9000      	str	r0, [sp, #0]
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d14b      	bne.n	800bda4 <_dtoa_r+0x31c>
 800bd0c:	4b24      	ldr	r3, [pc, #144]	; (800bda0 <_dtoa_r+0x318>)
 800bd0e:	4602      	mov	r2, r0
 800bd10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd14:	e6d1      	b.n	800baba <_dtoa_r+0x32>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e7de      	b.n	800bcd8 <_dtoa_r+0x250>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	9308      	str	r3, [sp, #32]
 800bd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd20:	eb0a 0903 	add.w	r9, sl, r3
 800bd24:	f109 0301 	add.w	r3, r9, #1
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	9301      	str	r3, [sp, #4]
 800bd2c:	bfb8      	it	lt
 800bd2e:	2301      	movlt	r3, #1
 800bd30:	e7dd      	b.n	800bcee <_dtoa_r+0x266>
 800bd32:	2301      	movs	r3, #1
 800bd34:	e7f2      	b.n	800bd1c <_dtoa_r+0x294>
 800bd36:	2501      	movs	r5, #1
 800bd38:	2300      	movs	r3, #0
 800bd3a:	9305      	str	r3, [sp, #20]
 800bd3c:	9508      	str	r5, [sp, #32]
 800bd3e:	f04f 39ff 	mov.w	r9, #4294967295
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8cd 9004 	str.w	r9, [sp, #4]
 800bd48:	2312      	movs	r3, #18
 800bd4a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd4c:	e7cf      	b.n	800bcee <_dtoa_r+0x266>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	9308      	str	r3, [sp, #32]
 800bd52:	e7f4      	b.n	800bd3e <_dtoa_r+0x2b6>
 800bd54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bd58:	f8cd 9004 	str.w	r9, [sp, #4]
 800bd5c:	464b      	mov	r3, r9
 800bd5e:	e7c6      	b.n	800bcee <_dtoa_r+0x266>
 800bd60:	3101      	adds	r1, #1
 800bd62:	6041      	str	r1, [r0, #4]
 800bd64:	0052      	lsls	r2, r2, #1
 800bd66:	e7c6      	b.n	800bcf6 <_dtoa_r+0x26e>
 800bd68:	636f4361 	.word	0x636f4361
 800bd6c:	3fd287a7 	.word	0x3fd287a7
 800bd70:	8b60c8b3 	.word	0x8b60c8b3
 800bd74:	3fc68a28 	.word	0x3fc68a28
 800bd78:	509f79fb 	.word	0x509f79fb
 800bd7c:	3fd34413 	.word	0x3fd34413
 800bd80:	0800e010 	.word	0x0800e010
 800bd84:	0800e0d1 	.word	0x0800e0d1
 800bd88:	7ff00000 	.word	0x7ff00000
 800bd8c:	0800e0cd 	.word	0x0800e0cd
 800bd90:	0800e0c4 	.word	0x0800e0c4
 800bd94:	0800dfed 	.word	0x0800dfed
 800bd98:	3ff80000 	.word	0x3ff80000
 800bd9c:	0800e1d0 	.word	0x0800e1d0
 800bda0:	0800e130 	.word	0x0800e130
 800bda4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bda6:	9a00      	ldr	r2, [sp, #0]
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	9b01      	ldr	r3, [sp, #4]
 800bdac:	2b0e      	cmp	r3, #14
 800bdae:	f200 80ad 	bhi.w	800bf0c <_dtoa_r+0x484>
 800bdb2:	2d00      	cmp	r5, #0
 800bdb4:	f000 80aa 	beq.w	800bf0c <_dtoa_r+0x484>
 800bdb8:	f1ba 0f00 	cmp.w	sl, #0
 800bdbc:	dd36      	ble.n	800be2c <_dtoa_r+0x3a4>
 800bdbe:	4ac3      	ldr	r2, [pc, #780]	; (800c0cc <_dtoa_r+0x644>)
 800bdc0:	f00a 030f 	and.w	r3, sl, #15
 800bdc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bdc8:	ed93 7b00 	vldr	d7, [r3]
 800bdcc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bdd0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bdd4:	eeb0 8a47 	vmov.f32	s16, s14
 800bdd8:	eef0 8a67 	vmov.f32	s17, s15
 800bddc:	d016      	beq.n	800be0c <_dtoa_r+0x384>
 800bdde:	4bbc      	ldr	r3, [pc, #752]	; (800c0d0 <_dtoa_r+0x648>)
 800bde0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bde4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bde8:	f7f4 fd30 	bl	800084c <__aeabi_ddiv>
 800bdec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdf0:	f007 070f 	and.w	r7, r7, #15
 800bdf4:	2503      	movs	r5, #3
 800bdf6:	4eb6      	ldr	r6, [pc, #728]	; (800c0d0 <_dtoa_r+0x648>)
 800bdf8:	b957      	cbnz	r7, 800be10 <_dtoa_r+0x388>
 800bdfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfe:	ec53 2b18 	vmov	r2, r3, d8
 800be02:	f7f4 fd23 	bl	800084c <__aeabi_ddiv>
 800be06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be0a:	e029      	b.n	800be60 <_dtoa_r+0x3d8>
 800be0c:	2502      	movs	r5, #2
 800be0e:	e7f2      	b.n	800bdf6 <_dtoa_r+0x36e>
 800be10:	07f9      	lsls	r1, r7, #31
 800be12:	d508      	bpl.n	800be26 <_dtoa_r+0x39e>
 800be14:	ec51 0b18 	vmov	r0, r1, d8
 800be18:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be1c:	f7f4 fbec 	bl	80005f8 <__aeabi_dmul>
 800be20:	ec41 0b18 	vmov	d8, r0, r1
 800be24:	3501      	adds	r5, #1
 800be26:	107f      	asrs	r7, r7, #1
 800be28:	3608      	adds	r6, #8
 800be2a:	e7e5      	b.n	800bdf8 <_dtoa_r+0x370>
 800be2c:	f000 80a6 	beq.w	800bf7c <_dtoa_r+0x4f4>
 800be30:	f1ca 0600 	rsb	r6, sl, #0
 800be34:	4ba5      	ldr	r3, [pc, #660]	; (800c0cc <_dtoa_r+0x644>)
 800be36:	4fa6      	ldr	r7, [pc, #664]	; (800c0d0 <_dtoa_r+0x648>)
 800be38:	f006 020f 	and.w	r2, r6, #15
 800be3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800be48:	f7f4 fbd6 	bl	80005f8 <__aeabi_dmul>
 800be4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be50:	1136      	asrs	r6, r6, #4
 800be52:	2300      	movs	r3, #0
 800be54:	2502      	movs	r5, #2
 800be56:	2e00      	cmp	r6, #0
 800be58:	f040 8085 	bne.w	800bf66 <_dtoa_r+0x4de>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1d2      	bne.n	800be06 <_dtoa_r+0x37e>
 800be60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 808c 	beq.w	800bf80 <_dtoa_r+0x4f8>
 800be68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be6c:	4b99      	ldr	r3, [pc, #612]	; (800c0d4 <_dtoa_r+0x64c>)
 800be6e:	2200      	movs	r2, #0
 800be70:	4630      	mov	r0, r6
 800be72:	4639      	mov	r1, r7
 800be74:	f7f4 fe32 	bl	8000adc <__aeabi_dcmplt>
 800be78:	2800      	cmp	r0, #0
 800be7a:	f000 8081 	beq.w	800bf80 <_dtoa_r+0x4f8>
 800be7e:	9b01      	ldr	r3, [sp, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d07d      	beq.n	800bf80 <_dtoa_r+0x4f8>
 800be84:	f1b9 0f00 	cmp.w	r9, #0
 800be88:	dd3c      	ble.n	800bf04 <_dtoa_r+0x47c>
 800be8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800be8e:	9307      	str	r3, [sp, #28]
 800be90:	2200      	movs	r2, #0
 800be92:	4b91      	ldr	r3, [pc, #580]	; (800c0d8 <_dtoa_r+0x650>)
 800be94:	4630      	mov	r0, r6
 800be96:	4639      	mov	r1, r7
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bea0:	3501      	adds	r5, #1
 800bea2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bea6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800beaa:	4628      	mov	r0, r5
 800beac:	f7f4 fb3a 	bl	8000524 <__aeabi_i2d>
 800beb0:	4632      	mov	r2, r6
 800beb2:	463b      	mov	r3, r7
 800beb4:	f7f4 fba0 	bl	80005f8 <__aeabi_dmul>
 800beb8:	4b88      	ldr	r3, [pc, #544]	; (800c0dc <_dtoa_r+0x654>)
 800beba:	2200      	movs	r2, #0
 800bebc:	f7f4 f9e6 	bl	800028c <__adddf3>
 800bec0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bec8:	9303      	str	r3, [sp, #12]
 800beca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800becc:	2b00      	cmp	r3, #0
 800bece:	d15c      	bne.n	800bf8a <_dtoa_r+0x502>
 800bed0:	4b83      	ldr	r3, [pc, #524]	; (800c0e0 <_dtoa_r+0x658>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	4630      	mov	r0, r6
 800bed6:	4639      	mov	r1, r7
 800bed8:	f7f4 f9d6 	bl	8000288 <__aeabi_dsub>
 800bedc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bee0:	4606      	mov	r6, r0
 800bee2:	460f      	mov	r7, r1
 800bee4:	f7f4 fe18 	bl	8000b18 <__aeabi_dcmpgt>
 800bee8:	2800      	cmp	r0, #0
 800beea:	f040 8296 	bne.w	800c41a <_dtoa_r+0x992>
 800beee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bef2:	4630      	mov	r0, r6
 800bef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bef8:	4639      	mov	r1, r7
 800befa:	f7f4 fdef 	bl	8000adc <__aeabi_dcmplt>
 800befe:	2800      	cmp	r0, #0
 800bf00:	f040 8288 	bne.w	800c414 <_dtoa_r+0x98c>
 800bf04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bf08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f2c0 8158 	blt.w	800c1c4 <_dtoa_r+0x73c>
 800bf14:	f1ba 0f0e 	cmp.w	sl, #14
 800bf18:	f300 8154 	bgt.w	800c1c4 <_dtoa_r+0x73c>
 800bf1c:	4b6b      	ldr	r3, [pc, #428]	; (800c0cc <_dtoa_r+0x644>)
 800bf1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf22:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f280 80e3 	bge.w	800c0f4 <_dtoa_r+0x66c>
 800bf2e:	9b01      	ldr	r3, [sp, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f300 80df 	bgt.w	800c0f4 <_dtoa_r+0x66c>
 800bf36:	f040 826d 	bne.w	800c414 <_dtoa_r+0x98c>
 800bf3a:	4b69      	ldr	r3, [pc, #420]	; (800c0e0 <_dtoa_r+0x658>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	4640      	mov	r0, r8
 800bf40:	4649      	mov	r1, r9
 800bf42:	f7f4 fb59 	bl	80005f8 <__aeabi_dmul>
 800bf46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf4a:	f7f4 fddb 	bl	8000b04 <__aeabi_dcmpge>
 800bf4e:	9e01      	ldr	r6, [sp, #4]
 800bf50:	4637      	mov	r7, r6
 800bf52:	2800      	cmp	r0, #0
 800bf54:	f040 8243 	bne.w	800c3de <_dtoa_r+0x956>
 800bf58:	9d00      	ldr	r5, [sp, #0]
 800bf5a:	2331      	movs	r3, #49	; 0x31
 800bf5c:	f805 3b01 	strb.w	r3, [r5], #1
 800bf60:	f10a 0a01 	add.w	sl, sl, #1
 800bf64:	e23f      	b.n	800c3e6 <_dtoa_r+0x95e>
 800bf66:	07f2      	lsls	r2, r6, #31
 800bf68:	d505      	bpl.n	800bf76 <_dtoa_r+0x4ee>
 800bf6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf6e:	f7f4 fb43 	bl	80005f8 <__aeabi_dmul>
 800bf72:	3501      	adds	r5, #1
 800bf74:	2301      	movs	r3, #1
 800bf76:	1076      	asrs	r6, r6, #1
 800bf78:	3708      	adds	r7, #8
 800bf7a:	e76c      	b.n	800be56 <_dtoa_r+0x3ce>
 800bf7c:	2502      	movs	r5, #2
 800bf7e:	e76f      	b.n	800be60 <_dtoa_r+0x3d8>
 800bf80:	9b01      	ldr	r3, [sp, #4]
 800bf82:	f8cd a01c 	str.w	sl, [sp, #28]
 800bf86:	930c      	str	r3, [sp, #48]	; 0x30
 800bf88:	e78d      	b.n	800bea6 <_dtoa_r+0x41e>
 800bf8a:	9900      	ldr	r1, [sp, #0]
 800bf8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bf8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf90:	4b4e      	ldr	r3, [pc, #312]	; (800c0cc <_dtoa_r+0x644>)
 800bf92:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf96:	4401      	add	r1, r0
 800bf98:	9102      	str	r1, [sp, #8]
 800bf9a:	9908      	ldr	r1, [sp, #32]
 800bf9c:	eeb0 8a47 	vmov.f32	s16, s14
 800bfa0:	eef0 8a67 	vmov.f32	s17, s15
 800bfa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfac:	2900      	cmp	r1, #0
 800bfae:	d045      	beq.n	800c03c <_dtoa_r+0x5b4>
 800bfb0:	494c      	ldr	r1, [pc, #304]	; (800c0e4 <_dtoa_r+0x65c>)
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f7f4 fc4a 	bl	800084c <__aeabi_ddiv>
 800bfb8:	ec53 2b18 	vmov	r2, r3, d8
 800bfbc:	f7f4 f964 	bl	8000288 <__aeabi_dsub>
 800bfc0:	9d00      	ldr	r5, [sp, #0]
 800bfc2:	ec41 0b18 	vmov	d8, r0, r1
 800bfc6:	4639      	mov	r1, r7
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f7f4 fdc5 	bl	8000b58 <__aeabi_d2iz>
 800bfce:	900c      	str	r0, [sp, #48]	; 0x30
 800bfd0:	f7f4 faa8 	bl	8000524 <__aeabi_i2d>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4630      	mov	r0, r6
 800bfda:	4639      	mov	r1, r7
 800bfdc:	f7f4 f954 	bl	8000288 <__aeabi_dsub>
 800bfe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfe2:	3330      	adds	r3, #48	; 0x30
 800bfe4:	f805 3b01 	strb.w	r3, [r5], #1
 800bfe8:	ec53 2b18 	vmov	r2, r3, d8
 800bfec:	4606      	mov	r6, r0
 800bfee:	460f      	mov	r7, r1
 800bff0:	f7f4 fd74 	bl	8000adc <__aeabi_dcmplt>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d165      	bne.n	800c0c4 <_dtoa_r+0x63c>
 800bff8:	4632      	mov	r2, r6
 800bffa:	463b      	mov	r3, r7
 800bffc:	4935      	ldr	r1, [pc, #212]	; (800c0d4 <_dtoa_r+0x64c>)
 800bffe:	2000      	movs	r0, #0
 800c000:	f7f4 f942 	bl	8000288 <__aeabi_dsub>
 800c004:	ec53 2b18 	vmov	r2, r3, d8
 800c008:	f7f4 fd68 	bl	8000adc <__aeabi_dcmplt>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	f040 80b9 	bne.w	800c184 <_dtoa_r+0x6fc>
 800c012:	9b02      	ldr	r3, [sp, #8]
 800c014:	429d      	cmp	r5, r3
 800c016:	f43f af75 	beq.w	800bf04 <_dtoa_r+0x47c>
 800c01a:	4b2f      	ldr	r3, [pc, #188]	; (800c0d8 <_dtoa_r+0x650>)
 800c01c:	ec51 0b18 	vmov	r0, r1, d8
 800c020:	2200      	movs	r2, #0
 800c022:	f7f4 fae9 	bl	80005f8 <__aeabi_dmul>
 800c026:	4b2c      	ldr	r3, [pc, #176]	; (800c0d8 <_dtoa_r+0x650>)
 800c028:	ec41 0b18 	vmov	d8, r0, r1
 800c02c:	2200      	movs	r2, #0
 800c02e:	4630      	mov	r0, r6
 800c030:	4639      	mov	r1, r7
 800c032:	f7f4 fae1 	bl	80005f8 <__aeabi_dmul>
 800c036:	4606      	mov	r6, r0
 800c038:	460f      	mov	r7, r1
 800c03a:	e7c4      	b.n	800bfc6 <_dtoa_r+0x53e>
 800c03c:	ec51 0b17 	vmov	r0, r1, d7
 800c040:	f7f4 fada 	bl	80005f8 <__aeabi_dmul>
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	9d00      	ldr	r5, [sp, #0]
 800c048:	930c      	str	r3, [sp, #48]	; 0x30
 800c04a:	ec41 0b18 	vmov	d8, r0, r1
 800c04e:	4639      	mov	r1, r7
 800c050:	4630      	mov	r0, r6
 800c052:	f7f4 fd81 	bl	8000b58 <__aeabi_d2iz>
 800c056:	9011      	str	r0, [sp, #68]	; 0x44
 800c058:	f7f4 fa64 	bl	8000524 <__aeabi_i2d>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4630      	mov	r0, r6
 800c062:	4639      	mov	r1, r7
 800c064:	f7f4 f910 	bl	8000288 <__aeabi_dsub>
 800c068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c06a:	3330      	adds	r3, #48	; 0x30
 800c06c:	f805 3b01 	strb.w	r3, [r5], #1
 800c070:	9b02      	ldr	r3, [sp, #8]
 800c072:	429d      	cmp	r5, r3
 800c074:	4606      	mov	r6, r0
 800c076:	460f      	mov	r7, r1
 800c078:	f04f 0200 	mov.w	r2, #0
 800c07c:	d134      	bne.n	800c0e8 <_dtoa_r+0x660>
 800c07e:	4b19      	ldr	r3, [pc, #100]	; (800c0e4 <_dtoa_r+0x65c>)
 800c080:	ec51 0b18 	vmov	r0, r1, d8
 800c084:	f7f4 f902 	bl	800028c <__adddf3>
 800c088:	4602      	mov	r2, r0
 800c08a:	460b      	mov	r3, r1
 800c08c:	4630      	mov	r0, r6
 800c08e:	4639      	mov	r1, r7
 800c090:	f7f4 fd42 	bl	8000b18 <__aeabi_dcmpgt>
 800c094:	2800      	cmp	r0, #0
 800c096:	d175      	bne.n	800c184 <_dtoa_r+0x6fc>
 800c098:	ec53 2b18 	vmov	r2, r3, d8
 800c09c:	4911      	ldr	r1, [pc, #68]	; (800c0e4 <_dtoa_r+0x65c>)
 800c09e:	2000      	movs	r0, #0
 800c0a0:	f7f4 f8f2 	bl	8000288 <__aeabi_dsub>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	4639      	mov	r1, r7
 800c0ac:	f7f4 fd16 	bl	8000adc <__aeabi_dcmplt>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	f43f af27 	beq.w	800bf04 <_dtoa_r+0x47c>
 800c0b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0b8:	1e6b      	subs	r3, r5, #1
 800c0ba:	930c      	str	r3, [sp, #48]	; 0x30
 800c0bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c0c0:	2b30      	cmp	r3, #48	; 0x30
 800c0c2:	d0f8      	beq.n	800c0b6 <_dtoa_r+0x62e>
 800c0c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c0c8:	e04a      	b.n	800c160 <_dtoa_r+0x6d8>
 800c0ca:	bf00      	nop
 800c0cc:	0800e1d0 	.word	0x0800e1d0
 800c0d0:	0800e1a8 	.word	0x0800e1a8
 800c0d4:	3ff00000 	.word	0x3ff00000
 800c0d8:	40240000 	.word	0x40240000
 800c0dc:	401c0000 	.word	0x401c0000
 800c0e0:	40140000 	.word	0x40140000
 800c0e4:	3fe00000 	.word	0x3fe00000
 800c0e8:	4baf      	ldr	r3, [pc, #700]	; (800c3a8 <_dtoa_r+0x920>)
 800c0ea:	f7f4 fa85 	bl	80005f8 <__aeabi_dmul>
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	460f      	mov	r7, r1
 800c0f2:	e7ac      	b.n	800c04e <_dtoa_r+0x5c6>
 800c0f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0f8:	9d00      	ldr	r5, [sp, #0]
 800c0fa:	4642      	mov	r2, r8
 800c0fc:	464b      	mov	r3, r9
 800c0fe:	4630      	mov	r0, r6
 800c100:	4639      	mov	r1, r7
 800c102:	f7f4 fba3 	bl	800084c <__aeabi_ddiv>
 800c106:	f7f4 fd27 	bl	8000b58 <__aeabi_d2iz>
 800c10a:	9002      	str	r0, [sp, #8]
 800c10c:	f7f4 fa0a 	bl	8000524 <__aeabi_i2d>
 800c110:	4642      	mov	r2, r8
 800c112:	464b      	mov	r3, r9
 800c114:	f7f4 fa70 	bl	80005f8 <__aeabi_dmul>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4630      	mov	r0, r6
 800c11e:	4639      	mov	r1, r7
 800c120:	f7f4 f8b2 	bl	8000288 <__aeabi_dsub>
 800c124:	9e02      	ldr	r6, [sp, #8]
 800c126:	9f01      	ldr	r7, [sp, #4]
 800c128:	3630      	adds	r6, #48	; 0x30
 800c12a:	f805 6b01 	strb.w	r6, [r5], #1
 800c12e:	9e00      	ldr	r6, [sp, #0]
 800c130:	1bae      	subs	r6, r5, r6
 800c132:	42b7      	cmp	r7, r6
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	d137      	bne.n	800c1aa <_dtoa_r+0x722>
 800c13a:	f7f4 f8a7 	bl	800028c <__adddf3>
 800c13e:	4642      	mov	r2, r8
 800c140:	464b      	mov	r3, r9
 800c142:	4606      	mov	r6, r0
 800c144:	460f      	mov	r7, r1
 800c146:	f7f4 fce7 	bl	8000b18 <__aeabi_dcmpgt>
 800c14a:	b9c8      	cbnz	r0, 800c180 <_dtoa_r+0x6f8>
 800c14c:	4642      	mov	r2, r8
 800c14e:	464b      	mov	r3, r9
 800c150:	4630      	mov	r0, r6
 800c152:	4639      	mov	r1, r7
 800c154:	f7f4 fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c158:	b110      	cbz	r0, 800c160 <_dtoa_r+0x6d8>
 800c15a:	9b02      	ldr	r3, [sp, #8]
 800c15c:	07d9      	lsls	r1, r3, #31
 800c15e:	d40f      	bmi.n	800c180 <_dtoa_r+0x6f8>
 800c160:	4620      	mov	r0, r4
 800c162:	4659      	mov	r1, fp
 800c164:	f000 fada 	bl	800c71c <_Bfree>
 800c168:	2300      	movs	r3, #0
 800c16a:	702b      	strb	r3, [r5, #0]
 800c16c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c16e:	f10a 0001 	add.w	r0, sl, #1
 800c172:	6018      	str	r0, [r3, #0]
 800c174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c176:	2b00      	cmp	r3, #0
 800c178:	f43f acd8 	beq.w	800bb2c <_dtoa_r+0xa4>
 800c17c:	601d      	str	r5, [r3, #0]
 800c17e:	e4d5      	b.n	800bb2c <_dtoa_r+0xa4>
 800c180:	f8cd a01c 	str.w	sl, [sp, #28]
 800c184:	462b      	mov	r3, r5
 800c186:	461d      	mov	r5, r3
 800c188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c18c:	2a39      	cmp	r2, #57	; 0x39
 800c18e:	d108      	bne.n	800c1a2 <_dtoa_r+0x71a>
 800c190:	9a00      	ldr	r2, [sp, #0]
 800c192:	429a      	cmp	r2, r3
 800c194:	d1f7      	bne.n	800c186 <_dtoa_r+0x6fe>
 800c196:	9a07      	ldr	r2, [sp, #28]
 800c198:	9900      	ldr	r1, [sp, #0]
 800c19a:	3201      	adds	r2, #1
 800c19c:	9207      	str	r2, [sp, #28]
 800c19e:	2230      	movs	r2, #48	; 0x30
 800c1a0:	700a      	strb	r2, [r1, #0]
 800c1a2:	781a      	ldrb	r2, [r3, #0]
 800c1a4:	3201      	adds	r2, #1
 800c1a6:	701a      	strb	r2, [r3, #0]
 800c1a8:	e78c      	b.n	800c0c4 <_dtoa_r+0x63c>
 800c1aa:	4b7f      	ldr	r3, [pc, #508]	; (800c3a8 <_dtoa_r+0x920>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f7f4 fa23 	bl	80005f8 <__aeabi_dmul>
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	460f      	mov	r7, r1
 800c1ba:	f7f4 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d09b      	beq.n	800c0fa <_dtoa_r+0x672>
 800c1c2:	e7cd      	b.n	800c160 <_dtoa_r+0x6d8>
 800c1c4:	9a08      	ldr	r2, [sp, #32]
 800c1c6:	2a00      	cmp	r2, #0
 800c1c8:	f000 80c4 	beq.w	800c354 <_dtoa_r+0x8cc>
 800c1cc:	9a05      	ldr	r2, [sp, #20]
 800c1ce:	2a01      	cmp	r2, #1
 800c1d0:	f300 80a8 	bgt.w	800c324 <_dtoa_r+0x89c>
 800c1d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c1d6:	2a00      	cmp	r2, #0
 800c1d8:	f000 80a0 	beq.w	800c31c <_dtoa_r+0x894>
 800c1dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1e0:	9e06      	ldr	r6, [sp, #24]
 800c1e2:	4645      	mov	r5, r8
 800c1e4:	9a04      	ldr	r2, [sp, #16]
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	441a      	add	r2, r3
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	4498      	add	r8, r3
 800c1ee:	9204      	str	r2, [sp, #16]
 800c1f0:	f000 fb50 	bl	800c894 <__i2b>
 800c1f4:	4607      	mov	r7, r0
 800c1f6:	2d00      	cmp	r5, #0
 800c1f8:	dd0b      	ble.n	800c212 <_dtoa_r+0x78a>
 800c1fa:	9b04      	ldr	r3, [sp, #16]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dd08      	ble.n	800c212 <_dtoa_r+0x78a>
 800c200:	42ab      	cmp	r3, r5
 800c202:	9a04      	ldr	r2, [sp, #16]
 800c204:	bfa8      	it	ge
 800c206:	462b      	movge	r3, r5
 800c208:	eba8 0803 	sub.w	r8, r8, r3
 800c20c:	1aed      	subs	r5, r5, r3
 800c20e:	1ad3      	subs	r3, r2, r3
 800c210:	9304      	str	r3, [sp, #16]
 800c212:	9b06      	ldr	r3, [sp, #24]
 800c214:	b1fb      	cbz	r3, 800c256 <_dtoa_r+0x7ce>
 800c216:	9b08      	ldr	r3, [sp, #32]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 809f 	beq.w	800c35c <_dtoa_r+0x8d4>
 800c21e:	2e00      	cmp	r6, #0
 800c220:	dd11      	ble.n	800c246 <_dtoa_r+0x7be>
 800c222:	4639      	mov	r1, r7
 800c224:	4632      	mov	r2, r6
 800c226:	4620      	mov	r0, r4
 800c228:	f000 fbf0 	bl	800ca0c <__pow5mult>
 800c22c:	465a      	mov	r2, fp
 800c22e:	4601      	mov	r1, r0
 800c230:	4607      	mov	r7, r0
 800c232:	4620      	mov	r0, r4
 800c234:	f000 fb44 	bl	800c8c0 <__multiply>
 800c238:	4659      	mov	r1, fp
 800c23a:	9007      	str	r0, [sp, #28]
 800c23c:	4620      	mov	r0, r4
 800c23e:	f000 fa6d 	bl	800c71c <_Bfree>
 800c242:	9b07      	ldr	r3, [sp, #28]
 800c244:	469b      	mov	fp, r3
 800c246:	9b06      	ldr	r3, [sp, #24]
 800c248:	1b9a      	subs	r2, r3, r6
 800c24a:	d004      	beq.n	800c256 <_dtoa_r+0x7ce>
 800c24c:	4659      	mov	r1, fp
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 fbdc 	bl	800ca0c <__pow5mult>
 800c254:	4683      	mov	fp, r0
 800c256:	2101      	movs	r1, #1
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 fb1b 	bl	800c894 <__i2b>
 800c25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c260:	2b00      	cmp	r3, #0
 800c262:	4606      	mov	r6, r0
 800c264:	dd7c      	ble.n	800c360 <_dtoa_r+0x8d8>
 800c266:	461a      	mov	r2, r3
 800c268:	4601      	mov	r1, r0
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 fbce 	bl	800ca0c <__pow5mult>
 800c270:	9b05      	ldr	r3, [sp, #20]
 800c272:	2b01      	cmp	r3, #1
 800c274:	4606      	mov	r6, r0
 800c276:	dd76      	ble.n	800c366 <_dtoa_r+0x8de>
 800c278:	2300      	movs	r3, #0
 800c27a:	9306      	str	r3, [sp, #24]
 800c27c:	6933      	ldr	r3, [r6, #16]
 800c27e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c282:	6918      	ldr	r0, [r3, #16]
 800c284:	f000 fab6 	bl	800c7f4 <__hi0bits>
 800c288:	f1c0 0020 	rsb	r0, r0, #32
 800c28c:	9b04      	ldr	r3, [sp, #16]
 800c28e:	4418      	add	r0, r3
 800c290:	f010 001f 	ands.w	r0, r0, #31
 800c294:	f000 8086 	beq.w	800c3a4 <_dtoa_r+0x91c>
 800c298:	f1c0 0320 	rsb	r3, r0, #32
 800c29c:	2b04      	cmp	r3, #4
 800c29e:	dd7f      	ble.n	800c3a0 <_dtoa_r+0x918>
 800c2a0:	f1c0 001c 	rsb	r0, r0, #28
 800c2a4:	9b04      	ldr	r3, [sp, #16]
 800c2a6:	4403      	add	r3, r0
 800c2a8:	4480      	add	r8, r0
 800c2aa:	4405      	add	r5, r0
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	f1b8 0f00 	cmp.w	r8, #0
 800c2b2:	dd05      	ble.n	800c2c0 <_dtoa_r+0x838>
 800c2b4:	4659      	mov	r1, fp
 800c2b6:	4642      	mov	r2, r8
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f000 fc01 	bl	800cac0 <__lshift>
 800c2be:	4683      	mov	fp, r0
 800c2c0:	9b04      	ldr	r3, [sp, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dd05      	ble.n	800c2d2 <_dtoa_r+0x84a>
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 fbf8 	bl	800cac0 <__lshift>
 800c2d0:	4606      	mov	r6, r0
 800c2d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d069      	beq.n	800c3ac <_dtoa_r+0x924>
 800c2d8:	4631      	mov	r1, r6
 800c2da:	4658      	mov	r0, fp
 800c2dc:	f000 fc5c 	bl	800cb98 <__mcmp>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	da63      	bge.n	800c3ac <_dtoa_r+0x924>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	4659      	mov	r1, fp
 800c2e8:	220a      	movs	r2, #10
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 fa38 	bl	800c760 <__multadd>
 800c2f0:	9b08      	ldr	r3, [sp, #32]
 800c2f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2f6:	4683      	mov	fp, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 818f 	beq.w	800c61c <_dtoa_r+0xb94>
 800c2fe:	4639      	mov	r1, r7
 800c300:	2300      	movs	r3, #0
 800c302:	220a      	movs	r2, #10
 800c304:	4620      	mov	r0, r4
 800c306:	f000 fa2b 	bl	800c760 <__multadd>
 800c30a:	f1b9 0f00 	cmp.w	r9, #0
 800c30e:	4607      	mov	r7, r0
 800c310:	f300 808e 	bgt.w	800c430 <_dtoa_r+0x9a8>
 800c314:	9b05      	ldr	r3, [sp, #20]
 800c316:	2b02      	cmp	r3, #2
 800c318:	dc50      	bgt.n	800c3bc <_dtoa_r+0x934>
 800c31a:	e089      	b.n	800c430 <_dtoa_r+0x9a8>
 800c31c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c31e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c322:	e75d      	b.n	800c1e0 <_dtoa_r+0x758>
 800c324:	9b01      	ldr	r3, [sp, #4]
 800c326:	1e5e      	subs	r6, r3, #1
 800c328:	9b06      	ldr	r3, [sp, #24]
 800c32a:	42b3      	cmp	r3, r6
 800c32c:	bfbf      	itttt	lt
 800c32e:	9b06      	ldrlt	r3, [sp, #24]
 800c330:	9606      	strlt	r6, [sp, #24]
 800c332:	1af2      	sublt	r2, r6, r3
 800c334:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c336:	bfb6      	itet	lt
 800c338:	189b      	addlt	r3, r3, r2
 800c33a:	1b9e      	subge	r6, r3, r6
 800c33c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c33e:	9b01      	ldr	r3, [sp, #4]
 800c340:	bfb8      	it	lt
 800c342:	2600      	movlt	r6, #0
 800c344:	2b00      	cmp	r3, #0
 800c346:	bfb5      	itete	lt
 800c348:	eba8 0503 	sublt.w	r5, r8, r3
 800c34c:	9b01      	ldrge	r3, [sp, #4]
 800c34e:	2300      	movlt	r3, #0
 800c350:	4645      	movge	r5, r8
 800c352:	e747      	b.n	800c1e4 <_dtoa_r+0x75c>
 800c354:	9e06      	ldr	r6, [sp, #24]
 800c356:	9f08      	ldr	r7, [sp, #32]
 800c358:	4645      	mov	r5, r8
 800c35a:	e74c      	b.n	800c1f6 <_dtoa_r+0x76e>
 800c35c:	9a06      	ldr	r2, [sp, #24]
 800c35e:	e775      	b.n	800c24c <_dtoa_r+0x7c4>
 800c360:	9b05      	ldr	r3, [sp, #20]
 800c362:	2b01      	cmp	r3, #1
 800c364:	dc18      	bgt.n	800c398 <_dtoa_r+0x910>
 800c366:	9b02      	ldr	r3, [sp, #8]
 800c368:	b9b3      	cbnz	r3, 800c398 <_dtoa_r+0x910>
 800c36a:	9b03      	ldr	r3, [sp, #12]
 800c36c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c370:	b9a3      	cbnz	r3, 800c39c <_dtoa_r+0x914>
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c378:	0d1b      	lsrs	r3, r3, #20
 800c37a:	051b      	lsls	r3, r3, #20
 800c37c:	b12b      	cbz	r3, 800c38a <_dtoa_r+0x902>
 800c37e:	9b04      	ldr	r3, [sp, #16]
 800c380:	3301      	adds	r3, #1
 800c382:	9304      	str	r3, [sp, #16]
 800c384:	f108 0801 	add.w	r8, r8, #1
 800c388:	2301      	movs	r3, #1
 800c38a:	9306      	str	r3, [sp, #24]
 800c38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f47f af74 	bne.w	800c27c <_dtoa_r+0x7f4>
 800c394:	2001      	movs	r0, #1
 800c396:	e779      	b.n	800c28c <_dtoa_r+0x804>
 800c398:	2300      	movs	r3, #0
 800c39a:	e7f6      	b.n	800c38a <_dtoa_r+0x902>
 800c39c:	9b02      	ldr	r3, [sp, #8]
 800c39e:	e7f4      	b.n	800c38a <_dtoa_r+0x902>
 800c3a0:	d085      	beq.n	800c2ae <_dtoa_r+0x826>
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	301c      	adds	r0, #28
 800c3a6:	e77d      	b.n	800c2a4 <_dtoa_r+0x81c>
 800c3a8:	40240000 	.word	0x40240000
 800c3ac:	9b01      	ldr	r3, [sp, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dc38      	bgt.n	800c424 <_dtoa_r+0x99c>
 800c3b2:	9b05      	ldr	r3, [sp, #20]
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	dd35      	ble.n	800c424 <_dtoa_r+0x99c>
 800c3b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c3bc:	f1b9 0f00 	cmp.w	r9, #0
 800c3c0:	d10d      	bne.n	800c3de <_dtoa_r+0x956>
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	464b      	mov	r3, r9
 800c3c6:	2205      	movs	r2, #5
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f000 f9c9 	bl	800c760 <__multadd>
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	4606      	mov	r6, r0
 800c3d2:	4658      	mov	r0, fp
 800c3d4:	f000 fbe0 	bl	800cb98 <__mcmp>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	f73f adbd 	bgt.w	800bf58 <_dtoa_r+0x4d0>
 800c3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e0:	9d00      	ldr	r5, [sp, #0]
 800c3e2:	ea6f 0a03 	mvn.w	sl, r3
 800c3e6:	f04f 0800 	mov.w	r8, #0
 800c3ea:	4631      	mov	r1, r6
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f000 f995 	bl	800c71c <_Bfree>
 800c3f2:	2f00      	cmp	r7, #0
 800c3f4:	f43f aeb4 	beq.w	800c160 <_dtoa_r+0x6d8>
 800c3f8:	f1b8 0f00 	cmp.w	r8, #0
 800c3fc:	d005      	beq.n	800c40a <_dtoa_r+0x982>
 800c3fe:	45b8      	cmp	r8, r7
 800c400:	d003      	beq.n	800c40a <_dtoa_r+0x982>
 800c402:	4641      	mov	r1, r8
 800c404:	4620      	mov	r0, r4
 800c406:	f000 f989 	bl	800c71c <_Bfree>
 800c40a:	4639      	mov	r1, r7
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 f985 	bl	800c71c <_Bfree>
 800c412:	e6a5      	b.n	800c160 <_dtoa_r+0x6d8>
 800c414:	2600      	movs	r6, #0
 800c416:	4637      	mov	r7, r6
 800c418:	e7e1      	b.n	800c3de <_dtoa_r+0x956>
 800c41a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c41c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c420:	4637      	mov	r7, r6
 800c422:	e599      	b.n	800bf58 <_dtoa_r+0x4d0>
 800c424:	9b08      	ldr	r3, [sp, #32]
 800c426:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 80fd 	beq.w	800c62a <_dtoa_r+0xba2>
 800c430:	2d00      	cmp	r5, #0
 800c432:	dd05      	ble.n	800c440 <_dtoa_r+0x9b8>
 800c434:	4639      	mov	r1, r7
 800c436:	462a      	mov	r2, r5
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 fb41 	bl	800cac0 <__lshift>
 800c43e:	4607      	mov	r7, r0
 800c440:	9b06      	ldr	r3, [sp, #24]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d05c      	beq.n	800c500 <_dtoa_r+0xa78>
 800c446:	6879      	ldr	r1, [r7, #4]
 800c448:	4620      	mov	r0, r4
 800c44a:	f000 f927 	bl	800c69c <_Balloc>
 800c44e:	4605      	mov	r5, r0
 800c450:	b928      	cbnz	r0, 800c45e <_dtoa_r+0x9d6>
 800c452:	4b80      	ldr	r3, [pc, #512]	; (800c654 <_dtoa_r+0xbcc>)
 800c454:	4602      	mov	r2, r0
 800c456:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c45a:	f7ff bb2e 	b.w	800baba <_dtoa_r+0x32>
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	3202      	adds	r2, #2
 800c462:	0092      	lsls	r2, r2, #2
 800c464:	f107 010c 	add.w	r1, r7, #12
 800c468:	300c      	adds	r0, #12
 800c46a:	f7fe fd25 	bl	800aeb8 <memcpy>
 800c46e:	2201      	movs	r2, #1
 800c470:	4629      	mov	r1, r5
 800c472:	4620      	mov	r0, r4
 800c474:	f000 fb24 	bl	800cac0 <__lshift>
 800c478:	9b00      	ldr	r3, [sp, #0]
 800c47a:	3301      	adds	r3, #1
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	9b00      	ldr	r3, [sp, #0]
 800c480:	444b      	add	r3, r9
 800c482:	9307      	str	r3, [sp, #28]
 800c484:	9b02      	ldr	r3, [sp, #8]
 800c486:	f003 0301 	and.w	r3, r3, #1
 800c48a:	46b8      	mov	r8, r7
 800c48c:	9306      	str	r3, [sp, #24]
 800c48e:	4607      	mov	r7, r0
 800c490:	9b01      	ldr	r3, [sp, #4]
 800c492:	4631      	mov	r1, r6
 800c494:	3b01      	subs	r3, #1
 800c496:	4658      	mov	r0, fp
 800c498:	9302      	str	r3, [sp, #8]
 800c49a:	f7ff fa69 	bl	800b970 <quorem>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	3330      	adds	r3, #48	; 0x30
 800c4a2:	9004      	str	r0, [sp, #16]
 800c4a4:	4641      	mov	r1, r8
 800c4a6:	4658      	mov	r0, fp
 800c4a8:	9308      	str	r3, [sp, #32]
 800c4aa:	f000 fb75 	bl	800cb98 <__mcmp>
 800c4ae:	463a      	mov	r2, r7
 800c4b0:	4681      	mov	r9, r0
 800c4b2:	4631      	mov	r1, r6
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f000 fb8b 	bl	800cbd0 <__mdiff>
 800c4ba:	68c2      	ldr	r2, [r0, #12]
 800c4bc:	9b08      	ldr	r3, [sp, #32]
 800c4be:	4605      	mov	r5, r0
 800c4c0:	bb02      	cbnz	r2, 800c504 <_dtoa_r+0xa7c>
 800c4c2:	4601      	mov	r1, r0
 800c4c4:	4658      	mov	r0, fp
 800c4c6:	f000 fb67 	bl	800cb98 <__mcmp>
 800c4ca:	9b08      	ldr	r3, [sp, #32]
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c4d6:	f000 f921 	bl	800c71c <_Bfree>
 800c4da:	9b05      	ldr	r3, [sp, #20]
 800c4dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4de:	9d01      	ldr	r5, [sp, #4]
 800c4e0:	ea43 0102 	orr.w	r1, r3, r2
 800c4e4:	9b06      	ldr	r3, [sp, #24]
 800c4e6:	430b      	orrs	r3, r1
 800c4e8:	9b08      	ldr	r3, [sp, #32]
 800c4ea:	d10d      	bne.n	800c508 <_dtoa_r+0xa80>
 800c4ec:	2b39      	cmp	r3, #57	; 0x39
 800c4ee:	d029      	beq.n	800c544 <_dtoa_r+0xabc>
 800c4f0:	f1b9 0f00 	cmp.w	r9, #0
 800c4f4:	dd01      	ble.n	800c4fa <_dtoa_r+0xa72>
 800c4f6:	9b04      	ldr	r3, [sp, #16]
 800c4f8:	3331      	adds	r3, #49	; 0x31
 800c4fa:	9a02      	ldr	r2, [sp, #8]
 800c4fc:	7013      	strb	r3, [r2, #0]
 800c4fe:	e774      	b.n	800c3ea <_dtoa_r+0x962>
 800c500:	4638      	mov	r0, r7
 800c502:	e7b9      	b.n	800c478 <_dtoa_r+0x9f0>
 800c504:	2201      	movs	r2, #1
 800c506:	e7e2      	b.n	800c4ce <_dtoa_r+0xa46>
 800c508:	f1b9 0f00 	cmp.w	r9, #0
 800c50c:	db06      	blt.n	800c51c <_dtoa_r+0xa94>
 800c50e:	9905      	ldr	r1, [sp, #20]
 800c510:	ea41 0909 	orr.w	r9, r1, r9
 800c514:	9906      	ldr	r1, [sp, #24]
 800c516:	ea59 0101 	orrs.w	r1, r9, r1
 800c51a:	d120      	bne.n	800c55e <_dtoa_r+0xad6>
 800c51c:	2a00      	cmp	r2, #0
 800c51e:	ddec      	ble.n	800c4fa <_dtoa_r+0xa72>
 800c520:	4659      	mov	r1, fp
 800c522:	2201      	movs	r2, #1
 800c524:	4620      	mov	r0, r4
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	f000 faca 	bl	800cac0 <__lshift>
 800c52c:	4631      	mov	r1, r6
 800c52e:	4683      	mov	fp, r0
 800c530:	f000 fb32 	bl	800cb98 <__mcmp>
 800c534:	2800      	cmp	r0, #0
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	dc02      	bgt.n	800c540 <_dtoa_r+0xab8>
 800c53a:	d1de      	bne.n	800c4fa <_dtoa_r+0xa72>
 800c53c:	07da      	lsls	r2, r3, #31
 800c53e:	d5dc      	bpl.n	800c4fa <_dtoa_r+0xa72>
 800c540:	2b39      	cmp	r3, #57	; 0x39
 800c542:	d1d8      	bne.n	800c4f6 <_dtoa_r+0xa6e>
 800c544:	9a02      	ldr	r2, [sp, #8]
 800c546:	2339      	movs	r3, #57	; 0x39
 800c548:	7013      	strb	r3, [r2, #0]
 800c54a:	462b      	mov	r3, r5
 800c54c:	461d      	mov	r5, r3
 800c54e:	3b01      	subs	r3, #1
 800c550:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c554:	2a39      	cmp	r2, #57	; 0x39
 800c556:	d050      	beq.n	800c5fa <_dtoa_r+0xb72>
 800c558:	3201      	adds	r2, #1
 800c55a:	701a      	strb	r2, [r3, #0]
 800c55c:	e745      	b.n	800c3ea <_dtoa_r+0x962>
 800c55e:	2a00      	cmp	r2, #0
 800c560:	dd03      	ble.n	800c56a <_dtoa_r+0xae2>
 800c562:	2b39      	cmp	r3, #57	; 0x39
 800c564:	d0ee      	beq.n	800c544 <_dtoa_r+0xabc>
 800c566:	3301      	adds	r3, #1
 800c568:	e7c7      	b.n	800c4fa <_dtoa_r+0xa72>
 800c56a:	9a01      	ldr	r2, [sp, #4]
 800c56c:	9907      	ldr	r1, [sp, #28]
 800c56e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c572:	428a      	cmp	r2, r1
 800c574:	d02a      	beq.n	800c5cc <_dtoa_r+0xb44>
 800c576:	4659      	mov	r1, fp
 800c578:	2300      	movs	r3, #0
 800c57a:	220a      	movs	r2, #10
 800c57c:	4620      	mov	r0, r4
 800c57e:	f000 f8ef 	bl	800c760 <__multadd>
 800c582:	45b8      	cmp	r8, r7
 800c584:	4683      	mov	fp, r0
 800c586:	f04f 0300 	mov.w	r3, #0
 800c58a:	f04f 020a 	mov.w	r2, #10
 800c58e:	4641      	mov	r1, r8
 800c590:	4620      	mov	r0, r4
 800c592:	d107      	bne.n	800c5a4 <_dtoa_r+0xb1c>
 800c594:	f000 f8e4 	bl	800c760 <__multadd>
 800c598:	4680      	mov	r8, r0
 800c59a:	4607      	mov	r7, r0
 800c59c:	9b01      	ldr	r3, [sp, #4]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	9301      	str	r3, [sp, #4]
 800c5a2:	e775      	b.n	800c490 <_dtoa_r+0xa08>
 800c5a4:	f000 f8dc 	bl	800c760 <__multadd>
 800c5a8:	4639      	mov	r1, r7
 800c5aa:	4680      	mov	r8, r0
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	220a      	movs	r2, #10
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f000 f8d5 	bl	800c760 <__multadd>
 800c5b6:	4607      	mov	r7, r0
 800c5b8:	e7f0      	b.n	800c59c <_dtoa_r+0xb14>
 800c5ba:	f1b9 0f00 	cmp.w	r9, #0
 800c5be:	9a00      	ldr	r2, [sp, #0]
 800c5c0:	bfcc      	ite	gt
 800c5c2:	464d      	movgt	r5, r9
 800c5c4:	2501      	movle	r5, #1
 800c5c6:	4415      	add	r5, r2
 800c5c8:	f04f 0800 	mov.w	r8, #0
 800c5cc:	4659      	mov	r1, fp
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	9301      	str	r3, [sp, #4]
 800c5d4:	f000 fa74 	bl	800cac0 <__lshift>
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4683      	mov	fp, r0
 800c5dc:	f000 fadc 	bl	800cb98 <__mcmp>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	dcb2      	bgt.n	800c54a <_dtoa_r+0xac2>
 800c5e4:	d102      	bne.n	800c5ec <_dtoa_r+0xb64>
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	07db      	lsls	r3, r3, #31
 800c5ea:	d4ae      	bmi.n	800c54a <_dtoa_r+0xac2>
 800c5ec:	462b      	mov	r3, r5
 800c5ee:	461d      	mov	r5, r3
 800c5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5f4:	2a30      	cmp	r2, #48	; 0x30
 800c5f6:	d0fa      	beq.n	800c5ee <_dtoa_r+0xb66>
 800c5f8:	e6f7      	b.n	800c3ea <_dtoa_r+0x962>
 800c5fa:	9a00      	ldr	r2, [sp, #0]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d1a5      	bne.n	800c54c <_dtoa_r+0xac4>
 800c600:	f10a 0a01 	add.w	sl, sl, #1
 800c604:	2331      	movs	r3, #49	; 0x31
 800c606:	e779      	b.n	800c4fc <_dtoa_r+0xa74>
 800c608:	4b13      	ldr	r3, [pc, #76]	; (800c658 <_dtoa_r+0xbd0>)
 800c60a:	f7ff baaf 	b.w	800bb6c <_dtoa_r+0xe4>
 800c60e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c610:	2b00      	cmp	r3, #0
 800c612:	f47f aa86 	bne.w	800bb22 <_dtoa_r+0x9a>
 800c616:	4b11      	ldr	r3, [pc, #68]	; (800c65c <_dtoa_r+0xbd4>)
 800c618:	f7ff baa8 	b.w	800bb6c <_dtoa_r+0xe4>
 800c61c:	f1b9 0f00 	cmp.w	r9, #0
 800c620:	dc03      	bgt.n	800c62a <_dtoa_r+0xba2>
 800c622:	9b05      	ldr	r3, [sp, #20]
 800c624:	2b02      	cmp	r3, #2
 800c626:	f73f aec9 	bgt.w	800c3bc <_dtoa_r+0x934>
 800c62a:	9d00      	ldr	r5, [sp, #0]
 800c62c:	4631      	mov	r1, r6
 800c62e:	4658      	mov	r0, fp
 800c630:	f7ff f99e 	bl	800b970 <quorem>
 800c634:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c638:	f805 3b01 	strb.w	r3, [r5], #1
 800c63c:	9a00      	ldr	r2, [sp, #0]
 800c63e:	1aaa      	subs	r2, r5, r2
 800c640:	4591      	cmp	r9, r2
 800c642:	ddba      	ble.n	800c5ba <_dtoa_r+0xb32>
 800c644:	4659      	mov	r1, fp
 800c646:	2300      	movs	r3, #0
 800c648:	220a      	movs	r2, #10
 800c64a:	4620      	mov	r0, r4
 800c64c:	f000 f888 	bl	800c760 <__multadd>
 800c650:	4683      	mov	fp, r0
 800c652:	e7eb      	b.n	800c62c <_dtoa_r+0xba4>
 800c654:	0800e130 	.word	0x0800e130
 800c658:	0800dfec 	.word	0x0800dfec
 800c65c:	0800e0c4 	.word	0x0800e0c4

0800c660 <fiprintf>:
 800c660:	b40e      	push	{r1, r2, r3}
 800c662:	b503      	push	{r0, r1, lr}
 800c664:	4601      	mov	r1, r0
 800c666:	ab03      	add	r3, sp, #12
 800c668:	4805      	ldr	r0, [pc, #20]	; (800c680 <fiprintf+0x20>)
 800c66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c66e:	6800      	ldr	r0, [r0, #0]
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	f000 fdd1 	bl	800d218 <_vfiprintf_r>
 800c676:	b002      	add	sp, #8
 800c678:	f85d eb04 	ldr.w	lr, [sp], #4
 800c67c:	b003      	add	sp, #12
 800c67e:	4770      	bx	lr
 800c680:	20000a78 	.word	0x20000a78

0800c684 <_localeconv_r>:
 800c684:	4800      	ldr	r0, [pc, #0]	; (800c688 <_localeconv_r+0x4>)
 800c686:	4770      	bx	lr
 800c688:	20000bcc 	.word	0x20000bcc

0800c68c <malloc>:
 800c68c:	4b02      	ldr	r3, [pc, #8]	; (800c698 <malloc+0xc>)
 800c68e:	4601      	mov	r1, r0
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	f000 bbe1 	b.w	800ce58 <_malloc_r>
 800c696:	bf00      	nop
 800c698:	20000a78 	.word	0x20000a78

0800c69c <_Balloc>:
 800c69c:	b570      	push	{r4, r5, r6, lr}
 800c69e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	460d      	mov	r5, r1
 800c6a4:	b976      	cbnz	r6, 800c6c4 <_Balloc+0x28>
 800c6a6:	2010      	movs	r0, #16
 800c6a8:	f7ff fff0 	bl	800c68c <malloc>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	6260      	str	r0, [r4, #36]	; 0x24
 800c6b0:	b920      	cbnz	r0, 800c6bc <_Balloc+0x20>
 800c6b2:	4b18      	ldr	r3, [pc, #96]	; (800c714 <_Balloc+0x78>)
 800c6b4:	4818      	ldr	r0, [pc, #96]	; (800c718 <_Balloc+0x7c>)
 800c6b6:	2166      	movs	r1, #102	; 0x66
 800c6b8:	f7ff f93c 	bl	800b934 <__assert_func>
 800c6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6c0:	6006      	str	r6, [r0, #0]
 800c6c2:	60c6      	str	r6, [r0, #12]
 800c6c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c6c6:	68f3      	ldr	r3, [r6, #12]
 800c6c8:	b183      	cbz	r3, 800c6ec <_Balloc+0x50>
 800c6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6d2:	b9b8      	cbnz	r0, 800c704 <_Balloc+0x68>
 800c6d4:	2101      	movs	r1, #1
 800c6d6:	fa01 f605 	lsl.w	r6, r1, r5
 800c6da:	1d72      	adds	r2, r6, #5
 800c6dc:	0092      	lsls	r2, r2, #2
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f000 fb5a 	bl	800cd98 <_calloc_r>
 800c6e4:	b160      	cbz	r0, 800c700 <_Balloc+0x64>
 800c6e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6ea:	e00e      	b.n	800c70a <_Balloc+0x6e>
 800c6ec:	2221      	movs	r2, #33	; 0x21
 800c6ee:	2104      	movs	r1, #4
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f000 fb51 	bl	800cd98 <_calloc_r>
 800c6f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6f8:	60f0      	str	r0, [r6, #12]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e4      	bne.n	800c6ca <_Balloc+0x2e>
 800c700:	2000      	movs	r0, #0
 800c702:	bd70      	pop	{r4, r5, r6, pc}
 800c704:	6802      	ldr	r2, [r0, #0]
 800c706:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c70a:	2300      	movs	r3, #0
 800c70c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c710:	e7f7      	b.n	800c702 <_Balloc+0x66>
 800c712:	bf00      	nop
 800c714:	0800e010 	.word	0x0800e010
 800c718:	0800e141 	.word	0x0800e141

0800c71c <_Bfree>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c720:	4605      	mov	r5, r0
 800c722:	460c      	mov	r4, r1
 800c724:	b976      	cbnz	r6, 800c744 <_Bfree+0x28>
 800c726:	2010      	movs	r0, #16
 800c728:	f7ff ffb0 	bl	800c68c <malloc>
 800c72c:	4602      	mov	r2, r0
 800c72e:	6268      	str	r0, [r5, #36]	; 0x24
 800c730:	b920      	cbnz	r0, 800c73c <_Bfree+0x20>
 800c732:	4b09      	ldr	r3, [pc, #36]	; (800c758 <_Bfree+0x3c>)
 800c734:	4809      	ldr	r0, [pc, #36]	; (800c75c <_Bfree+0x40>)
 800c736:	218a      	movs	r1, #138	; 0x8a
 800c738:	f7ff f8fc 	bl	800b934 <__assert_func>
 800c73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c740:	6006      	str	r6, [r0, #0]
 800c742:	60c6      	str	r6, [r0, #12]
 800c744:	b13c      	cbz	r4, 800c756 <_Bfree+0x3a>
 800c746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c748:	6862      	ldr	r2, [r4, #4]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c750:	6021      	str	r1, [r4, #0]
 800c752:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c756:	bd70      	pop	{r4, r5, r6, pc}
 800c758:	0800e010 	.word	0x0800e010
 800c75c:	0800e141 	.word	0x0800e141

0800c760 <__multadd>:
 800c760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c764:	690e      	ldr	r6, [r1, #16]
 800c766:	4607      	mov	r7, r0
 800c768:	4698      	mov	r8, r3
 800c76a:	460c      	mov	r4, r1
 800c76c:	f101 0014 	add.w	r0, r1, #20
 800c770:	2300      	movs	r3, #0
 800c772:	6805      	ldr	r5, [r0, #0]
 800c774:	b2a9      	uxth	r1, r5
 800c776:	fb02 8101 	mla	r1, r2, r1, r8
 800c77a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c77e:	0c2d      	lsrs	r5, r5, #16
 800c780:	fb02 c505 	mla	r5, r2, r5, ip
 800c784:	b289      	uxth	r1, r1
 800c786:	3301      	adds	r3, #1
 800c788:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c78c:	429e      	cmp	r6, r3
 800c78e:	f840 1b04 	str.w	r1, [r0], #4
 800c792:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c796:	dcec      	bgt.n	800c772 <__multadd+0x12>
 800c798:	f1b8 0f00 	cmp.w	r8, #0
 800c79c:	d022      	beq.n	800c7e4 <__multadd+0x84>
 800c79e:	68a3      	ldr	r3, [r4, #8]
 800c7a0:	42b3      	cmp	r3, r6
 800c7a2:	dc19      	bgt.n	800c7d8 <__multadd+0x78>
 800c7a4:	6861      	ldr	r1, [r4, #4]
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	3101      	adds	r1, #1
 800c7aa:	f7ff ff77 	bl	800c69c <_Balloc>
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	b928      	cbnz	r0, 800c7be <__multadd+0x5e>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	4b0d      	ldr	r3, [pc, #52]	; (800c7ec <__multadd+0x8c>)
 800c7b6:	480e      	ldr	r0, [pc, #56]	; (800c7f0 <__multadd+0x90>)
 800c7b8:	21b5      	movs	r1, #181	; 0xb5
 800c7ba:	f7ff f8bb 	bl	800b934 <__assert_func>
 800c7be:	6922      	ldr	r2, [r4, #16]
 800c7c0:	3202      	adds	r2, #2
 800c7c2:	f104 010c 	add.w	r1, r4, #12
 800c7c6:	0092      	lsls	r2, r2, #2
 800c7c8:	300c      	adds	r0, #12
 800c7ca:	f7fe fb75 	bl	800aeb8 <memcpy>
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	f7ff ffa3 	bl	800c71c <_Bfree>
 800c7d6:	462c      	mov	r4, r5
 800c7d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c7dc:	3601      	adds	r6, #1
 800c7de:	f8c3 8014 	str.w	r8, [r3, #20]
 800c7e2:	6126      	str	r6, [r4, #16]
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ea:	bf00      	nop
 800c7ec:	0800e130 	.word	0x0800e130
 800c7f0:	0800e141 	.word	0x0800e141

0800c7f4 <__hi0bits>:
 800c7f4:	0c03      	lsrs	r3, r0, #16
 800c7f6:	041b      	lsls	r3, r3, #16
 800c7f8:	b9d3      	cbnz	r3, 800c830 <__hi0bits+0x3c>
 800c7fa:	0400      	lsls	r0, r0, #16
 800c7fc:	2310      	movs	r3, #16
 800c7fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c802:	bf04      	itt	eq
 800c804:	0200      	lsleq	r0, r0, #8
 800c806:	3308      	addeq	r3, #8
 800c808:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c80c:	bf04      	itt	eq
 800c80e:	0100      	lsleq	r0, r0, #4
 800c810:	3304      	addeq	r3, #4
 800c812:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c816:	bf04      	itt	eq
 800c818:	0080      	lsleq	r0, r0, #2
 800c81a:	3302      	addeq	r3, #2
 800c81c:	2800      	cmp	r0, #0
 800c81e:	db05      	blt.n	800c82c <__hi0bits+0x38>
 800c820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c824:	f103 0301 	add.w	r3, r3, #1
 800c828:	bf08      	it	eq
 800c82a:	2320      	moveq	r3, #32
 800c82c:	4618      	mov	r0, r3
 800c82e:	4770      	bx	lr
 800c830:	2300      	movs	r3, #0
 800c832:	e7e4      	b.n	800c7fe <__hi0bits+0xa>

0800c834 <__lo0bits>:
 800c834:	6803      	ldr	r3, [r0, #0]
 800c836:	f013 0207 	ands.w	r2, r3, #7
 800c83a:	4601      	mov	r1, r0
 800c83c:	d00b      	beq.n	800c856 <__lo0bits+0x22>
 800c83e:	07da      	lsls	r2, r3, #31
 800c840:	d424      	bmi.n	800c88c <__lo0bits+0x58>
 800c842:	0798      	lsls	r0, r3, #30
 800c844:	bf49      	itett	mi
 800c846:	085b      	lsrmi	r3, r3, #1
 800c848:	089b      	lsrpl	r3, r3, #2
 800c84a:	2001      	movmi	r0, #1
 800c84c:	600b      	strmi	r3, [r1, #0]
 800c84e:	bf5c      	itt	pl
 800c850:	600b      	strpl	r3, [r1, #0]
 800c852:	2002      	movpl	r0, #2
 800c854:	4770      	bx	lr
 800c856:	b298      	uxth	r0, r3
 800c858:	b9b0      	cbnz	r0, 800c888 <__lo0bits+0x54>
 800c85a:	0c1b      	lsrs	r3, r3, #16
 800c85c:	2010      	movs	r0, #16
 800c85e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c862:	bf04      	itt	eq
 800c864:	0a1b      	lsreq	r3, r3, #8
 800c866:	3008      	addeq	r0, #8
 800c868:	071a      	lsls	r2, r3, #28
 800c86a:	bf04      	itt	eq
 800c86c:	091b      	lsreq	r3, r3, #4
 800c86e:	3004      	addeq	r0, #4
 800c870:	079a      	lsls	r2, r3, #30
 800c872:	bf04      	itt	eq
 800c874:	089b      	lsreq	r3, r3, #2
 800c876:	3002      	addeq	r0, #2
 800c878:	07da      	lsls	r2, r3, #31
 800c87a:	d403      	bmi.n	800c884 <__lo0bits+0x50>
 800c87c:	085b      	lsrs	r3, r3, #1
 800c87e:	f100 0001 	add.w	r0, r0, #1
 800c882:	d005      	beq.n	800c890 <__lo0bits+0x5c>
 800c884:	600b      	str	r3, [r1, #0]
 800c886:	4770      	bx	lr
 800c888:	4610      	mov	r0, r2
 800c88a:	e7e8      	b.n	800c85e <__lo0bits+0x2a>
 800c88c:	2000      	movs	r0, #0
 800c88e:	4770      	bx	lr
 800c890:	2020      	movs	r0, #32
 800c892:	4770      	bx	lr

0800c894 <__i2b>:
 800c894:	b510      	push	{r4, lr}
 800c896:	460c      	mov	r4, r1
 800c898:	2101      	movs	r1, #1
 800c89a:	f7ff feff 	bl	800c69c <_Balloc>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	b928      	cbnz	r0, 800c8ae <__i2b+0x1a>
 800c8a2:	4b05      	ldr	r3, [pc, #20]	; (800c8b8 <__i2b+0x24>)
 800c8a4:	4805      	ldr	r0, [pc, #20]	; (800c8bc <__i2b+0x28>)
 800c8a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8aa:	f7ff f843 	bl	800b934 <__assert_func>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	6144      	str	r4, [r0, #20]
 800c8b2:	6103      	str	r3, [r0, #16]
 800c8b4:	bd10      	pop	{r4, pc}
 800c8b6:	bf00      	nop
 800c8b8:	0800e130 	.word	0x0800e130
 800c8bc:	0800e141 	.word	0x0800e141

0800c8c0 <__multiply>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	4614      	mov	r4, r2
 800c8c6:	690a      	ldr	r2, [r1, #16]
 800c8c8:	6923      	ldr	r3, [r4, #16]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	bfb8      	it	lt
 800c8ce:	460b      	movlt	r3, r1
 800c8d0:	460d      	mov	r5, r1
 800c8d2:	bfbc      	itt	lt
 800c8d4:	4625      	movlt	r5, r4
 800c8d6:	461c      	movlt	r4, r3
 800c8d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c8dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c8e0:	68ab      	ldr	r3, [r5, #8]
 800c8e2:	6869      	ldr	r1, [r5, #4]
 800c8e4:	eb0a 0709 	add.w	r7, sl, r9
 800c8e8:	42bb      	cmp	r3, r7
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	bfb8      	it	lt
 800c8ee:	3101      	addlt	r1, #1
 800c8f0:	f7ff fed4 	bl	800c69c <_Balloc>
 800c8f4:	b930      	cbnz	r0, 800c904 <__multiply+0x44>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	4b42      	ldr	r3, [pc, #264]	; (800ca04 <__multiply+0x144>)
 800c8fa:	4843      	ldr	r0, [pc, #268]	; (800ca08 <__multiply+0x148>)
 800c8fc:	f240 115d 	movw	r1, #349	; 0x15d
 800c900:	f7ff f818 	bl	800b934 <__assert_func>
 800c904:	f100 0614 	add.w	r6, r0, #20
 800c908:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c90c:	4633      	mov	r3, r6
 800c90e:	2200      	movs	r2, #0
 800c910:	4543      	cmp	r3, r8
 800c912:	d31e      	bcc.n	800c952 <__multiply+0x92>
 800c914:	f105 0c14 	add.w	ip, r5, #20
 800c918:	f104 0314 	add.w	r3, r4, #20
 800c91c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c920:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c924:	9202      	str	r2, [sp, #8]
 800c926:	ebac 0205 	sub.w	r2, ip, r5
 800c92a:	3a15      	subs	r2, #21
 800c92c:	f022 0203 	bic.w	r2, r2, #3
 800c930:	3204      	adds	r2, #4
 800c932:	f105 0115 	add.w	r1, r5, #21
 800c936:	458c      	cmp	ip, r1
 800c938:	bf38      	it	cc
 800c93a:	2204      	movcc	r2, #4
 800c93c:	9201      	str	r2, [sp, #4]
 800c93e:	9a02      	ldr	r2, [sp, #8]
 800c940:	9303      	str	r3, [sp, #12]
 800c942:	429a      	cmp	r2, r3
 800c944:	d808      	bhi.n	800c958 <__multiply+0x98>
 800c946:	2f00      	cmp	r7, #0
 800c948:	dc55      	bgt.n	800c9f6 <__multiply+0x136>
 800c94a:	6107      	str	r7, [r0, #16]
 800c94c:	b005      	add	sp, #20
 800c94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c952:	f843 2b04 	str.w	r2, [r3], #4
 800c956:	e7db      	b.n	800c910 <__multiply+0x50>
 800c958:	f8b3 a000 	ldrh.w	sl, [r3]
 800c95c:	f1ba 0f00 	cmp.w	sl, #0
 800c960:	d020      	beq.n	800c9a4 <__multiply+0xe4>
 800c962:	f105 0e14 	add.w	lr, r5, #20
 800c966:	46b1      	mov	r9, r6
 800c968:	2200      	movs	r2, #0
 800c96a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c96e:	f8d9 b000 	ldr.w	fp, [r9]
 800c972:	b2a1      	uxth	r1, r4
 800c974:	fa1f fb8b 	uxth.w	fp, fp
 800c978:	fb0a b101 	mla	r1, sl, r1, fp
 800c97c:	4411      	add	r1, r2
 800c97e:	f8d9 2000 	ldr.w	r2, [r9]
 800c982:	0c24      	lsrs	r4, r4, #16
 800c984:	0c12      	lsrs	r2, r2, #16
 800c986:	fb0a 2404 	mla	r4, sl, r4, r2
 800c98a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c98e:	b289      	uxth	r1, r1
 800c990:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c994:	45f4      	cmp	ip, lr
 800c996:	f849 1b04 	str.w	r1, [r9], #4
 800c99a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c99e:	d8e4      	bhi.n	800c96a <__multiply+0xaa>
 800c9a0:	9901      	ldr	r1, [sp, #4]
 800c9a2:	5072      	str	r2, [r6, r1]
 800c9a4:	9a03      	ldr	r2, [sp, #12]
 800c9a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	f1b9 0f00 	cmp.w	r9, #0
 800c9b0:	d01f      	beq.n	800c9f2 <__multiply+0x132>
 800c9b2:	6834      	ldr	r4, [r6, #0]
 800c9b4:	f105 0114 	add.w	r1, r5, #20
 800c9b8:	46b6      	mov	lr, r6
 800c9ba:	f04f 0a00 	mov.w	sl, #0
 800c9be:	880a      	ldrh	r2, [r1, #0]
 800c9c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c9c4:	fb09 b202 	mla	r2, r9, r2, fp
 800c9c8:	4492      	add	sl, r2
 800c9ca:	b2a4      	uxth	r4, r4
 800c9cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c9d0:	f84e 4b04 	str.w	r4, [lr], #4
 800c9d4:	f851 4b04 	ldr.w	r4, [r1], #4
 800c9d8:	f8be 2000 	ldrh.w	r2, [lr]
 800c9dc:	0c24      	lsrs	r4, r4, #16
 800c9de:	fb09 2404 	mla	r4, r9, r4, r2
 800c9e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c9e6:	458c      	cmp	ip, r1
 800c9e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c9ec:	d8e7      	bhi.n	800c9be <__multiply+0xfe>
 800c9ee:	9a01      	ldr	r2, [sp, #4]
 800c9f0:	50b4      	str	r4, [r6, r2]
 800c9f2:	3604      	adds	r6, #4
 800c9f4:	e7a3      	b.n	800c93e <__multiply+0x7e>
 800c9f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1a5      	bne.n	800c94a <__multiply+0x8a>
 800c9fe:	3f01      	subs	r7, #1
 800ca00:	e7a1      	b.n	800c946 <__multiply+0x86>
 800ca02:	bf00      	nop
 800ca04:	0800e130 	.word	0x0800e130
 800ca08:	0800e141 	.word	0x0800e141

0800ca0c <__pow5mult>:
 800ca0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca10:	4615      	mov	r5, r2
 800ca12:	f012 0203 	ands.w	r2, r2, #3
 800ca16:	4606      	mov	r6, r0
 800ca18:	460f      	mov	r7, r1
 800ca1a:	d007      	beq.n	800ca2c <__pow5mult+0x20>
 800ca1c:	4c25      	ldr	r4, [pc, #148]	; (800cab4 <__pow5mult+0xa8>)
 800ca1e:	3a01      	subs	r2, #1
 800ca20:	2300      	movs	r3, #0
 800ca22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca26:	f7ff fe9b 	bl	800c760 <__multadd>
 800ca2a:	4607      	mov	r7, r0
 800ca2c:	10ad      	asrs	r5, r5, #2
 800ca2e:	d03d      	beq.n	800caac <__pow5mult+0xa0>
 800ca30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca32:	b97c      	cbnz	r4, 800ca54 <__pow5mult+0x48>
 800ca34:	2010      	movs	r0, #16
 800ca36:	f7ff fe29 	bl	800c68c <malloc>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	6270      	str	r0, [r6, #36]	; 0x24
 800ca3e:	b928      	cbnz	r0, 800ca4c <__pow5mult+0x40>
 800ca40:	4b1d      	ldr	r3, [pc, #116]	; (800cab8 <__pow5mult+0xac>)
 800ca42:	481e      	ldr	r0, [pc, #120]	; (800cabc <__pow5mult+0xb0>)
 800ca44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca48:	f7fe ff74 	bl	800b934 <__assert_func>
 800ca4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca50:	6004      	str	r4, [r0, #0]
 800ca52:	60c4      	str	r4, [r0, #12]
 800ca54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca5c:	b94c      	cbnz	r4, 800ca72 <__pow5mult+0x66>
 800ca5e:	f240 2171 	movw	r1, #625	; 0x271
 800ca62:	4630      	mov	r0, r6
 800ca64:	f7ff ff16 	bl	800c894 <__i2b>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca6e:	4604      	mov	r4, r0
 800ca70:	6003      	str	r3, [r0, #0]
 800ca72:	f04f 0900 	mov.w	r9, #0
 800ca76:	07eb      	lsls	r3, r5, #31
 800ca78:	d50a      	bpl.n	800ca90 <__pow5mult+0x84>
 800ca7a:	4639      	mov	r1, r7
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f7ff ff1e 	bl	800c8c0 <__multiply>
 800ca84:	4639      	mov	r1, r7
 800ca86:	4680      	mov	r8, r0
 800ca88:	4630      	mov	r0, r6
 800ca8a:	f7ff fe47 	bl	800c71c <_Bfree>
 800ca8e:	4647      	mov	r7, r8
 800ca90:	106d      	asrs	r5, r5, #1
 800ca92:	d00b      	beq.n	800caac <__pow5mult+0xa0>
 800ca94:	6820      	ldr	r0, [r4, #0]
 800ca96:	b938      	cbnz	r0, 800caa8 <__pow5mult+0x9c>
 800ca98:	4622      	mov	r2, r4
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f7ff ff0f 	bl	800c8c0 <__multiply>
 800caa2:	6020      	str	r0, [r4, #0]
 800caa4:	f8c0 9000 	str.w	r9, [r0]
 800caa8:	4604      	mov	r4, r0
 800caaa:	e7e4      	b.n	800ca76 <__pow5mult+0x6a>
 800caac:	4638      	mov	r0, r7
 800caae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab2:	bf00      	nop
 800cab4:	0800e298 	.word	0x0800e298
 800cab8:	0800e010 	.word	0x0800e010
 800cabc:	0800e141 	.word	0x0800e141

0800cac0 <__lshift>:
 800cac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cac4:	460c      	mov	r4, r1
 800cac6:	6849      	ldr	r1, [r1, #4]
 800cac8:	6923      	ldr	r3, [r4, #16]
 800caca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cace:	68a3      	ldr	r3, [r4, #8]
 800cad0:	4607      	mov	r7, r0
 800cad2:	4691      	mov	r9, r2
 800cad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cad8:	f108 0601 	add.w	r6, r8, #1
 800cadc:	42b3      	cmp	r3, r6
 800cade:	db0b      	blt.n	800caf8 <__lshift+0x38>
 800cae0:	4638      	mov	r0, r7
 800cae2:	f7ff fddb 	bl	800c69c <_Balloc>
 800cae6:	4605      	mov	r5, r0
 800cae8:	b948      	cbnz	r0, 800cafe <__lshift+0x3e>
 800caea:	4602      	mov	r2, r0
 800caec:	4b28      	ldr	r3, [pc, #160]	; (800cb90 <__lshift+0xd0>)
 800caee:	4829      	ldr	r0, [pc, #164]	; (800cb94 <__lshift+0xd4>)
 800caf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800caf4:	f7fe ff1e 	bl	800b934 <__assert_func>
 800caf8:	3101      	adds	r1, #1
 800cafa:	005b      	lsls	r3, r3, #1
 800cafc:	e7ee      	b.n	800cadc <__lshift+0x1c>
 800cafe:	2300      	movs	r3, #0
 800cb00:	f100 0114 	add.w	r1, r0, #20
 800cb04:	f100 0210 	add.w	r2, r0, #16
 800cb08:	4618      	mov	r0, r3
 800cb0a:	4553      	cmp	r3, sl
 800cb0c:	db33      	blt.n	800cb76 <__lshift+0xb6>
 800cb0e:	6920      	ldr	r0, [r4, #16]
 800cb10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb14:	f104 0314 	add.w	r3, r4, #20
 800cb18:	f019 091f 	ands.w	r9, r9, #31
 800cb1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb24:	d02b      	beq.n	800cb7e <__lshift+0xbe>
 800cb26:	f1c9 0e20 	rsb	lr, r9, #32
 800cb2a:	468a      	mov	sl, r1
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	6818      	ldr	r0, [r3, #0]
 800cb30:	fa00 f009 	lsl.w	r0, r0, r9
 800cb34:	4302      	orrs	r2, r0
 800cb36:	f84a 2b04 	str.w	r2, [sl], #4
 800cb3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb3e:	459c      	cmp	ip, r3
 800cb40:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb44:	d8f3      	bhi.n	800cb2e <__lshift+0x6e>
 800cb46:	ebac 0304 	sub.w	r3, ip, r4
 800cb4a:	3b15      	subs	r3, #21
 800cb4c:	f023 0303 	bic.w	r3, r3, #3
 800cb50:	3304      	adds	r3, #4
 800cb52:	f104 0015 	add.w	r0, r4, #21
 800cb56:	4584      	cmp	ip, r0
 800cb58:	bf38      	it	cc
 800cb5a:	2304      	movcc	r3, #4
 800cb5c:	50ca      	str	r2, [r1, r3]
 800cb5e:	b10a      	cbz	r2, 800cb64 <__lshift+0xa4>
 800cb60:	f108 0602 	add.w	r6, r8, #2
 800cb64:	3e01      	subs	r6, #1
 800cb66:	4638      	mov	r0, r7
 800cb68:	612e      	str	r6, [r5, #16]
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	f7ff fdd6 	bl	800c71c <_Bfree>
 800cb70:	4628      	mov	r0, r5
 800cb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb76:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	e7c5      	b.n	800cb0a <__lshift+0x4a>
 800cb7e:	3904      	subs	r1, #4
 800cb80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb84:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb88:	459c      	cmp	ip, r3
 800cb8a:	d8f9      	bhi.n	800cb80 <__lshift+0xc0>
 800cb8c:	e7ea      	b.n	800cb64 <__lshift+0xa4>
 800cb8e:	bf00      	nop
 800cb90:	0800e130 	.word	0x0800e130
 800cb94:	0800e141 	.word	0x0800e141

0800cb98 <__mcmp>:
 800cb98:	b530      	push	{r4, r5, lr}
 800cb9a:	6902      	ldr	r2, [r0, #16]
 800cb9c:	690c      	ldr	r4, [r1, #16]
 800cb9e:	1b12      	subs	r2, r2, r4
 800cba0:	d10e      	bne.n	800cbc0 <__mcmp+0x28>
 800cba2:	f100 0314 	add.w	r3, r0, #20
 800cba6:	3114      	adds	r1, #20
 800cba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cbac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cbb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cbb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cbb8:	42a5      	cmp	r5, r4
 800cbba:	d003      	beq.n	800cbc4 <__mcmp+0x2c>
 800cbbc:	d305      	bcc.n	800cbca <__mcmp+0x32>
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	bd30      	pop	{r4, r5, pc}
 800cbc4:	4283      	cmp	r3, r0
 800cbc6:	d3f3      	bcc.n	800cbb0 <__mcmp+0x18>
 800cbc8:	e7fa      	b.n	800cbc0 <__mcmp+0x28>
 800cbca:	f04f 32ff 	mov.w	r2, #4294967295
 800cbce:	e7f7      	b.n	800cbc0 <__mcmp+0x28>

0800cbd0 <__mdiff>:
 800cbd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	4611      	mov	r1, r2
 800cbda:	4620      	mov	r0, r4
 800cbdc:	4617      	mov	r7, r2
 800cbde:	f7ff ffdb 	bl	800cb98 <__mcmp>
 800cbe2:	1e05      	subs	r5, r0, #0
 800cbe4:	d110      	bne.n	800cc08 <__mdiff+0x38>
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	4630      	mov	r0, r6
 800cbea:	f7ff fd57 	bl	800c69c <_Balloc>
 800cbee:	b930      	cbnz	r0, 800cbfe <__mdiff+0x2e>
 800cbf0:	4b39      	ldr	r3, [pc, #228]	; (800ccd8 <__mdiff+0x108>)
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	f240 2132 	movw	r1, #562	; 0x232
 800cbf8:	4838      	ldr	r0, [pc, #224]	; (800ccdc <__mdiff+0x10c>)
 800cbfa:	f7fe fe9b 	bl	800b934 <__assert_func>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc08:	bfa4      	itt	ge
 800cc0a:	463b      	movge	r3, r7
 800cc0c:	4627      	movge	r7, r4
 800cc0e:	4630      	mov	r0, r6
 800cc10:	6879      	ldr	r1, [r7, #4]
 800cc12:	bfa6      	itte	ge
 800cc14:	461c      	movge	r4, r3
 800cc16:	2500      	movge	r5, #0
 800cc18:	2501      	movlt	r5, #1
 800cc1a:	f7ff fd3f 	bl	800c69c <_Balloc>
 800cc1e:	b920      	cbnz	r0, 800cc2a <__mdiff+0x5a>
 800cc20:	4b2d      	ldr	r3, [pc, #180]	; (800ccd8 <__mdiff+0x108>)
 800cc22:	4602      	mov	r2, r0
 800cc24:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc28:	e7e6      	b.n	800cbf8 <__mdiff+0x28>
 800cc2a:	693e      	ldr	r6, [r7, #16]
 800cc2c:	60c5      	str	r5, [r0, #12]
 800cc2e:	6925      	ldr	r5, [r4, #16]
 800cc30:	f107 0114 	add.w	r1, r7, #20
 800cc34:	f104 0914 	add.w	r9, r4, #20
 800cc38:	f100 0e14 	add.w	lr, r0, #20
 800cc3c:	f107 0210 	add.w	r2, r7, #16
 800cc40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cc44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cc48:	46f2      	mov	sl, lr
 800cc4a:	2700      	movs	r7, #0
 800cc4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc54:	fa1f f883 	uxth.w	r8, r3
 800cc58:	fa17 f78b 	uxtah	r7, r7, fp
 800cc5c:	0c1b      	lsrs	r3, r3, #16
 800cc5e:	eba7 0808 	sub.w	r8, r7, r8
 800cc62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc6a:	fa1f f888 	uxth.w	r8, r8
 800cc6e:	141f      	asrs	r7, r3, #16
 800cc70:	454d      	cmp	r5, r9
 800cc72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc76:	f84a 3b04 	str.w	r3, [sl], #4
 800cc7a:	d8e7      	bhi.n	800cc4c <__mdiff+0x7c>
 800cc7c:	1b2b      	subs	r3, r5, r4
 800cc7e:	3b15      	subs	r3, #21
 800cc80:	f023 0303 	bic.w	r3, r3, #3
 800cc84:	3304      	adds	r3, #4
 800cc86:	3415      	adds	r4, #21
 800cc88:	42a5      	cmp	r5, r4
 800cc8a:	bf38      	it	cc
 800cc8c:	2304      	movcc	r3, #4
 800cc8e:	4419      	add	r1, r3
 800cc90:	4473      	add	r3, lr
 800cc92:	469e      	mov	lr, r3
 800cc94:	460d      	mov	r5, r1
 800cc96:	4565      	cmp	r5, ip
 800cc98:	d30e      	bcc.n	800ccb8 <__mdiff+0xe8>
 800cc9a:	f10c 0203 	add.w	r2, ip, #3
 800cc9e:	1a52      	subs	r2, r2, r1
 800cca0:	f022 0203 	bic.w	r2, r2, #3
 800cca4:	3903      	subs	r1, #3
 800cca6:	458c      	cmp	ip, r1
 800cca8:	bf38      	it	cc
 800ccaa:	2200      	movcc	r2, #0
 800ccac:	441a      	add	r2, r3
 800ccae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ccb2:	b17b      	cbz	r3, 800ccd4 <__mdiff+0x104>
 800ccb4:	6106      	str	r6, [r0, #16]
 800ccb6:	e7a5      	b.n	800cc04 <__mdiff+0x34>
 800ccb8:	f855 8b04 	ldr.w	r8, [r5], #4
 800ccbc:	fa17 f488 	uxtah	r4, r7, r8
 800ccc0:	1422      	asrs	r2, r4, #16
 800ccc2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ccc6:	b2a4      	uxth	r4, r4
 800ccc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cccc:	f84e 4b04 	str.w	r4, [lr], #4
 800ccd0:	1417      	asrs	r7, r2, #16
 800ccd2:	e7e0      	b.n	800cc96 <__mdiff+0xc6>
 800ccd4:	3e01      	subs	r6, #1
 800ccd6:	e7ea      	b.n	800ccae <__mdiff+0xde>
 800ccd8:	0800e130 	.word	0x0800e130
 800ccdc:	0800e141 	.word	0x0800e141

0800cce0 <__d2b>:
 800cce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cce4:	4689      	mov	r9, r1
 800cce6:	2101      	movs	r1, #1
 800cce8:	ec57 6b10 	vmov	r6, r7, d0
 800ccec:	4690      	mov	r8, r2
 800ccee:	f7ff fcd5 	bl	800c69c <_Balloc>
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	b930      	cbnz	r0, 800cd04 <__d2b+0x24>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	4b25      	ldr	r3, [pc, #148]	; (800cd90 <__d2b+0xb0>)
 800ccfa:	4826      	ldr	r0, [pc, #152]	; (800cd94 <__d2b+0xb4>)
 800ccfc:	f240 310a 	movw	r1, #778	; 0x30a
 800cd00:	f7fe fe18 	bl	800b934 <__assert_func>
 800cd04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cd08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd0c:	bb35      	cbnz	r5, 800cd5c <__d2b+0x7c>
 800cd0e:	2e00      	cmp	r6, #0
 800cd10:	9301      	str	r3, [sp, #4]
 800cd12:	d028      	beq.n	800cd66 <__d2b+0x86>
 800cd14:	4668      	mov	r0, sp
 800cd16:	9600      	str	r6, [sp, #0]
 800cd18:	f7ff fd8c 	bl	800c834 <__lo0bits>
 800cd1c:	9900      	ldr	r1, [sp, #0]
 800cd1e:	b300      	cbz	r0, 800cd62 <__d2b+0x82>
 800cd20:	9a01      	ldr	r2, [sp, #4]
 800cd22:	f1c0 0320 	rsb	r3, r0, #32
 800cd26:	fa02 f303 	lsl.w	r3, r2, r3
 800cd2a:	430b      	orrs	r3, r1
 800cd2c:	40c2      	lsrs	r2, r0
 800cd2e:	6163      	str	r3, [r4, #20]
 800cd30:	9201      	str	r2, [sp, #4]
 800cd32:	9b01      	ldr	r3, [sp, #4]
 800cd34:	61a3      	str	r3, [r4, #24]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	bf14      	ite	ne
 800cd3a:	2202      	movne	r2, #2
 800cd3c:	2201      	moveq	r2, #1
 800cd3e:	6122      	str	r2, [r4, #16]
 800cd40:	b1d5      	cbz	r5, 800cd78 <__d2b+0x98>
 800cd42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd46:	4405      	add	r5, r0
 800cd48:	f8c9 5000 	str.w	r5, [r9]
 800cd4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd50:	f8c8 0000 	str.w	r0, [r8]
 800cd54:	4620      	mov	r0, r4
 800cd56:	b003      	add	sp, #12
 800cd58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd60:	e7d5      	b.n	800cd0e <__d2b+0x2e>
 800cd62:	6161      	str	r1, [r4, #20]
 800cd64:	e7e5      	b.n	800cd32 <__d2b+0x52>
 800cd66:	a801      	add	r0, sp, #4
 800cd68:	f7ff fd64 	bl	800c834 <__lo0bits>
 800cd6c:	9b01      	ldr	r3, [sp, #4]
 800cd6e:	6163      	str	r3, [r4, #20]
 800cd70:	2201      	movs	r2, #1
 800cd72:	6122      	str	r2, [r4, #16]
 800cd74:	3020      	adds	r0, #32
 800cd76:	e7e3      	b.n	800cd40 <__d2b+0x60>
 800cd78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd80:	f8c9 0000 	str.w	r0, [r9]
 800cd84:	6918      	ldr	r0, [r3, #16]
 800cd86:	f7ff fd35 	bl	800c7f4 <__hi0bits>
 800cd8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd8e:	e7df      	b.n	800cd50 <__d2b+0x70>
 800cd90:	0800e130 	.word	0x0800e130
 800cd94:	0800e141 	.word	0x0800e141

0800cd98 <_calloc_r>:
 800cd98:	b513      	push	{r0, r1, r4, lr}
 800cd9a:	434a      	muls	r2, r1
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	9201      	str	r2, [sp, #4]
 800cda0:	f000 f85a 	bl	800ce58 <_malloc_r>
 800cda4:	4604      	mov	r4, r0
 800cda6:	b118      	cbz	r0, 800cdb0 <_calloc_r+0x18>
 800cda8:	9a01      	ldr	r2, [sp, #4]
 800cdaa:	2100      	movs	r1, #0
 800cdac:	f7fe f892 	bl	800aed4 <memset>
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	b002      	add	sp, #8
 800cdb4:	bd10      	pop	{r4, pc}
	...

0800cdb8 <_free_r>:
 800cdb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdba:	2900      	cmp	r1, #0
 800cdbc:	d048      	beq.n	800ce50 <_free_r+0x98>
 800cdbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc2:	9001      	str	r0, [sp, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f1a1 0404 	sub.w	r4, r1, #4
 800cdca:	bfb8      	it	lt
 800cdcc:	18e4      	addlt	r4, r4, r3
 800cdce:	f000 fe75 	bl	800dabc <__malloc_lock>
 800cdd2:	4a20      	ldr	r2, [pc, #128]	; (800ce54 <_free_r+0x9c>)
 800cdd4:	9801      	ldr	r0, [sp, #4]
 800cdd6:	6813      	ldr	r3, [r2, #0]
 800cdd8:	4615      	mov	r5, r2
 800cdda:	b933      	cbnz	r3, 800cdea <_free_r+0x32>
 800cddc:	6063      	str	r3, [r4, #4]
 800cdde:	6014      	str	r4, [r2, #0]
 800cde0:	b003      	add	sp, #12
 800cde2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cde6:	f000 be6f 	b.w	800dac8 <__malloc_unlock>
 800cdea:	42a3      	cmp	r3, r4
 800cdec:	d90b      	bls.n	800ce06 <_free_r+0x4e>
 800cdee:	6821      	ldr	r1, [r4, #0]
 800cdf0:	1862      	adds	r2, r4, r1
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	bf04      	itt	eq
 800cdf6:	681a      	ldreq	r2, [r3, #0]
 800cdf8:	685b      	ldreq	r3, [r3, #4]
 800cdfa:	6063      	str	r3, [r4, #4]
 800cdfc:	bf04      	itt	eq
 800cdfe:	1852      	addeq	r2, r2, r1
 800ce00:	6022      	streq	r2, [r4, #0]
 800ce02:	602c      	str	r4, [r5, #0]
 800ce04:	e7ec      	b.n	800cde0 <_free_r+0x28>
 800ce06:	461a      	mov	r2, r3
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	b10b      	cbz	r3, 800ce10 <_free_r+0x58>
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	d9fa      	bls.n	800ce06 <_free_r+0x4e>
 800ce10:	6811      	ldr	r1, [r2, #0]
 800ce12:	1855      	adds	r5, r2, r1
 800ce14:	42a5      	cmp	r5, r4
 800ce16:	d10b      	bne.n	800ce30 <_free_r+0x78>
 800ce18:	6824      	ldr	r4, [r4, #0]
 800ce1a:	4421      	add	r1, r4
 800ce1c:	1854      	adds	r4, r2, r1
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	6011      	str	r1, [r2, #0]
 800ce22:	d1dd      	bne.n	800cde0 <_free_r+0x28>
 800ce24:	681c      	ldr	r4, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	6053      	str	r3, [r2, #4]
 800ce2a:	4421      	add	r1, r4
 800ce2c:	6011      	str	r1, [r2, #0]
 800ce2e:	e7d7      	b.n	800cde0 <_free_r+0x28>
 800ce30:	d902      	bls.n	800ce38 <_free_r+0x80>
 800ce32:	230c      	movs	r3, #12
 800ce34:	6003      	str	r3, [r0, #0]
 800ce36:	e7d3      	b.n	800cde0 <_free_r+0x28>
 800ce38:	6825      	ldr	r5, [r4, #0]
 800ce3a:	1961      	adds	r1, r4, r5
 800ce3c:	428b      	cmp	r3, r1
 800ce3e:	bf04      	itt	eq
 800ce40:	6819      	ldreq	r1, [r3, #0]
 800ce42:	685b      	ldreq	r3, [r3, #4]
 800ce44:	6063      	str	r3, [r4, #4]
 800ce46:	bf04      	itt	eq
 800ce48:	1949      	addeq	r1, r1, r5
 800ce4a:	6021      	streq	r1, [r4, #0]
 800ce4c:	6054      	str	r4, [r2, #4]
 800ce4e:	e7c7      	b.n	800cde0 <_free_r+0x28>
 800ce50:	b003      	add	sp, #12
 800ce52:	bd30      	pop	{r4, r5, pc}
 800ce54:	20000e90 	.word	0x20000e90

0800ce58 <_malloc_r>:
 800ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5a:	1ccd      	adds	r5, r1, #3
 800ce5c:	f025 0503 	bic.w	r5, r5, #3
 800ce60:	3508      	adds	r5, #8
 800ce62:	2d0c      	cmp	r5, #12
 800ce64:	bf38      	it	cc
 800ce66:	250c      	movcc	r5, #12
 800ce68:	2d00      	cmp	r5, #0
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	db01      	blt.n	800ce72 <_malloc_r+0x1a>
 800ce6e:	42a9      	cmp	r1, r5
 800ce70:	d903      	bls.n	800ce7a <_malloc_r+0x22>
 800ce72:	230c      	movs	r3, #12
 800ce74:	6033      	str	r3, [r6, #0]
 800ce76:	2000      	movs	r0, #0
 800ce78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce7a:	f000 fe1f 	bl	800dabc <__malloc_lock>
 800ce7e:	4921      	ldr	r1, [pc, #132]	; (800cf04 <_malloc_r+0xac>)
 800ce80:	680a      	ldr	r2, [r1, #0]
 800ce82:	4614      	mov	r4, r2
 800ce84:	b99c      	cbnz	r4, 800ceae <_malloc_r+0x56>
 800ce86:	4f20      	ldr	r7, [pc, #128]	; (800cf08 <_malloc_r+0xb0>)
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	b923      	cbnz	r3, 800ce96 <_malloc_r+0x3e>
 800ce8c:	4621      	mov	r1, r4
 800ce8e:	4630      	mov	r0, r6
 800ce90:	f000 faf2 	bl	800d478 <_sbrk_r>
 800ce94:	6038      	str	r0, [r7, #0]
 800ce96:	4629      	mov	r1, r5
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f000 faed 	bl	800d478 <_sbrk_r>
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	d123      	bne.n	800ceea <_malloc_r+0x92>
 800cea2:	230c      	movs	r3, #12
 800cea4:	6033      	str	r3, [r6, #0]
 800cea6:	4630      	mov	r0, r6
 800cea8:	f000 fe0e 	bl	800dac8 <__malloc_unlock>
 800ceac:	e7e3      	b.n	800ce76 <_malloc_r+0x1e>
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	1b5b      	subs	r3, r3, r5
 800ceb2:	d417      	bmi.n	800cee4 <_malloc_r+0x8c>
 800ceb4:	2b0b      	cmp	r3, #11
 800ceb6:	d903      	bls.n	800cec0 <_malloc_r+0x68>
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	441c      	add	r4, r3
 800cebc:	6025      	str	r5, [r4, #0]
 800cebe:	e004      	b.n	800ceca <_malloc_r+0x72>
 800cec0:	6863      	ldr	r3, [r4, #4]
 800cec2:	42a2      	cmp	r2, r4
 800cec4:	bf0c      	ite	eq
 800cec6:	600b      	streq	r3, [r1, #0]
 800cec8:	6053      	strne	r3, [r2, #4]
 800ceca:	4630      	mov	r0, r6
 800cecc:	f000 fdfc 	bl	800dac8 <__malloc_unlock>
 800ced0:	f104 000b 	add.w	r0, r4, #11
 800ced4:	1d23      	adds	r3, r4, #4
 800ced6:	f020 0007 	bic.w	r0, r0, #7
 800ceda:	1ac2      	subs	r2, r0, r3
 800cedc:	d0cc      	beq.n	800ce78 <_malloc_r+0x20>
 800cede:	1a1b      	subs	r3, r3, r0
 800cee0:	50a3      	str	r3, [r4, r2]
 800cee2:	e7c9      	b.n	800ce78 <_malloc_r+0x20>
 800cee4:	4622      	mov	r2, r4
 800cee6:	6864      	ldr	r4, [r4, #4]
 800cee8:	e7cc      	b.n	800ce84 <_malloc_r+0x2c>
 800ceea:	1cc4      	adds	r4, r0, #3
 800ceec:	f024 0403 	bic.w	r4, r4, #3
 800cef0:	42a0      	cmp	r0, r4
 800cef2:	d0e3      	beq.n	800cebc <_malloc_r+0x64>
 800cef4:	1a21      	subs	r1, r4, r0
 800cef6:	4630      	mov	r0, r6
 800cef8:	f000 fabe 	bl	800d478 <_sbrk_r>
 800cefc:	3001      	adds	r0, #1
 800cefe:	d1dd      	bne.n	800cebc <_malloc_r+0x64>
 800cf00:	e7cf      	b.n	800cea2 <_malloc_r+0x4a>
 800cf02:	bf00      	nop
 800cf04:	20000e90 	.word	0x20000e90
 800cf08:	20000e94 	.word	0x20000e94

0800cf0c <__ssputs_r>:
 800cf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf10:	688e      	ldr	r6, [r1, #8]
 800cf12:	429e      	cmp	r6, r3
 800cf14:	4682      	mov	sl, r0
 800cf16:	460c      	mov	r4, r1
 800cf18:	4690      	mov	r8, r2
 800cf1a:	461f      	mov	r7, r3
 800cf1c:	d838      	bhi.n	800cf90 <__ssputs_r+0x84>
 800cf1e:	898a      	ldrh	r2, [r1, #12]
 800cf20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf24:	d032      	beq.n	800cf8c <__ssputs_r+0x80>
 800cf26:	6825      	ldr	r5, [r4, #0]
 800cf28:	6909      	ldr	r1, [r1, #16]
 800cf2a:	eba5 0901 	sub.w	r9, r5, r1
 800cf2e:	6965      	ldr	r5, [r4, #20]
 800cf30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf38:	3301      	adds	r3, #1
 800cf3a:	444b      	add	r3, r9
 800cf3c:	106d      	asrs	r5, r5, #1
 800cf3e:	429d      	cmp	r5, r3
 800cf40:	bf38      	it	cc
 800cf42:	461d      	movcc	r5, r3
 800cf44:	0553      	lsls	r3, r2, #21
 800cf46:	d531      	bpl.n	800cfac <__ssputs_r+0xa0>
 800cf48:	4629      	mov	r1, r5
 800cf4a:	f7ff ff85 	bl	800ce58 <_malloc_r>
 800cf4e:	4606      	mov	r6, r0
 800cf50:	b950      	cbnz	r0, 800cf68 <__ssputs_r+0x5c>
 800cf52:	230c      	movs	r3, #12
 800cf54:	f8ca 3000 	str.w	r3, [sl]
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf5e:	81a3      	strh	r3, [r4, #12]
 800cf60:	f04f 30ff 	mov.w	r0, #4294967295
 800cf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf68:	6921      	ldr	r1, [r4, #16]
 800cf6a:	464a      	mov	r2, r9
 800cf6c:	f7fd ffa4 	bl	800aeb8 <memcpy>
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf7a:	81a3      	strh	r3, [r4, #12]
 800cf7c:	6126      	str	r6, [r4, #16]
 800cf7e:	6165      	str	r5, [r4, #20]
 800cf80:	444e      	add	r6, r9
 800cf82:	eba5 0509 	sub.w	r5, r5, r9
 800cf86:	6026      	str	r6, [r4, #0]
 800cf88:	60a5      	str	r5, [r4, #8]
 800cf8a:	463e      	mov	r6, r7
 800cf8c:	42be      	cmp	r6, r7
 800cf8e:	d900      	bls.n	800cf92 <__ssputs_r+0x86>
 800cf90:	463e      	mov	r6, r7
 800cf92:	4632      	mov	r2, r6
 800cf94:	6820      	ldr	r0, [r4, #0]
 800cf96:	4641      	mov	r1, r8
 800cf98:	f000 fd76 	bl	800da88 <memmove>
 800cf9c:	68a3      	ldr	r3, [r4, #8]
 800cf9e:	6822      	ldr	r2, [r4, #0]
 800cfa0:	1b9b      	subs	r3, r3, r6
 800cfa2:	4432      	add	r2, r6
 800cfa4:	60a3      	str	r3, [r4, #8]
 800cfa6:	6022      	str	r2, [r4, #0]
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	e7db      	b.n	800cf64 <__ssputs_r+0x58>
 800cfac:	462a      	mov	r2, r5
 800cfae:	f000 fd91 	bl	800dad4 <_realloc_r>
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d1e1      	bne.n	800cf7c <__ssputs_r+0x70>
 800cfb8:	6921      	ldr	r1, [r4, #16]
 800cfba:	4650      	mov	r0, sl
 800cfbc:	f7ff fefc 	bl	800cdb8 <_free_r>
 800cfc0:	e7c7      	b.n	800cf52 <__ssputs_r+0x46>
	...

0800cfc4 <_svfiprintf_r>:
 800cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	4698      	mov	r8, r3
 800cfca:	898b      	ldrh	r3, [r1, #12]
 800cfcc:	061b      	lsls	r3, r3, #24
 800cfce:	b09d      	sub	sp, #116	; 0x74
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	460d      	mov	r5, r1
 800cfd4:	4614      	mov	r4, r2
 800cfd6:	d50e      	bpl.n	800cff6 <_svfiprintf_r+0x32>
 800cfd8:	690b      	ldr	r3, [r1, #16]
 800cfda:	b963      	cbnz	r3, 800cff6 <_svfiprintf_r+0x32>
 800cfdc:	2140      	movs	r1, #64	; 0x40
 800cfde:	f7ff ff3b 	bl	800ce58 <_malloc_r>
 800cfe2:	6028      	str	r0, [r5, #0]
 800cfe4:	6128      	str	r0, [r5, #16]
 800cfe6:	b920      	cbnz	r0, 800cff2 <_svfiprintf_r+0x2e>
 800cfe8:	230c      	movs	r3, #12
 800cfea:	603b      	str	r3, [r7, #0]
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295
 800cff0:	e0d1      	b.n	800d196 <_svfiprintf_r+0x1d2>
 800cff2:	2340      	movs	r3, #64	; 0x40
 800cff4:	616b      	str	r3, [r5, #20]
 800cff6:	2300      	movs	r3, #0
 800cff8:	9309      	str	r3, [sp, #36]	; 0x24
 800cffa:	2320      	movs	r3, #32
 800cffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d000:	f8cd 800c 	str.w	r8, [sp, #12]
 800d004:	2330      	movs	r3, #48	; 0x30
 800d006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d1b0 <_svfiprintf_r+0x1ec>
 800d00a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d00e:	f04f 0901 	mov.w	r9, #1
 800d012:	4623      	mov	r3, r4
 800d014:	469a      	mov	sl, r3
 800d016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d01a:	b10a      	cbz	r2, 800d020 <_svfiprintf_r+0x5c>
 800d01c:	2a25      	cmp	r2, #37	; 0x25
 800d01e:	d1f9      	bne.n	800d014 <_svfiprintf_r+0x50>
 800d020:	ebba 0b04 	subs.w	fp, sl, r4
 800d024:	d00b      	beq.n	800d03e <_svfiprintf_r+0x7a>
 800d026:	465b      	mov	r3, fp
 800d028:	4622      	mov	r2, r4
 800d02a:	4629      	mov	r1, r5
 800d02c:	4638      	mov	r0, r7
 800d02e:	f7ff ff6d 	bl	800cf0c <__ssputs_r>
 800d032:	3001      	adds	r0, #1
 800d034:	f000 80aa 	beq.w	800d18c <_svfiprintf_r+0x1c8>
 800d038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d03a:	445a      	add	r2, fp
 800d03c:	9209      	str	r2, [sp, #36]	; 0x24
 800d03e:	f89a 3000 	ldrb.w	r3, [sl]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 80a2 	beq.w	800d18c <_svfiprintf_r+0x1c8>
 800d048:	2300      	movs	r3, #0
 800d04a:	f04f 32ff 	mov.w	r2, #4294967295
 800d04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d052:	f10a 0a01 	add.w	sl, sl, #1
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	9307      	str	r3, [sp, #28]
 800d05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d05e:	931a      	str	r3, [sp, #104]	; 0x68
 800d060:	4654      	mov	r4, sl
 800d062:	2205      	movs	r2, #5
 800d064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d068:	4851      	ldr	r0, [pc, #324]	; (800d1b0 <_svfiprintf_r+0x1ec>)
 800d06a:	f7f3 f8b9 	bl	80001e0 <memchr>
 800d06e:	9a04      	ldr	r2, [sp, #16]
 800d070:	b9d8      	cbnz	r0, 800d0aa <_svfiprintf_r+0xe6>
 800d072:	06d0      	lsls	r0, r2, #27
 800d074:	bf44      	itt	mi
 800d076:	2320      	movmi	r3, #32
 800d078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d07c:	0711      	lsls	r1, r2, #28
 800d07e:	bf44      	itt	mi
 800d080:	232b      	movmi	r3, #43	; 0x2b
 800d082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d086:	f89a 3000 	ldrb.w	r3, [sl]
 800d08a:	2b2a      	cmp	r3, #42	; 0x2a
 800d08c:	d015      	beq.n	800d0ba <_svfiprintf_r+0xf6>
 800d08e:	9a07      	ldr	r2, [sp, #28]
 800d090:	4654      	mov	r4, sl
 800d092:	2000      	movs	r0, #0
 800d094:	f04f 0c0a 	mov.w	ip, #10
 800d098:	4621      	mov	r1, r4
 800d09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d09e:	3b30      	subs	r3, #48	; 0x30
 800d0a0:	2b09      	cmp	r3, #9
 800d0a2:	d94e      	bls.n	800d142 <_svfiprintf_r+0x17e>
 800d0a4:	b1b0      	cbz	r0, 800d0d4 <_svfiprintf_r+0x110>
 800d0a6:	9207      	str	r2, [sp, #28]
 800d0a8:	e014      	b.n	800d0d4 <_svfiprintf_r+0x110>
 800d0aa:	eba0 0308 	sub.w	r3, r0, r8
 800d0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	46a2      	mov	sl, r4
 800d0b8:	e7d2      	b.n	800d060 <_svfiprintf_r+0x9c>
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	1d19      	adds	r1, r3, #4
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	9103      	str	r1, [sp, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	bfbb      	ittet	lt
 800d0c6:	425b      	neglt	r3, r3
 800d0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d0cc:	9307      	strge	r3, [sp, #28]
 800d0ce:	9307      	strlt	r3, [sp, #28]
 800d0d0:	bfb8      	it	lt
 800d0d2:	9204      	strlt	r2, [sp, #16]
 800d0d4:	7823      	ldrb	r3, [r4, #0]
 800d0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d0d8:	d10c      	bne.n	800d0f4 <_svfiprintf_r+0x130>
 800d0da:	7863      	ldrb	r3, [r4, #1]
 800d0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0de:	d135      	bne.n	800d14c <_svfiprintf_r+0x188>
 800d0e0:	9b03      	ldr	r3, [sp, #12]
 800d0e2:	1d1a      	adds	r2, r3, #4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	9203      	str	r2, [sp, #12]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	bfb8      	it	lt
 800d0ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0f0:	3402      	adds	r4, #2
 800d0f2:	9305      	str	r3, [sp, #20]
 800d0f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1c0 <_svfiprintf_r+0x1fc>
 800d0f8:	7821      	ldrb	r1, [r4, #0]
 800d0fa:	2203      	movs	r2, #3
 800d0fc:	4650      	mov	r0, sl
 800d0fe:	f7f3 f86f 	bl	80001e0 <memchr>
 800d102:	b140      	cbz	r0, 800d116 <_svfiprintf_r+0x152>
 800d104:	2340      	movs	r3, #64	; 0x40
 800d106:	eba0 000a 	sub.w	r0, r0, sl
 800d10a:	fa03 f000 	lsl.w	r0, r3, r0
 800d10e:	9b04      	ldr	r3, [sp, #16]
 800d110:	4303      	orrs	r3, r0
 800d112:	3401      	adds	r4, #1
 800d114:	9304      	str	r3, [sp, #16]
 800d116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d11a:	4826      	ldr	r0, [pc, #152]	; (800d1b4 <_svfiprintf_r+0x1f0>)
 800d11c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d120:	2206      	movs	r2, #6
 800d122:	f7f3 f85d 	bl	80001e0 <memchr>
 800d126:	2800      	cmp	r0, #0
 800d128:	d038      	beq.n	800d19c <_svfiprintf_r+0x1d8>
 800d12a:	4b23      	ldr	r3, [pc, #140]	; (800d1b8 <_svfiprintf_r+0x1f4>)
 800d12c:	bb1b      	cbnz	r3, 800d176 <_svfiprintf_r+0x1b2>
 800d12e:	9b03      	ldr	r3, [sp, #12]
 800d130:	3307      	adds	r3, #7
 800d132:	f023 0307 	bic.w	r3, r3, #7
 800d136:	3308      	adds	r3, #8
 800d138:	9303      	str	r3, [sp, #12]
 800d13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13c:	4433      	add	r3, r6
 800d13e:	9309      	str	r3, [sp, #36]	; 0x24
 800d140:	e767      	b.n	800d012 <_svfiprintf_r+0x4e>
 800d142:	fb0c 3202 	mla	r2, ip, r2, r3
 800d146:	460c      	mov	r4, r1
 800d148:	2001      	movs	r0, #1
 800d14a:	e7a5      	b.n	800d098 <_svfiprintf_r+0xd4>
 800d14c:	2300      	movs	r3, #0
 800d14e:	3401      	adds	r4, #1
 800d150:	9305      	str	r3, [sp, #20]
 800d152:	4619      	mov	r1, r3
 800d154:	f04f 0c0a 	mov.w	ip, #10
 800d158:	4620      	mov	r0, r4
 800d15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d15e:	3a30      	subs	r2, #48	; 0x30
 800d160:	2a09      	cmp	r2, #9
 800d162:	d903      	bls.n	800d16c <_svfiprintf_r+0x1a8>
 800d164:	2b00      	cmp	r3, #0
 800d166:	d0c5      	beq.n	800d0f4 <_svfiprintf_r+0x130>
 800d168:	9105      	str	r1, [sp, #20]
 800d16a:	e7c3      	b.n	800d0f4 <_svfiprintf_r+0x130>
 800d16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d170:	4604      	mov	r4, r0
 800d172:	2301      	movs	r3, #1
 800d174:	e7f0      	b.n	800d158 <_svfiprintf_r+0x194>
 800d176:	ab03      	add	r3, sp, #12
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	462a      	mov	r2, r5
 800d17c:	4b0f      	ldr	r3, [pc, #60]	; (800d1bc <_svfiprintf_r+0x1f8>)
 800d17e:	a904      	add	r1, sp, #16
 800d180:	4638      	mov	r0, r7
 800d182:	f7fd ff4f 	bl	800b024 <_printf_float>
 800d186:	1c42      	adds	r2, r0, #1
 800d188:	4606      	mov	r6, r0
 800d18a:	d1d6      	bne.n	800d13a <_svfiprintf_r+0x176>
 800d18c:	89ab      	ldrh	r3, [r5, #12]
 800d18e:	065b      	lsls	r3, r3, #25
 800d190:	f53f af2c 	bmi.w	800cfec <_svfiprintf_r+0x28>
 800d194:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d196:	b01d      	add	sp, #116	; 0x74
 800d198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19c:	ab03      	add	r3, sp, #12
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	462a      	mov	r2, r5
 800d1a2:	4b06      	ldr	r3, [pc, #24]	; (800d1bc <_svfiprintf_r+0x1f8>)
 800d1a4:	a904      	add	r1, sp, #16
 800d1a6:	4638      	mov	r0, r7
 800d1a8:	f7fe f9e0 	bl	800b56c <_printf_i>
 800d1ac:	e7eb      	b.n	800d186 <_svfiprintf_r+0x1c2>
 800d1ae:	bf00      	nop
 800d1b0:	0800e2a4 	.word	0x0800e2a4
 800d1b4:	0800e2ae 	.word	0x0800e2ae
 800d1b8:	0800b025 	.word	0x0800b025
 800d1bc:	0800cf0d 	.word	0x0800cf0d
 800d1c0:	0800e2aa 	.word	0x0800e2aa

0800d1c4 <__sfputc_r>:
 800d1c4:	6893      	ldr	r3, [r2, #8]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	b410      	push	{r4}
 800d1cc:	6093      	str	r3, [r2, #8]
 800d1ce:	da08      	bge.n	800d1e2 <__sfputc_r+0x1e>
 800d1d0:	6994      	ldr	r4, [r2, #24]
 800d1d2:	42a3      	cmp	r3, r4
 800d1d4:	db01      	blt.n	800d1da <__sfputc_r+0x16>
 800d1d6:	290a      	cmp	r1, #10
 800d1d8:	d103      	bne.n	800d1e2 <__sfputc_r+0x1e>
 800d1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1de:	f000 b95b 	b.w	800d498 <__swbuf_r>
 800d1e2:	6813      	ldr	r3, [r2, #0]
 800d1e4:	1c58      	adds	r0, r3, #1
 800d1e6:	6010      	str	r0, [r2, #0]
 800d1e8:	7019      	strb	r1, [r3, #0]
 800d1ea:	4608      	mov	r0, r1
 800d1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <__sfputs_r>:
 800d1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	460f      	mov	r7, r1
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	18d5      	adds	r5, r2, r3
 800d1fc:	42ac      	cmp	r4, r5
 800d1fe:	d101      	bne.n	800d204 <__sfputs_r+0x12>
 800d200:	2000      	movs	r0, #0
 800d202:	e007      	b.n	800d214 <__sfputs_r+0x22>
 800d204:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d208:	463a      	mov	r2, r7
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7ff ffda 	bl	800d1c4 <__sfputc_r>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d1f3      	bne.n	800d1fc <__sfputs_r+0xa>
 800d214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d218 <_vfiprintf_r>:
 800d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	460d      	mov	r5, r1
 800d21e:	b09d      	sub	sp, #116	; 0x74
 800d220:	4614      	mov	r4, r2
 800d222:	4698      	mov	r8, r3
 800d224:	4606      	mov	r6, r0
 800d226:	b118      	cbz	r0, 800d230 <_vfiprintf_r+0x18>
 800d228:	6983      	ldr	r3, [r0, #24]
 800d22a:	b90b      	cbnz	r3, 800d230 <_vfiprintf_r+0x18>
 800d22c:	f000 fb16 	bl	800d85c <__sinit>
 800d230:	4b89      	ldr	r3, [pc, #548]	; (800d458 <_vfiprintf_r+0x240>)
 800d232:	429d      	cmp	r5, r3
 800d234:	d11b      	bne.n	800d26e <_vfiprintf_r+0x56>
 800d236:	6875      	ldr	r5, [r6, #4]
 800d238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d23a:	07d9      	lsls	r1, r3, #31
 800d23c:	d405      	bmi.n	800d24a <_vfiprintf_r+0x32>
 800d23e:	89ab      	ldrh	r3, [r5, #12]
 800d240:	059a      	lsls	r2, r3, #22
 800d242:	d402      	bmi.n	800d24a <_vfiprintf_r+0x32>
 800d244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d246:	f000 fba7 	bl	800d998 <__retarget_lock_acquire_recursive>
 800d24a:	89ab      	ldrh	r3, [r5, #12]
 800d24c:	071b      	lsls	r3, r3, #28
 800d24e:	d501      	bpl.n	800d254 <_vfiprintf_r+0x3c>
 800d250:	692b      	ldr	r3, [r5, #16]
 800d252:	b9eb      	cbnz	r3, 800d290 <_vfiprintf_r+0x78>
 800d254:	4629      	mov	r1, r5
 800d256:	4630      	mov	r0, r6
 800d258:	f000 f970 	bl	800d53c <__swsetup_r>
 800d25c:	b1c0      	cbz	r0, 800d290 <_vfiprintf_r+0x78>
 800d25e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d260:	07dc      	lsls	r4, r3, #31
 800d262:	d50e      	bpl.n	800d282 <_vfiprintf_r+0x6a>
 800d264:	f04f 30ff 	mov.w	r0, #4294967295
 800d268:	b01d      	add	sp, #116	; 0x74
 800d26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26e:	4b7b      	ldr	r3, [pc, #492]	; (800d45c <_vfiprintf_r+0x244>)
 800d270:	429d      	cmp	r5, r3
 800d272:	d101      	bne.n	800d278 <_vfiprintf_r+0x60>
 800d274:	68b5      	ldr	r5, [r6, #8]
 800d276:	e7df      	b.n	800d238 <_vfiprintf_r+0x20>
 800d278:	4b79      	ldr	r3, [pc, #484]	; (800d460 <_vfiprintf_r+0x248>)
 800d27a:	429d      	cmp	r5, r3
 800d27c:	bf08      	it	eq
 800d27e:	68f5      	ldreq	r5, [r6, #12]
 800d280:	e7da      	b.n	800d238 <_vfiprintf_r+0x20>
 800d282:	89ab      	ldrh	r3, [r5, #12]
 800d284:	0598      	lsls	r0, r3, #22
 800d286:	d4ed      	bmi.n	800d264 <_vfiprintf_r+0x4c>
 800d288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d28a:	f000 fb86 	bl	800d99a <__retarget_lock_release_recursive>
 800d28e:	e7e9      	b.n	800d264 <_vfiprintf_r+0x4c>
 800d290:	2300      	movs	r3, #0
 800d292:	9309      	str	r3, [sp, #36]	; 0x24
 800d294:	2320      	movs	r3, #32
 800d296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d29a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d29e:	2330      	movs	r3, #48	; 0x30
 800d2a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d464 <_vfiprintf_r+0x24c>
 800d2a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2a8:	f04f 0901 	mov.w	r9, #1
 800d2ac:	4623      	mov	r3, r4
 800d2ae:	469a      	mov	sl, r3
 800d2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b4:	b10a      	cbz	r2, 800d2ba <_vfiprintf_r+0xa2>
 800d2b6:	2a25      	cmp	r2, #37	; 0x25
 800d2b8:	d1f9      	bne.n	800d2ae <_vfiprintf_r+0x96>
 800d2ba:	ebba 0b04 	subs.w	fp, sl, r4
 800d2be:	d00b      	beq.n	800d2d8 <_vfiprintf_r+0xc0>
 800d2c0:	465b      	mov	r3, fp
 800d2c2:	4622      	mov	r2, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f7ff ff93 	bl	800d1f2 <__sfputs_r>
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	f000 80aa 	beq.w	800d426 <_vfiprintf_r+0x20e>
 800d2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2d4:	445a      	add	r2, fp
 800d2d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 80a2 	beq.w	800d426 <_vfiprintf_r+0x20e>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ec:	f10a 0a01 	add.w	sl, sl, #1
 800d2f0:	9304      	str	r3, [sp, #16]
 800d2f2:	9307      	str	r3, [sp, #28]
 800d2f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d2fa:	4654      	mov	r4, sl
 800d2fc:	2205      	movs	r2, #5
 800d2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d302:	4858      	ldr	r0, [pc, #352]	; (800d464 <_vfiprintf_r+0x24c>)
 800d304:	f7f2 ff6c 	bl	80001e0 <memchr>
 800d308:	9a04      	ldr	r2, [sp, #16]
 800d30a:	b9d8      	cbnz	r0, 800d344 <_vfiprintf_r+0x12c>
 800d30c:	06d1      	lsls	r1, r2, #27
 800d30e:	bf44      	itt	mi
 800d310:	2320      	movmi	r3, #32
 800d312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d316:	0713      	lsls	r3, r2, #28
 800d318:	bf44      	itt	mi
 800d31a:	232b      	movmi	r3, #43	; 0x2b
 800d31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d320:	f89a 3000 	ldrb.w	r3, [sl]
 800d324:	2b2a      	cmp	r3, #42	; 0x2a
 800d326:	d015      	beq.n	800d354 <_vfiprintf_r+0x13c>
 800d328:	9a07      	ldr	r2, [sp, #28]
 800d32a:	4654      	mov	r4, sl
 800d32c:	2000      	movs	r0, #0
 800d32e:	f04f 0c0a 	mov.w	ip, #10
 800d332:	4621      	mov	r1, r4
 800d334:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d338:	3b30      	subs	r3, #48	; 0x30
 800d33a:	2b09      	cmp	r3, #9
 800d33c:	d94e      	bls.n	800d3dc <_vfiprintf_r+0x1c4>
 800d33e:	b1b0      	cbz	r0, 800d36e <_vfiprintf_r+0x156>
 800d340:	9207      	str	r2, [sp, #28]
 800d342:	e014      	b.n	800d36e <_vfiprintf_r+0x156>
 800d344:	eba0 0308 	sub.w	r3, r0, r8
 800d348:	fa09 f303 	lsl.w	r3, r9, r3
 800d34c:	4313      	orrs	r3, r2
 800d34e:	9304      	str	r3, [sp, #16]
 800d350:	46a2      	mov	sl, r4
 800d352:	e7d2      	b.n	800d2fa <_vfiprintf_r+0xe2>
 800d354:	9b03      	ldr	r3, [sp, #12]
 800d356:	1d19      	adds	r1, r3, #4
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	9103      	str	r1, [sp, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	bfbb      	ittet	lt
 800d360:	425b      	neglt	r3, r3
 800d362:	f042 0202 	orrlt.w	r2, r2, #2
 800d366:	9307      	strge	r3, [sp, #28]
 800d368:	9307      	strlt	r3, [sp, #28]
 800d36a:	bfb8      	it	lt
 800d36c:	9204      	strlt	r2, [sp, #16]
 800d36e:	7823      	ldrb	r3, [r4, #0]
 800d370:	2b2e      	cmp	r3, #46	; 0x2e
 800d372:	d10c      	bne.n	800d38e <_vfiprintf_r+0x176>
 800d374:	7863      	ldrb	r3, [r4, #1]
 800d376:	2b2a      	cmp	r3, #42	; 0x2a
 800d378:	d135      	bne.n	800d3e6 <_vfiprintf_r+0x1ce>
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	1d1a      	adds	r2, r3, #4
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	9203      	str	r2, [sp, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	bfb8      	it	lt
 800d386:	f04f 33ff 	movlt.w	r3, #4294967295
 800d38a:	3402      	adds	r4, #2
 800d38c:	9305      	str	r3, [sp, #20]
 800d38e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d474 <_vfiprintf_r+0x25c>
 800d392:	7821      	ldrb	r1, [r4, #0]
 800d394:	2203      	movs	r2, #3
 800d396:	4650      	mov	r0, sl
 800d398:	f7f2 ff22 	bl	80001e0 <memchr>
 800d39c:	b140      	cbz	r0, 800d3b0 <_vfiprintf_r+0x198>
 800d39e:	2340      	movs	r3, #64	; 0x40
 800d3a0:	eba0 000a 	sub.w	r0, r0, sl
 800d3a4:	fa03 f000 	lsl.w	r0, r3, r0
 800d3a8:	9b04      	ldr	r3, [sp, #16]
 800d3aa:	4303      	orrs	r3, r0
 800d3ac:	3401      	adds	r4, #1
 800d3ae:	9304      	str	r3, [sp, #16]
 800d3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b4:	482c      	ldr	r0, [pc, #176]	; (800d468 <_vfiprintf_r+0x250>)
 800d3b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3ba:	2206      	movs	r2, #6
 800d3bc:	f7f2 ff10 	bl	80001e0 <memchr>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d03f      	beq.n	800d444 <_vfiprintf_r+0x22c>
 800d3c4:	4b29      	ldr	r3, [pc, #164]	; (800d46c <_vfiprintf_r+0x254>)
 800d3c6:	bb1b      	cbnz	r3, 800d410 <_vfiprintf_r+0x1f8>
 800d3c8:	9b03      	ldr	r3, [sp, #12]
 800d3ca:	3307      	adds	r3, #7
 800d3cc:	f023 0307 	bic.w	r3, r3, #7
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	9303      	str	r3, [sp, #12]
 800d3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d6:	443b      	add	r3, r7
 800d3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3da:	e767      	b.n	800d2ac <_vfiprintf_r+0x94>
 800d3dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	2001      	movs	r0, #1
 800d3e4:	e7a5      	b.n	800d332 <_vfiprintf_r+0x11a>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	3401      	adds	r4, #1
 800d3ea:	9305      	str	r3, [sp, #20]
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	f04f 0c0a 	mov.w	ip, #10
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3f8:	3a30      	subs	r2, #48	; 0x30
 800d3fa:	2a09      	cmp	r2, #9
 800d3fc:	d903      	bls.n	800d406 <_vfiprintf_r+0x1ee>
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d0c5      	beq.n	800d38e <_vfiprintf_r+0x176>
 800d402:	9105      	str	r1, [sp, #20]
 800d404:	e7c3      	b.n	800d38e <_vfiprintf_r+0x176>
 800d406:	fb0c 2101 	mla	r1, ip, r1, r2
 800d40a:	4604      	mov	r4, r0
 800d40c:	2301      	movs	r3, #1
 800d40e:	e7f0      	b.n	800d3f2 <_vfiprintf_r+0x1da>
 800d410:	ab03      	add	r3, sp, #12
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	462a      	mov	r2, r5
 800d416:	4b16      	ldr	r3, [pc, #88]	; (800d470 <_vfiprintf_r+0x258>)
 800d418:	a904      	add	r1, sp, #16
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7fd fe02 	bl	800b024 <_printf_float>
 800d420:	4607      	mov	r7, r0
 800d422:	1c78      	adds	r0, r7, #1
 800d424:	d1d6      	bne.n	800d3d4 <_vfiprintf_r+0x1bc>
 800d426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d428:	07d9      	lsls	r1, r3, #31
 800d42a:	d405      	bmi.n	800d438 <_vfiprintf_r+0x220>
 800d42c:	89ab      	ldrh	r3, [r5, #12]
 800d42e:	059a      	lsls	r2, r3, #22
 800d430:	d402      	bmi.n	800d438 <_vfiprintf_r+0x220>
 800d432:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d434:	f000 fab1 	bl	800d99a <__retarget_lock_release_recursive>
 800d438:	89ab      	ldrh	r3, [r5, #12]
 800d43a:	065b      	lsls	r3, r3, #25
 800d43c:	f53f af12 	bmi.w	800d264 <_vfiprintf_r+0x4c>
 800d440:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d442:	e711      	b.n	800d268 <_vfiprintf_r+0x50>
 800d444:	ab03      	add	r3, sp, #12
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	462a      	mov	r2, r5
 800d44a:	4b09      	ldr	r3, [pc, #36]	; (800d470 <_vfiprintf_r+0x258>)
 800d44c:	a904      	add	r1, sp, #16
 800d44e:	4630      	mov	r0, r6
 800d450:	f7fe f88c 	bl	800b56c <_printf_i>
 800d454:	e7e4      	b.n	800d420 <_vfiprintf_r+0x208>
 800d456:	bf00      	nop
 800d458:	0800e2d8 	.word	0x0800e2d8
 800d45c:	0800e2f8 	.word	0x0800e2f8
 800d460:	0800e2b8 	.word	0x0800e2b8
 800d464:	0800e2a4 	.word	0x0800e2a4
 800d468:	0800e2ae 	.word	0x0800e2ae
 800d46c:	0800b025 	.word	0x0800b025
 800d470:	0800d1f3 	.word	0x0800d1f3
 800d474:	0800e2aa 	.word	0x0800e2aa

0800d478 <_sbrk_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d06      	ldr	r5, [pc, #24]	; (800d494 <_sbrk_r+0x1c>)
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	4608      	mov	r0, r1
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	f7f4 f84e 	bl	8001524 <_sbrk>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_sbrk_r+0x1a>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_sbrk_r+0x1a>
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	20001f14 	.word	0x20001f14

0800d498 <__swbuf_r>:
 800d498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49a:	460e      	mov	r6, r1
 800d49c:	4614      	mov	r4, r2
 800d49e:	4605      	mov	r5, r0
 800d4a0:	b118      	cbz	r0, 800d4aa <__swbuf_r+0x12>
 800d4a2:	6983      	ldr	r3, [r0, #24]
 800d4a4:	b90b      	cbnz	r3, 800d4aa <__swbuf_r+0x12>
 800d4a6:	f000 f9d9 	bl	800d85c <__sinit>
 800d4aa:	4b21      	ldr	r3, [pc, #132]	; (800d530 <__swbuf_r+0x98>)
 800d4ac:	429c      	cmp	r4, r3
 800d4ae:	d12b      	bne.n	800d508 <__swbuf_r+0x70>
 800d4b0:	686c      	ldr	r4, [r5, #4]
 800d4b2:	69a3      	ldr	r3, [r4, #24]
 800d4b4:	60a3      	str	r3, [r4, #8]
 800d4b6:	89a3      	ldrh	r3, [r4, #12]
 800d4b8:	071a      	lsls	r2, r3, #28
 800d4ba:	d52f      	bpl.n	800d51c <__swbuf_r+0x84>
 800d4bc:	6923      	ldr	r3, [r4, #16]
 800d4be:	b36b      	cbz	r3, 800d51c <__swbuf_r+0x84>
 800d4c0:	6923      	ldr	r3, [r4, #16]
 800d4c2:	6820      	ldr	r0, [r4, #0]
 800d4c4:	1ac0      	subs	r0, r0, r3
 800d4c6:	6963      	ldr	r3, [r4, #20]
 800d4c8:	b2f6      	uxtb	r6, r6
 800d4ca:	4283      	cmp	r3, r0
 800d4cc:	4637      	mov	r7, r6
 800d4ce:	dc04      	bgt.n	800d4da <__swbuf_r+0x42>
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	f000 f92e 	bl	800d734 <_fflush_r>
 800d4d8:	bb30      	cbnz	r0, 800d528 <__swbuf_r+0x90>
 800d4da:	68a3      	ldr	r3, [r4, #8]
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	60a3      	str	r3, [r4, #8]
 800d4e0:	6823      	ldr	r3, [r4, #0]
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	6022      	str	r2, [r4, #0]
 800d4e6:	701e      	strb	r6, [r3, #0]
 800d4e8:	6963      	ldr	r3, [r4, #20]
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	4283      	cmp	r3, r0
 800d4ee:	d004      	beq.n	800d4fa <__swbuf_r+0x62>
 800d4f0:	89a3      	ldrh	r3, [r4, #12]
 800d4f2:	07db      	lsls	r3, r3, #31
 800d4f4:	d506      	bpl.n	800d504 <__swbuf_r+0x6c>
 800d4f6:	2e0a      	cmp	r6, #10
 800d4f8:	d104      	bne.n	800d504 <__swbuf_r+0x6c>
 800d4fa:	4621      	mov	r1, r4
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	f000 f919 	bl	800d734 <_fflush_r>
 800d502:	b988      	cbnz	r0, 800d528 <__swbuf_r+0x90>
 800d504:	4638      	mov	r0, r7
 800d506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d508:	4b0a      	ldr	r3, [pc, #40]	; (800d534 <__swbuf_r+0x9c>)
 800d50a:	429c      	cmp	r4, r3
 800d50c:	d101      	bne.n	800d512 <__swbuf_r+0x7a>
 800d50e:	68ac      	ldr	r4, [r5, #8]
 800d510:	e7cf      	b.n	800d4b2 <__swbuf_r+0x1a>
 800d512:	4b09      	ldr	r3, [pc, #36]	; (800d538 <__swbuf_r+0xa0>)
 800d514:	429c      	cmp	r4, r3
 800d516:	bf08      	it	eq
 800d518:	68ec      	ldreq	r4, [r5, #12]
 800d51a:	e7ca      	b.n	800d4b2 <__swbuf_r+0x1a>
 800d51c:	4621      	mov	r1, r4
 800d51e:	4628      	mov	r0, r5
 800d520:	f000 f80c 	bl	800d53c <__swsetup_r>
 800d524:	2800      	cmp	r0, #0
 800d526:	d0cb      	beq.n	800d4c0 <__swbuf_r+0x28>
 800d528:	f04f 37ff 	mov.w	r7, #4294967295
 800d52c:	e7ea      	b.n	800d504 <__swbuf_r+0x6c>
 800d52e:	bf00      	nop
 800d530:	0800e2d8 	.word	0x0800e2d8
 800d534:	0800e2f8 	.word	0x0800e2f8
 800d538:	0800e2b8 	.word	0x0800e2b8

0800d53c <__swsetup_r>:
 800d53c:	4b32      	ldr	r3, [pc, #200]	; (800d608 <__swsetup_r+0xcc>)
 800d53e:	b570      	push	{r4, r5, r6, lr}
 800d540:	681d      	ldr	r5, [r3, #0]
 800d542:	4606      	mov	r6, r0
 800d544:	460c      	mov	r4, r1
 800d546:	b125      	cbz	r5, 800d552 <__swsetup_r+0x16>
 800d548:	69ab      	ldr	r3, [r5, #24]
 800d54a:	b913      	cbnz	r3, 800d552 <__swsetup_r+0x16>
 800d54c:	4628      	mov	r0, r5
 800d54e:	f000 f985 	bl	800d85c <__sinit>
 800d552:	4b2e      	ldr	r3, [pc, #184]	; (800d60c <__swsetup_r+0xd0>)
 800d554:	429c      	cmp	r4, r3
 800d556:	d10f      	bne.n	800d578 <__swsetup_r+0x3c>
 800d558:	686c      	ldr	r4, [r5, #4]
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d560:	0719      	lsls	r1, r3, #28
 800d562:	d42c      	bmi.n	800d5be <__swsetup_r+0x82>
 800d564:	06dd      	lsls	r5, r3, #27
 800d566:	d411      	bmi.n	800d58c <__swsetup_r+0x50>
 800d568:	2309      	movs	r3, #9
 800d56a:	6033      	str	r3, [r6, #0]
 800d56c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	f04f 30ff 	mov.w	r0, #4294967295
 800d576:	e03e      	b.n	800d5f6 <__swsetup_r+0xba>
 800d578:	4b25      	ldr	r3, [pc, #148]	; (800d610 <__swsetup_r+0xd4>)
 800d57a:	429c      	cmp	r4, r3
 800d57c:	d101      	bne.n	800d582 <__swsetup_r+0x46>
 800d57e:	68ac      	ldr	r4, [r5, #8]
 800d580:	e7eb      	b.n	800d55a <__swsetup_r+0x1e>
 800d582:	4b24      	ldr	r3, [pc, #144]	; (800d614 <__swsetup_r+0xd8>)
 800d584:	429c      	cmp	r4, r3
 800d586:	bf08      	it	eq
 800d588:	68ec      	ldreq	r4, [r5, #12]
 800d58a:	e7e6      	b.n	800d55a <__swsetup_r+0x1e>
 800d58c:	0758      	lsls	r0, r3, #29
 800d58e:	d512      	bpl.n	800d5b6 <__swsetup_r+0x7a>
 800d590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d592:	b141      	cbz	r1, 800d5a6 <__swsetup_r+0x6a>
 800d594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d598:	4299      	cmp	r1, r3
 800d59a:	d002      	beq.n	800d5a2 <__swsetup_r+0x66>
 800d59c:	4630      	mov	r0, r6
 800d59e:	f7ff fc0b 	bl	800cdb8 <_free_r>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	6363      	str	r3, [r4, #52]	; 0x34
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5ac:	81a3      	strh	r3, [r4, #12]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	6063      	str	r3, [r4, #4]
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	f043 0308 	orr.w	r3, r3, #8
 800d5bc:	81a3      	strh	r3, [r4, #12]
 800d5be:	6923      	ldr	r3, [r4, #16]
 800d5c0:	b94b      	cbnz	r3, 800d5d6 <__swsetup_r+0x9a>
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5cc:	d003      	beq.n	800d5d6 <__swsetup_r+0x9a>
 800d5ce:	4621      	mov	r1, r4
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f000 fa07 	bl	800d9e4 <__smakebuf_r>
 800d5d6:	89a0      	ldrh	r0, [r4, #12]
 800d5d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5dc:	f010 0301 	ands.w	r3, r0, #1
 800d5e0:	d00a      	beq.n	800d5f8 <__swsetup_r+0xbc>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60a3      	str	r3, [r4, #8]
 800d5e6:	6963      	ldr	r3, [r4, #20]
 800d5e8:	425b      	negs	r3, r3
 800d5ea:	61a3      	str	r3, [r4, #24]
 800d5ec:	6923      	ldr	r3, [r4, #16]
 800d5ee:	b943      	cbnz	r3, 800d602 <__swsetup_r+0xc6>
 800d5f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5f4:	d1ba      	bne.n	800d56c <__swsetup_r+0x30>
 800d5f6:	bd70      	pop	{r4, r5, r6, pc}
 800d5f8:	0781      	lsls	r1, r0, #30
 800d5fa:	bf58      	it	pl
 800d5fc:	6963      	ldrpl	r3, [r4, #20]
 800d5fe:	60a3      	str	r3, [r4, #8]
 800d600:	e7f4      	b.n	800d5ec <__swsetup_r+0xb0>
 800d602:	2000      	movs	r0, #0
 800d604:	e7f7      	b.n	800d5f6 <__swsetup_r+0xba>
 800d606:	bf00      	nop
 800d608:	20000a78 	.word	0x20000a78
 800d60c:	0800e2d8 	.word	0x0800e2d8
 800d610:	0800e2f8 	.word	0x0800e2f8
 800d614:	0800e2b8 	.word	0x0800e2b8

0800d618 <abort>:
 800d618:	b508      	push	{r3, lr}
 800d61a:	2006      	movs	r0, #6
 800d61c:	f000 faa8 	bl	800db70 <raise>
 800d620:	2001      	movs	r0, #1
 800d622:	f7f3 ff23 	bl	800146c <_exit>
	...

0800d628 <__sflush_r>:
 800d628:	898a      	ldrh	r2, [r1, #12]
 800d62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d62e:	4605      	mov	r5, r0
 800d630:	0710      	lsls	r0, r2, #28
 800d632:	460c      	mov	r4, r1
 800d634:	d458      	bmi.n	800d6e8 <__sflush_r+0xc0>
 800d636:	684b      	ldr	r3, [r1, #4]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	dc05      	bgt.n	800d648 <__sflush_r+0x20>
 800d63c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d63e:	2b00      	cmp	r3, #0
 800d640:	dc02      	bgt.n	800d648 <__sflush_r+0x20>
 800d642:	2000      	movs	r0, #0
 800d644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d64a:	2e00      	cmp	r6, #0
 800d64c:	d0f9      	beq.n	800d642 <__sflush_r+0x1a>
 800d64e:	2300      	movs	r3, #0
 800d650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d654:	682f      	ldr	r7, [r5, #0]
 800d656:	602b      	str	r3, [r5, #0]
 800d658:	d032      	beq.n	800d6c0 <__sflush_r+0x98>
 800d65a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d65c:	89a3      	ldrh	r3, [r4, #12]
 800d65e:	075a      	lsls	r2, r3, #29
 800d660:	d505      	bpl.n	800d66e <__sflush_r+0x46>
 800d662:	6863      	ldr	r3, [r4, #4]
 800d664:	1ac0      	subs	r0, r0, r3
 800d666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d668:	b10b      	cbz	r3, 800d66e <__sflush_r+0x46>
 800d66a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d66c:	1ac0      	subs	r0, r0, r3
 800d66e:	2300      	movs	r3, #0
 800d670:	4602      	mov	r2, r0
 800d672:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d674:	6a21      	ldr	r1, [r4, #32]
 800d676:	4628      	mov	r0, r5
 800d678:	47b0      	blx	r6
 800d67a:	1c43      	adds	r3, r0, #1
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	d106      	bne.n	800d68e <__sflush_r+0x66>
 800d680:	6829      	ldr	r1, [r5, #0]
 800d682:	291d      	cmp	r1, #29
 800d684:	d82c      	bhi.n	800d6e0 <__sflush_r+0xb8>
 800d686:	4a2a      	ldr	r2, [pc, #168]	; (800d730 <__sflush_r+0x108>)
 800d688:	40ca      	lsrs	r2, r1
 800d68a:	07d6      	lsls	r6, r2, #31
 800d68c:	d528      	bpl.n	800d6e0 <__sflush_r+0xb8>
 800d68e:	2200      	movs	r2, #0
 800d690:	6062      	str	r2, [r4, #4]
 800d692:	04d9      	lsls	r1, r3, #19
 800d694:	6922      	ldr	r2, [r4, #16]
 800d696:	6022      	str	r2, [r4, #0]
 800d698:	d504      	bpl.n	800d6a4 <__sflush_r+0x7c>
 800d69a:	1c42      	adds	r2, r0, #1
 800d69c:	d101      	bne.n	800d6a2 <__sflush_r+0x7a>
 800d69e:	682b      	ldr	r3, [r5, #0]
 800d6a0:	b903      	cbnz	r3, 800d6a4 <__sflush_r+0x7c>
 800d6a2:	6560      	str	r0, [r4, #84]	; 0x54
 800d6a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6a6:	602f      	str	r7, [r5, #0]
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	d0ca      	beq.n	800d642 <__sflush_r+0x1a>
 800d6ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6b0:	4299      	cmp	r1, r3
 800d6b2:	d002      	beq.n	800d6ba <__sflush_r+0x92>
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	f7ff fb7f 	bl	800cdb8 <_free_r>
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	6360      	str	r0, [r4, #52]	; 0x34
 800d6be:	e7c1      	b.n	800d644 <__sflush_r+0x1c>
 800d6c0:	6a21      	ldr	r1, [r4, #32]
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	47b0      	blx	r6
 800d6c8:	1c41      	adds	r1, r0, #1
 800d6ca:	d1c7      	bne.n	800d65c <__sflush_r+0x34>
 800d6cc:	682b      	ldr	r3, [r5, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d0c4      	beq.n	800d65c <__sflush_r+0x34>
 800d6d2:	2b1d      	cmp	r3, #29
 800d6d4:	d001      	beq.n	800d6da <__sflush_r+0xb2>
 800d6d6:	2b16      	cmp	r3, #22
 800d6d8:	d101      	bne.n	800d6de <__sflush_r+0xb6>
 800d6da:	602f      	str	r7, [r5, #0]
 800d6dc:	e7b1      	b.n	800d642 <__sflush_r+0x1a>
 800d6de:	89a3      	ldrh	r3, [r4, #12]
 800d6e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6e4:	81a3      	strh	r3, [r4, #12]
 800d6e6:	e7ad      	b.n	800d644 <__sflush_r+0x1c>
 800d6e8:	690f      	ldr	r7, [r1, #16]
 800d6ea:	2f00      	cmp	r7, #0
 800d6ec:	d0a9      	beq.n	800d642 <__sflush_r+0x1a>
 800d6ee:	0793      	lsls	r3, r2, #30
 800d6f0:	680e      	ldr	r6, [r1, #0]
 800d6f2:	bf08      	it	eq
 800d6f4:	694b      	ldreq	r3, [r1, #20]
 800d6f6:	600f      	str	r7, [r1, #0]
 800d6f8:	bf18      	it	ne
 800d6fa:	2300      	movne	r3, #0
 800d6fc:	eba6 0807 	sub.w	r8, r6, r7
 800d700:	608b      	str	r3, [r1, #8]
 800d702:	f1b8 0f00 	cmp.w	r8, #0
 800d706:	dd9c      	ble.n	800d642 <__sflush_r+0x1a>
 800d708:	6a21      	ldr	r1, [r4, #32]
 800d70a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d70c:	4643      	mov	r3, r8
 800d70e:	463a      	mov	r2, r7
 800d710:	4628      	mov	r0, r5
 800d712:	47b0      	blx	r6
 800d714:	2800      	cmp	r0, #0
 800d716:	dc06      	bgt.n	800d726 <__sflush_r+0xfe>
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d71e:	81a3      	strh	r3, [r4, #12]
 800d720:	f04f 30ff 	mov.w	r0, #4294967295
 800d724:	e78e      	b.n	800d644 <__sflush_r+0x1c>
 800d726:	4407      	add	r7, r0
 800d728:	eba8 0800 	sub.w	r8, r8, r0
 800d72c:	e7e9      	b.n	800d702 <__sflush_r+0xda>
 800d72e:	bf00      	nop
 800d730:	20400001 	.word	0x20400001

0800d734 <_fflush_r>:
 800d734:	b538      	push	{r3, r4, r5, lr}
 800d736:	690b      	ldr	r3, [r1, #16]
 800d738:	4605      	mov	r5, r0
 800d73a:	460c      	mov	r4, r1
 800d73c:	b913      	cbnz	r3, 800d744 <_fflush_r+0x10>
 800d73e:	2500      	movs	r5, #0
 800d740:	4628      	mov	r0, r5
 800d742:	bd38      	pop	{r3, r4, r5, pc}
 800d744:	b118      	cbz	r0, 800d74e <_fflush_r+0x1a>
 800d746:	6983      	ldr	r3, [r0, #24]
 800d748:	b90b      	cbnz	r3, 800d74e <_fflush_r+0x1a>
 800d74a:	f000 f887 	bl	800d85c <__sinit>
 800d74e:	4b14      	ldr	r3, [pc, #80]	; (800d7a0 <_fflush_r+0x6c>)
 800d750:	429c      	cmp	r4, r3
 800d752:	d11b      	bne.n	800d78c <_fflush_r+0x58>
 800d754:	686c      	ldr	r4, [r5, #4]
 800d756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d0ef      	beq.n	800d73e <_fflush_r+0xa>
 800d75e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d760:	07d0      	lsls	r0, r2, #31
 800d762:	d404      	bmi.n	800d76e <_fflush_r+0x3a>
 800d764:	0599      	lsls	r1, r3, #22
 800d766:	d402      	bmi.n	800d76e <_fflush_r+0x3a>
 800d768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d76a:	f000 f915 	bl	800d998 <__retarget_lock_acquire_recursive>
 800d76e:	4628      	mov	r0, r5
 800d770:	4621      	mov	r1, r4
 800d772:	f7ff ff59 	bl	800d628 <__sflush_r>
 800d776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d778:	07da      	lsls	r2, r3, #31
 800d77a:	4605      	mov	r5, r0
 800d77c:	d4e0      	bmi.n	800d740 <_fflush_r+0xc>
 800d77e:	89a3      	ldrh	r3, [r4, #12]
 800d780:	059b      	lsls	r3, r3, #22
 800d782:	d4dd      	bmi.n	800d740 <_fflush_r+0xc>
 800d784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d786:	f000 f908 	bl	800d99a <__retarget_lock_release_recursive>
 800d78a:	e7d9      	b.n	800d740 <_fflush_r+0xc>
 800d78c:	4b05      	ldr	r3, [pc, #20]	; (800d7a4 <_fflush_r+0x70>)
 800d78e:	429c      	cmp	r4, r3
 800d790:	d101      	bne.n	800d796 <_fflush_r+0x62>
 800d792:	68ac      	ldr	r4, [r5, #8]
 800d794:	e7df      	b.n	800d756 <_fflush_r+0x22>
 800d796:	4b04      	ldr	r3, [pc, #16]	; (800d7a8 <_fflush_r+0x74>)
 800d798:	429c      	cmp	r4, r3
 800d79a:	bf08      	it	eq
 800d79c:	68ec      	ldreq	r4, [r5, #12]
 800d79e:	e7da      	b.n	800d756 <_fflush_r+0x22>
 800d7a0:	0800e2d8 	.word	0x0800e2d8
 800d7a4:	0800e2f8 	.word	0x0800e2f8
 800d7a8:	0800e2b8 	.word	0x0800e2b8

0800d7ac <std>:
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	b510      	push	{r4, lr}
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d7b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7ba:	6083      	str	r3, [r0, #8]
 800d7bc:	8181      	strh	r1, [r0, #12]
 800d7be:	6643      	str	r3, [r0, #100]	; 0x64
 800d7c0:	81c2      	strh	r2, [r0, #14]
 800d7c2:	6183      	str	r3, [r0, #24]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	2208      	movs	r2, #8
 800d7c8:	305c      	adds	r0, #92	; 0x5c
 800d7ca:	f7fd fb83 	bl	800aed4 <memset>
 800d7ce:	4b05      	ldr	r3, [pc, #20]	; (800d7e4 <std+0x38>)
 800d7d0:	6263      	str	r3, [r4, #36]	; 0x24
 800d7d2:	4b05      	ldr	r3, [pc, #20]	; (800d7e8 <std+0x3c>)
 800d7d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7d6:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <std+0x40>)
 800d7d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7da:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <std+0x44>)
 800d7dc:	6224      	str	r4, [r4, #32]
 800d7de:	6323      	str	r3, [r4, #48]	; 0x30
 800d7e0:	bd10      	pop	{r4, pc}
 800d7e2:	bf00      	nop
 800d7e4:	0800dba9 	.word	0x0800dba9
 800d7e8:	0800dbcb 	.word	0x0800dbcb
 800d7ec:	0800dc03 	.word	0x0800dc03
 800d7f0:	0800dc27 	.word	0x0800dc27

0800d7f4 <_cleanup_r>:
 800d7f4:	4901      	ldr	r1, [pc, #4]	; (800d7fc <_cleanup_r+0x8>)
 800d7f6:	f000 b8af 	b.w	800d958 <_fwalk_reent>
 800d7fa:	bf00      	nop
 800d7fc:	0800d735 	.word	0x0800d735

0800d800 <__sfmoreglue>:
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	1e4a      	subs	r2, r1, #1
 800d804:	2568      	movs	r5, #104	; 0x68
 800d806:	4355      	muls	r5, r2
 800d808:	460e      	mov	r6, r1
 800d80a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d80e:	f7ff fb23 	bl	800ce58 <_malloc_r>
 800d812:	4604      	mov	r4, r0
 800d814:	b140      	cbz	r0, 800d828 <__sfmoreglue+0x28>
 800d816:	2100      	movs	r1, #0
 800d818:	e9c0 1600 	strd	r1, r6, [r0]
 800d81c:	300c      	adds	r0, #12
 800d81e:	60a0      	str	r0, [r4, #8]
 800d820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d824:	f7fd fb56 	bl	800aed4 <memset>
 800d828:	4620      	mov	r0, r4
 800d82a:	bd70      	pop	{r4, r5, r6, pc}

0800d82c <__sfp_lock_acquire>:
 800d82c:	4801      	ldr	r0, [pc, #4]	; (800d834 <__sfp_lock_acquire+0x8>)
 800d82e:	f000 b8b3 	b.w	800d998 <__retarget_lock_acquire_recursive>
 800d832:	bf00      	nop
 800d834:	20001f10 	.word	0x20001f10

0800d838 <__sfp_lock_release>:
 800d838:	4801      	ldr	r0, [pc, #4]	; (800d840 <__sfp_lock_release+0x8>)
 800d83a:	f000 b8ae 	b.w	800d99a <__retarget_lock_release_recursive>
 800d83e:	bf00      	nop
 800d840:	20001f10 	.word	0x20001f10

0800d844 <__sinit_lock_acquire>:
 800d844:	4801      	ldr	r0, [pc, #4]	; (800d84c <__sinit_lock_acquire+0x8>)
 800d846:	f000 b8a7 	b.w	800d998 <__retarget_lock_acquire_recursive>
 800d84a:	bf00      	nop
 800d84c:	20001f0b 	.word	0x20001f0b

0800d850 <__sinit_lock_release>:
 800d850:	4801      	ldr	r0, [pc, #4]	; (800d858 <__sinit_lock_release+0x8>)
 800d852:	f000 b8a2 	b.w	800d99a <__retarget_lock_release_recursive>
 800d856:	bf00      	nop
 800d858:	20001f0b 	.word	0x20001f0b

0800d85c <__sinit>:
 800d85c:	b510      	push	{r4, lr}
 800d85e:	4604      	mov	r4, r0
 800d860:	f7ff fff0 	bl	800d844 <__sinit_lock_acquire>
 800d864:	69a3      	ldr	r3, [r4, #24]
 800d866:	b11b      	cbz	r3, 800d870 <__sinit+0x14>
 800d868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d86c:	f7ff bff0 	b.w	800d850 <__sinit_lock_release>
 800d870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d874:	6523      	str	r3, [r4, #80]	; 0x50
 800d876:	4b13      	ldr	r3, [pc, #76]	; (800d8c4 <__sinit+0x68>)
 800d878:	4a13      	ldr	r2, [pc, #76]	; (800d8c8 <__sinit+0x6c>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d87e:	42a3      	cmp	r3, r4
 800d880:	bf04      	itt	eq
 800d882:	2301      	moveq	r3, #1
 800d884:	61a3      	streq	r3, [r4, #24]
 800d886:	4620      	mov	r0, r4
 800d888:	f000 f820 	bl	800d8cc <__sfp>
 800d88c:	6060      	str	r0, [r4, #4]
 800d88e:	4620      	mov	r0, r4
 800d890:	f000 f81c 	bl	800d8cc <__sfp>
 800d894:	60a0      	str	r0, [r4, #8]
 800d896:	4620      	mov	r0, r4
 800d898:	f000 f818 	bl	800d8cc <__sfp>
 800d89c:	2200      	movs	r2, #0
 800d89e:	60e0      	str	r0, [r4, #12]
 800d8a0:	2104      	movs	r1, #4
 800d8a2:	6860      	ldr	r0, [r4, #4]
 800d8a4:	f7ff ff82 	bl	800d7ac <std>
 800d8a8:	68a0      	ldr	r0, [r4, #8]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	2109      	movs	r1, #9
 800d8ae:	f7ff ff7d 	bl	800d7ac <std>
 800d8b2:	68e0      	ldr	r0, [r4, #12]
 800d8b4:	2202      	movs	r2, #2
 800d8b6:	2112      	movs	r1, #18
 800d8b8:	f7ff ff78 	bl	800d7ac <std>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	61a3      	str	r3, [r4, #24]
 800d8c0:	e7d2      	b.n	800d868 <__sinit+0xc>
 800d8c2:	bf00      	nop
 800d8c4:	0800dfd8 	.word	0x0800dfd8
 800d8c8:	0800d7f5 	.word	0x0800d7f5

0800d8cc <__sfp>:
 800d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ce:	4607      	mov	r7, r0
 800d8d0:	f7ff ffac 	bl	800d82c <__sfp_lock_acquire>
 800d8d4:	4b1e      	ldr	r3, [pc, #120]	; (800d950 <__sfp+0x84>)
 800d8d6:	681e      	ldr	r6, [r3, #0]
 800d8d8:	69b3      	ldr	r3, [r6, #24]
 800d8da:	b913      	cbnz	r3, 800d8e2 <__sfp+0x16>
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f7ff ffbd 	bl	800d85c <__sinit>
 800d8e2:	3648      	adds	r6, #72	; 0x48
 800d8e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	d503      	bpl.n	800d8f4 <__sfp+0x28>
 800d8ec:	6833      	ldr	r3, [r6, #0]
 800d8ee:	b30b      	cbz	r3, 800d934 <__sfp+0x68>
 800d8f0:	6836      	ldr	r6, [r6, #0]
 800d8f2:	e7f7      	b.n	800d8e4 <__sfp+0x18>
 800d8f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8f8:	b9d5      	cbnz	r5, 800d930 <__sfp+0x64>
 800d8fa:	4b16      	ldr	r3, [pc, #88]	; (800d954 <__sfp+0x88>)
 800d8fc:	60e3      	str	r3, [r4, #12]
 800d8fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d902:	6665      	str	r5, [r4, #100]	; 0x64
 800d904:	f000 f847 	bl	800d996 <__retarget_lock_init_recursive>
 800d908:	f7ff ff96 	bl	800d838 <__sfp_lock_release>
 800d90c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d914:	6025      	str	r5, [r4, #0]
 800d916:	61a5      	str	r5, [r4, #24]
 800d918:	2208      	movs	r2, #8
 800d91a:	4629      	mov	r1, r5
 800d91c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d920:	f7fd fad8 	bl	800aed4 <memset>
 800d924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d92c:	4620      	mov	r0, r4
 800d92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d930:	3468      	adds	r4, #104	; 0x68
 800d932:	e7d9      	b.n	800d8e8 <__sfp+0x1c>
 800d934:	2104      	movs	r1, #4
 800d936:	4638      	mov	r0, r7
 800d938:	f7ff ff62 	bl	800d800 <__sfmoreglue>
 800d93c:	4604      	mov	r4, r0
 800d93e:	6030      	str	r0, [r6, #0]
 800d940:	2800      	cmp	r0, #0
 800d942:	d1d5      	bne.n	800d8f0 <__sfp+0x24>
 800d944:	f7ff ff78 	bl	800d838 <__sfp_lock_release>
 800d948:	230c      	movs	r3, #12
 800d94a:	603b      	str	r3, [r7, #0]
 800d94c:	e7ee      	b.n	800d92c <__sfp+0x60>
 800d94e:	bf00      	nop
 800d950:	0800dfd8 	.word	0x0800dfd8
 800d954:	ffff0001 	.word	0xffff0001

0800d958 <_fwalk_reent>:
 800d958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d95c:	4606      	mov	r6, r0
 800d95e:	4688      	mov	r8, r1
 800d960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d964:	2700      	movs	r7, #0
 800d966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d96a:	f1b9 0901 	subs.w	r9, r9, #1
 800d96e:	d505      	bpl.n	800d97c <_fwalk_reent+0x24>
 800d970:	6824      	ldr	r4, [r4, #0]
 800d972:	2c00      	cmp	r4, #0
 800d974:	d1f7      	bne.n	800d966 <_fwalk_reent+0xe>
 800d976:	4638      	mov	r0, r7
 800d978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d97c:	89ab      	ldrh	r3, [r5, #12]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d907      	bls.n	800d992 <_fwalk_reent+0x3a>
 800d982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d986:	3301      	adds	r3, #1
 800d988:	d003      	beq.n	800d992 <_fwalk_reent+0x3a>
 800d98a:	4629      	mov	r1, r5
 800d98c:	4630      	mov	r0, r6
 800d98e:	47c0      	blx	r8
 800d990:	4307      	orrs	r7, r0
 800d992:	3568      	adds	r5, #104	; 0x68
 800d994:	e7e9      	b.n	800d96a <_fwalk_reent+0x12>

0800d996 <__retarget_lock_init_recursive>:
 800d996:	4770      	bx	lr

0800d998 <__retarget_lock_acquire_recursive>:
 800d998:	4770      	bx	lr

0800d99a <__retarget_lock_release_recursive>:
 800d99a:	4770      	bx	lr

0800d99c <__swhatbuf_r>:
 800d99c:	b570      	push	{r4, r5, r6, lr}
 800d99e:	460e      	mov	r6, r1
 800d9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a4:	2900      	cmp	r1, #0
 800d9a6:	b096      	sub	sp, #88	; 0x58
 800d9a8:	4614      	mov	r4, r2
 800d9aa:	461d      	mov	r5, r3
 800d9ac:	da07      	bge.n	800d9be <__swhatbuf_r+0x22>
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	602b      	str	r3, [r5, #0]
 800d9b2:	89b3      	ldrh	r3, [r6, #12]
 800d9b4:	061a      	lsls	r2, r3, #24
 800d9b6:	d410      	bmi.n	800d9da <__swhatbuf_r+0x3e>
 800d9b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9bc:	e00e      	b.n	800d9dc <__swhatbuf_r+0x40>
 800d9be:	466a      	mov	r2, sp
 800d9c0:	f000 f964 	bl	800dc8c <_fstat_r>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	dbf2      	blt.n	800d9ae <__swhatbuf_r+0x12>
 800d9c8:	9a01      	ldr	r2, [sp, #4]
 800d9ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9d2:	425a      	negs	r2, r3
 800d9d4:	415a      	adcs	r2, r3
 800d9d6:	602a      	str	r2, [r5, #0]
 800d9d8:	e7ee      	b.n	800d9b8 <__swhatbuf_r+0x1c>
 800d9da:	2340      	movs	r3, #64	; 0x40
 800d9dc:	2000      	movs	r0, #0
 800d9de:	6023      	str	r3, [r4, #0]
 800d9e0:	b016      	add	sp, #88	; 0x58
 800d9e2:	bd70      	pop	{r4, r5, r6, pc}

0800d9e4 <__smakebuf_r>:
 800d9e4:	898b      	ldrh	r3, [r1, #12]
 800d9e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9e8:	079d      	lsls	r5, r3, #30
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	d507      	bpl.n	800da00 <__smakebuf_r+0x1c>
 800d9f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	6123      	str	r3, [r4, #16]
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	6163      	str	r3, [r4, #20]
 800d9fc:	b002      	add	sp, #8
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	ab01      	add	r3, sp, #4
 800da02:	466a      	mov	r2, sp
 800da04:	f7ff ffca 	bl	800d99c <__swhatbuf_r>
 800da08:	9900      	ldr	r1, [sp, #0]
 800da0a:	4605      	mov	r5, r0
 800da0c:	4630      	mov	r0, r6
 800da0e:	f7ff fa23 	bl	800ce58 <_malloc_r>
 800da12:	b948      	cbnz	r0, 800da28 <__smakebuf_r+0x44>
 800da14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da18:	059a      	lsls	r2, r3, #22
 800da1a:	d4ef      	bmi.n	800d9fc <__smakebuf_r+0x18>
 800da1c:	f023 0303 	bic.w	r3, r3, #3
 800da20:	f043 0302 	orr.w	r3, r3, #2
 800da24:	81a3      	strh	r3, [r4, #12]
 800da26:	e7e3      	b.n	800d9f0 <__smakebuf_r+0xc>
 800da28:	4b0d      	ldr	r3, [pc, #52]	; (800da60 <__smakebuf_r+0x7c>)
 800da2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800da2c:	89a3      	ldrh	r3, [r4, #12]
 800da2e:	6020      	str	r0, [r4, #0]
 800da30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da34:	81a3      	strh	r3, [r4, #12]
 800da36:	9b00      	ldr	r3, [sp, #0]
 800da38:	6163      	str	r3, [r4, #20]
 800da3a:	9b01      	ldr	r3, [sp, #4]
 800da3c:	6120      	str	r0, [r4, #16]
 800da3e:	b15b      	cbz	r3, 800da58 <__smakebuf_r+0x74>
 800da40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da44:	4630      	mov	r0, r6
 800da46:	f000 f933 	bl	800dcb0 <_isatty_r>
 800da4a:	b128      	cbz	r0, 800da58 <__smakebuf_r+0x74>
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	f023 0303 	bic.w	r3, r3, #3
 800da52:	f043 0301 	orr.w	r3, r3, #1
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	89a0      	ldrh	r0, [r4, #12]
 800da5a:	4305      	orrs	r5, r0
 800da5c:	81a5      	strh	r5, [r4, #12]
 800da5e:	e7cd      	b.n	800d9fc <__smakebuf_r+0x18>
 800da60:	0800d7f5 	.word	0x0800d7f5

0800da64 <__ascii_mbtowc>:
 800da64:	b082      	sub	sp, #8
 800da66:	b901      	cbnz	r1, 800da6a <__ascii_mbtowc+0x6>
 800da68:	a901      	add	r1, sp, #4
 800da6a:	b142      	cbz	r2, 800da7e <__ascii_mbtowc+0x1a>
 800da6c:	b14b      	cbz	r3, 800da82 <__ascii_mbtowc+0x1e>
 800da6e:	7813      	ldrb	r3, [r2, #0]
 800da70:	600b      	str	r3, [r1, #0]
 800da72:	7812      	ldrb	r2, [r2, #0]
 800da74:	1e10      	subs	r0, r2, #0
 800da76:	bf18      	it	ne
 800da78:	2001      	movne	r0, #1
 800da7a:	b002      	add	sp, #8
 800da7c:	4770      	bx	lr
 800da7e:	4610      	mov	r0, r2
 800da80:	e7fb      	b.n	800da7a <__ascii_mbtowc+0x16>
 800da82:	f06f 0001 	mvn.w	r0, #1
 800da86:	e7f8      	b.n	800da7a <__ascii_mbtowc+0x16>

0800da88 <memmove>:
 800da88:	4288      	cmp	r0, r1
 800da8a:	b510      	push	{r4, lr}
 800da8c:	eb01 0402 	add.w	r4, r1, r2
 800da90:	d902      	bls.n	800da98 <memmove+0x10>
 800da92:	4284      	cmp	r4, r0
 800da94:	4623      	mov	r3, r4
 800da96:	d807      	bhi.n	800daa8 <memmove+0x20>
 800da98:	1e43      	subs	r3, r0, #1
 800da9a:	42a1      	cmp	r1, r4
 800da9c:	d008      	beq.n	800dab0 <memmove+0x28>
 800da9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800daa6:	e7f8      	b.n	800da9a <memmove+0x12>
 800daa8:	4402      	add	r2, r0
 800daaa:	4601      	mov	r1, r0
 800daac:	428a      	cmp	r2, r1
 800daae:	d100      	bne.n	800dab2 <memmove+0x2a>
 800dab0:	bd10      	pop	{r4, pc}
 800dab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daba:	e7f7      	b.n	800daac <memmove+0x24>

0800dabc <__malloc_lock>:
 800dabc:	4801      	ldr	r0, [pc, #4]	; (800dac4 <__malloc_lock+0x8>)
 800dabe:	f7ff bf6b 	b.w	800d998 <__retarget_lock_acquire_recursive>
 800dac2:	bf00      	nop
 800dac4:	20001f0c 	.word	0x20001f0c

0800dac8 <__malloc_unlock>:
 800dac8:	4801      	ldr	r0, [pc, #4]	; (800dad0 <__malloc_unlock+0x8>)
 800daca:	f7ff bf66 	b.w	800d99a <__retarget_lock_release_recursive>
 800dace:	bf00      	nop
 800dad0:	20001f0c 	.word	0x20001f0c

0800dad4 <_realloc_r>:
 800dad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad6:	4607      	mov	r7, r0
 800dad8:	4614      	mov	r4, r2
 800dada:	460e      	mov	r6, r1
 800dadc:	b921      	cbnz	r1, 800dae8 <_realloc_r+0x14>
 800dade:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dae2:	4611      	mov	r1, r2
 800dae4:	f7ff b9b8 	b.w	800ce58 <_malloc_r>
 800dae8:	b922      	cbnz	r2, 800daf4 <_realloc_r+0x20>
 800daea:	f7ff f965 	bl	800cdb8 <_free_r>
 800daee:	4625      	mov	r5, r4
 800daf0:	4628      	mov	r0, r5
 800daf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf4:	f000 f8fe 	bl	800dcf4 <_malloc_usable_size_r>
 800daf8:	42a0      	cmp	r0, r4
 800dafa:	d20f      	bcs.n	800db1c <_realloc_r+0x48>
 800dafc:	4621      	mov	r1, r4
 800dafe:	4638      	mov	r0, r7
 800db00:	f7ff f9aa 	bl	800ce58 <_malloc_r>
 800db04:	4605      	mov	r5, r0
 800db06:	2800      	cmp	r0, #0
 800db08:	d0f2      	beq.n	800daf0 <_realloc_r+0x1c>
 800db0a:	4631      	mov	r1, r6
 800db0c:	4622      	mov	r2, r4
 800db0e:	f7fd f9d3 	bl	800aeb8 <memcpy>
 800db12:	4631      	mov	r1, r6
 800db14:	4638      	mov	r0, r7
 800db16:	f7ff f94f 	bl	800cdb8 <_free_r>
 800db1a:	e7e9      	b.n	800daf0 <_realloc_r+0x1c>
 800db1c:	4635      	mov	r5, r6
 800db1e:	e7e7      	b.n	800daf0 <_realloc_r+0x1c>

0800db20 <_raise_r>:
 800db20:	291f      	cmp	r1, #31
 800db22:	b538      	push	{r3, r4, r5, lr}
 800db24:	4604      	mov	r4, r0
 800db26:	460d      	mov	r5, r1
 800db28:	d904      	bls.n	800db34 <_raise_r+0x14>
 800db2a:	2316      	movs	r3, #22
 800db2c:	6003      	str	r3, [r0, #0]
 800db2e:	f04f 30ff 	mov.w	r0, #4294967295
 800db32:	bd38      	pop	{r3, r4, r5, pc}
 800db34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db36:	b112      	cbz	r2, 800db3e <_raise_r+0x1e>
 800db38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db3c:	b94b      	cbnz	r3, 800db52 <_raise_r+0x32>
 800db3e:	4620      	mov	r0, r4
 800db40:	f000 f830 	bl	800dba4 <_getpid_r>
 800db44:	462a      	mov	r2, r5
 800db46:	4601      	mov	r1, r0
 800db48:	4620      	mov	r0, r4
 800db4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db4e:	f000 b817 	b.w	800db80 <_kill_r>
 800db52:	2b01      	cmp	r3, #1
 800db54:	d00a      	beq.n	800db6c <_raise_r+0x4c>
 800db56:	1c59      	adds	r1, r3, #1
 800db58:	d103      	bne.n	800db62 <_raise_r+0x42>
 800db5a:	2316      	movs	r3, #22
 800db5c:	6003      	str	r3, [r0, #0]
 800db5e:	2001      	movs	r0, #1
 800db60:	e7e7      	b.n	800db32 <_raise_r+0x12>
 800db62:	2400      	movs	r4, #0
 800db64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db68:	4628      	mov	r0, r5
 800db6a:	4798      	blx	r3
 800db6c:	2000      	movs	r0, #0
 800db6e:	e7e0      	b.n	800db32 <_raise_r+0x12>

0800db70 <raise>:
 800db70:	4b02      	ldr	r3, [pc, #8]	; (800db7c <raise+0xc>)
 800db72:	4601      	mov	r1, r0
 800db74:	6818      	ldr	r0, [r3, #0]
 800db76:	f7ff bfd3 	b.w	800db20 <_raise_r>
 800db7a:	bf00      	nop
 800db7c:	20000a78 	.word	0x20000a78

0800db80 <_kill_r>:
 800db80:	b538      	push	{r3, r4, r5, lr}
 800db82:	4d07      	ldr	r5, [pc, #28]	; (800dba0 <_kill_r+0x20>)
 800db84:	2300      	movs	r3, #0
 800db86:	4604      	mov	r4, r0
 800db88:	4608      	mov	r0, r1
 800db8a:	4611      	mov	r1, r2
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	f7f3 fc5d 	bl	800144c <_kill>
 800db92:	1c43      	adds	r3, r0, #1
 800db94:	d102      	bne.n	800db9c <_kill_r+0x1c>
 800db96:	682b      	ldr	r3, [r5, #0]
 800db98:	b103      	cbz	r3, 800db9c <_kill_r+0x1c>
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	bd38      	pop	{r3, r4, r5, pc}
 800db9e:	bf00      	nop
 800dba0:	20001f14 	.word	0x20001f14

0800dba4 <_getpid_r>:
 800dba4:	f7f3 bc4a 	b.w	800143c <_getpid>

0800dba8 <__sread>:
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	460c      	mov	r4, r1
 800dbac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb0:	f000 f8a8 	bl	800dd04 <_read_r>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	bfab      	itete	ge
 800dbb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dbba:	89a3      	ldrhlt	r3, [r4, #12]
 800dbbc:	181b      	addge	r3, r3, r0
 800dbbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dbc2:	bfac      	ite	ge
 800dbc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbc6:	81a3      	strhlt	r3, [r4, #12]
 800dbc8:	bd10      	pop	{r4, pc}

0800dbca <__swrite>:
 800dbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbce:	461f      	mov	r7, r3
 800dbd0:	898b      	ldrh	r3, [r1, #12]
 800dbd2:	05db      	lsls	r3, r3, #23
 800dbd4:	4605      	mov	r5, r0
 800dbd6:	460c      	mov	r4, r1
 800dbd8:	4616      	mov	r6, r2
 800dbda:	d505      	bpl.n	800dbe8 <__swrite+0x1e>
 800dbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f000 f874 	bl	800dcd0 <_lseek_r>
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
 800dbea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbf2:	81a3      	strh	r3, [r4, #12]
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	463b      	mov	r3, r7
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfe:	f000 b823 	b.w	800dc48 <_write_r>

0800dc02 <__sseek>:
 800dc02:	b510      	push	{r4, lr}
 800dc04:	460c      	mov	r4, r1
 800dc06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc0a:	f000 f861 	bl	800dcd0 <_lseek_r>
 800dc0e:	1c43      	adds	r3, r0, #1
 800dc10:	89a3      	ldrh	r3, [r4, #12]
 800dc12:	bf15      	itete	ne
 800dc14:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc1e:	81a3      	strheq	r3, [r4, #12]
 800dc20:	bf18      	it	ne
 800dc22:	81a3      	strhne	r3, [r4, #12]
 800dc24:	bd10      	pop	{r4, pc}

0800dc26 <__sclose>:
 800dc26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc2a:	f000 b81f 	b.w	800dc6c <_close_r>

0800dc2e <__ascii_wctomb>:
 800dc2e:	b149      	cbz	r1, 800dc44 <__ascii_wctomb+0x16>
 800dc30:	2aff      	cmp	r2, #255	; 0xff
 800dc32:	bf85      	ittet	hi
 800dc34:	238a      	movhi	r3, #138	; 0x8a
 800dc36:	6003      	strhi	r3, [r0, #0]
 800dc38:	700a      	strbls	r2, [r1, #0]
 800dc3a:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc3e:	bf98      	it	ls
 800dc40:	2001      	movls	r0, #1
 800dc42:	4770      	bx	lr
 800dc44:	4608      	mov	r0, r1
 800dc46:	4770      	bx	lr

0800dc48 <_write_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4d07      	ldr	r5, [pc, #28]	; (800dc68 <_write_r+0x20>)
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	4608      	mov	r0, r1
 800dc50:	4611      	mov	r1, r2
 800dc52:	2200      	movs	r2, #0
 800dc54:	602a      	str	r2, [r5, #0]
 800dc56:	461a      	mov	r2, r3
 800dc58:	f7f3 f857 	bl	8000d0a <_write>
 800dc5c:	1c43      	adds	r3, r0, #1
 800dc5e:	d102      	bne.n	800dc66 <_write_r+0x1e>
 800dc60:	682b      	ldr	r3, [r5, #0]
 800dc62:	b103      	cbz	r3, 800dc66 <_write_r+0x1e>
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	20001f14 	.word	0x20001f14

0800dc6c <_close_r>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	4d06      	ldr	r5, [pc, #24]	; (800dc88 <_close_r+0x1c>)
 800dc70:	2300      	movs	r3, #0
 800dc72:	4604      	mov	r4, r0
 800dc74:	4608      	mov	r0, r1
 800dc76:	602b      	str	r3, [r5, #0]
 800dc78:	f7f3 fc1f 	bl	80014ba <_close>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_close_r+0x1a>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_close_r+0x1a>
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	20001f14 	.word	0x20001f14

0800dc8c <_fstat_r>:
 800dc8c:	b538      	push	{r3, r4, r5, lr}
 800dc8e:	4d07      	ldr	r5, [pc, #28]	; (800dcac <_fstat_r+0x20>)
 800dc90:	2300      	movs	r3, #0
 800dc92:	4604      	mov	r4, r0
 800dc94:	4608      	mov	r0, r1
 800dc96:	4611      	mov	r1, r2
 800dc98:	602b      	str	r3, [r5, #0]
 800dc9a:	f7f3 fc1a 	bl	80014d2 <_fstat>
 800dc9e:	1c43      	adds	r3, r0, #1
 800dca0:	d102      	bne.n	800dca8 <_fstat_r+0x1c>
 800dca2:	682b      	ldr	r3, [r5, #0]
 800dca4:	b103      	cbz	r3, 800dca8 <_fstat_r+0x1c>
 800dca6:	6023      	str	r3, [r4, #0]
 800dca8:	bd38      	pop	{r3, r4, r5, pc}
 800dcaa:	bf00      	nop
 800dcac:	20001f14 	.word	0x20001f14

0800dcb0 <_isatty_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4d06      	ldr	r5, [pc, #24]	; (800dccc <_isatty_r+0x1c>)
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	4608      	mov	r0, r1
 800dcba:	602b      	str	r3, [r5, #0]
 800dcbc:	f7f3 fc19 	bl	80014f2 <_isatty>
 800dcc0:	1c43      	adds	r3, r0, #1
 800dcc2:	d102      	bne.n	800dcca <_isatty_r+0x1a>
 800dcc4:	682b      	ldr	r3, [r5, #0]
 800dcc6:	b103      	cbz	r3, 800dcca <_isatty_r+0x1a>
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	20001f14 	.word	0x20001f14

0800dcd0 <_lseek_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	4d07      	ldr	r5, [pc, #28]	; (800dcf0 <_lseek_r+0x20>)
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	4608      	mov	r0, r1
 800dcd8:	4611      	mov	r1, r2
 800dcda:	2200      	movs	r2, #0
 800dcdc:	602a      	str	r2, [r5, #0]
 800dcde:	461a      	mov	r2, r3
 800dce0:	f7f3 fc12 	bl	8001508 <_lseek>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	d102      	bne.n	800dcee <_lseek_r+0x1e>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	b103      	cbz	r3, 800dcee <_lseek_r+0x1e>
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	20001f14 	.word	0x20001f14

0800dcf4 <_malloc_usable_size_r>:
 800dcf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcf8:	1f18      	subs	r0, r3, #4
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	bfbc      	itt	lt
 800dcfe:	580b      	ldrlt	r3, [r1, r0]
 800dd00:	18c0      	addlt	r0, r0, r3
 800dd02:	4770      	bx	lr

0800dd04 <_read_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	4d07      	ldr	r5, [pc, #28]	; (800dd24 <_read_r+0x20>)
 800dd08:	4604      	mov	r4, r0
 800dd0a:	4608      	mov	r0, r1
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	2200      	movs	r2, #0
 800dd10:	602a      	str	r2, [r5, #0]
 800dd12:	461a      	mov	r2, r3
 800dd14:	f7f3 fbb4 	bl	8001480 <_read>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	d102      	bne.n	800dd22 <_read_r+0x1e>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	b103      	cbz	r3, 800dd22 <_read_r+0x1e>
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	bd38      	pop	{r3, r4, r5, pc}
 800dd24:	20001f14 	.word	0x20001f14

0800dd28 <_init>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	bf00      	nop
 800dd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2e:	bc08      	pop	{r3}
 800dd30:	469e      	mov	lr, r3
 800dd32:	4770      	bx	lr

0800dd34 <_fini>:
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd36:	bf00      	nop
 800dd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3a:	bc08      	pop	{r3}
 800dd3c:	469e      	mov	lr, r3
 800dd3e:	4770      	bx	lr
